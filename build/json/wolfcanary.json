{"io.wolfscript.0":{"namespace":"","title":"Classes and interfaces for namespace io.wolfscript","description":"Classes and interfaces for namespace io.wolfscript","name":"io.wolfscript","qualifiedname":"io.wolfscript.0","packagename":"io.wolfscript","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.BlockIterator","io.wolfscript.LineTracer","io.wolfscript.MathHelp","io.wolfscript.ToolBox","io.wolfscript.Translator","io.wolfscript.Wolf","io.wolfscript.WolfClassLoader","io.wolfscript.WolfDeserializeException"],"interfaces":[],"enums":[],"namespaces":["io.wolfscript.api.0","io.wolfscript.backbone.0","io.wolfscript.bansystem.0","io.wolfscript.channels.0","io.wolfscript.chat.0","io.wolfscript.commandsys.0","io.wolfscript.config.0","io.wolfscript.converter.0","io.wolfscript.database.0","io.wolfscript.exceptions.0","io.wolfscript.help.0","io.wolfscript.hook.0","io.wolfscript.kit.0","io.wolfscript.logger.0","io.wolfscript.metrics.0","io.wolfscript.motd.0","io.wolfscript.permissionsystem.0","io.wolfscript.plugin.0","io.wolfscript.serialize.0","io.wolfscript.tasks.0","io.wolfscript.user.0","io.wolfscript.util.0","io.wolfscript.warp.0"],"properties":[]},"io.wolfscript.BlockIterator":{"namespace":"io.wolfscript","title":"Iterator wrapper for a LineTracer","description":"Iterator wrapper for a LineTracer","name":"BlockIterator","qualifiedname":"io.wolfscript.BlockIterator","type":"class","scope":"public","implements":["Iterator<Block"],"constructors":[],"methods":[{"title":"Constructor requiring player, uses default values","description":"Constructor requiring player, uses default values","doc":{"return":["{@code true} if the is a next block /\n    @Override\n    public boolean hasNext() {\n        if (alreadyAdvanced) { \n            /* we've already done this check, so check the curent LineTracer block /\n            return tracer.getCurBlock() != null;\n        }\n        alreadyAdvanced = true; // Need to track if we have advanced or not\n        return tracer.getNextBlock(doAir) != null;\n    }\n\n    /** Gets the next {@link io.wolfscript.api.world.blocks.Block} in line","next block"],"throws":["NoSuchElementException if there are no more blocks /\n    @Override\n    public Block next() {\n        if (alreadyAdvanced) { // If hasNext was checked, then we need to check the current block\n            alreadyAdvanced = false; //We are no longer advanced\n            if (tracer.getCurBlock() == null) {\n                throw new NoSuchElementException(\"No more blocks\");\n            }\n            return tracer.getCurBlock();\n        }\n        Block block = tracer.getNextBlock(doAir);\n        if (block == null) {\n            throw new NoSuchElementException(\"No more blocks\");\n        }\n        return block;\n    }\n\n    /** Sets the current block to Air, effectively removing it from the world /\n    @Override\n    public void remove() {\n        tracer.getCurBlock().setType(BlockType.Air);\n        tracer.getCurBlock().update();\n    }\n\n    /** Replaces the current block with the given BlockType"]},"scope":"public","return":"void","name":"replace","args":[{"name":"type","type":"int","description":"the block type used to replace the current block /\n    public void replace(BlockType type) {\n        tracer.getCurBlock().setType(type);\n        tracer.getCurBlock().update();\n    }\n\n    /** Replaces the current block type to the given BlockType Id"},{"name":"data","type":"int","description":"the new block data"}]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.position.Location","java.util.Iterator","java.util.NoSuchElementException"],"properties":[]},"io.wolfscript.LineTracer":{"namespace":"io.wolfscript","title":"Traces the line of sight of an entity.","description":"Traces the line of sight of an entity. You can retrieve any blocks along the Line of Sight or simply the last block there is within a specified range. Range defaults to 200 blocks","doc":{"author":["Ho0ber"]},"name":"LineTracer","qualifiedname":"io.wolfscript.LineTracer","type":"class","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.position.Location"],"properties":[{"name":"LastBlock","modifier":"writeonly","args":[{"name":"type","type":"int","description":"the {@link io.wolfscript.api.world.blocks.Block} type id /\n    public void setTargetBlock(int type) {\n        if (targetBlock != null) {\n            targetBlock.setTypeId((short)type);\n            targetBlock.update();\n        }\n    }\n\n    /** Returns STEPS forward along line of vision and returns block. This method skips all Air Blocks."}],"description":"Set: Constructor requiring player, uses default values","doc":{"return":["the Target {@link io.wolfscript.api.world.blocks.Block} /\n    public Block getTargetBlock() {\n        while ((length <= range) && targetBlock == null) {\n            /* do nothing, just keep looping til we get out of range of have a block /\n            getNextBlock();\n        }\n        return targetBlock;\n    }\n\n    /** Sets the type of the block at the cursor","the next {@link io.wolfscript.api.world.blocks.Block} or null if none exists /\n    public Block getNextBlock() {\n        return getNextBlock(false);\n    }\n\n    /** Returns STEPS forward along line of vision and returns block.","the next {@link io.wolfscript.api.world.blocks.Block} or null if none exists /\n    public Block getNextBlock(boolean doAir) {\n        Block block = null;\n\n        while ((length <= range) && continueLoop(block)) {\n            length += step;\n            /* common is the first half of the equation, prevents us from calculating twice /\n            double common = (step Math.sin(Math.toRadians(rotY)));\n            /* calculate the offsets /\n            yOffset = (step Math.cos(Math.toRadians(rotY)));\n            zOffset = (common Math.cos(Math.toRadians(rotX)));\n            xOffset = (common Math.sin(Math.toRadians(rotX)));\n            /* Apply offset to current coordinates /\n            currentX = xOffset + currentX;\n            currentY = yOffset + currentY;\n            currentZ = zOffset + currentZ;\n\n            if (outOfWorld(currentX, currentY, currentZ)) {\n                currentBlock = block = null;\n                break;\n            }\n\n            block = playerLoc.getWorld().getBlockAt(ToolBox.floorToBlock(currentX), ToolBox.floorToBlock(currentY), ToolBox.floorToBlock(currentZ));\n\n            if (block != null && !block.equals(currentBlock)) {\n                if (block.isAir() && !doAir) {\n                    continue;\n                }\n                /* set last values to current values /\n                lastBlock = currentBlock;\n                currentBlock = block;\n                last_x = currentX;\n                last_y = currentY;\n                last_z = currentZ;\n                break;\n            }\n        }\n\n        /* Reset block to null if the block was air and not tracking air /\n        if (block != null && block.isAir() && !doAir) {\n            block = null;\n        }\n\n        /* set target block for later /\n        if (targetBlock == null) {\n            targetBlock = block;\n        }\n\n        return block;\n    }\n\n    /* Checks if loop can continue above /\n    private boolean continueLoop(Block block) {\n        if (block == null) {\n            return true;\n        }\n        if (currentBlock != null && currentBlock.equals(block)) {\n            return true;\n        }\n        if (block.isAir()) {\n            return true;\n        }\n        return false;\n    }\n\n    private boolean outOfWorld(double x, double y, double z) {\n        return ToolBox.floorToBlock(x) < -30000000 || ToolBox.floorToBlock(x) > 30000000 || ToolBox.floorToBlock(y) < 0 || ToolBox.floorToBlock(y) > 256 || ToolBox.floorToBlock(z) < -30000000 || ToolBox.floorToBlock(z) > 30000000;\n    }\n\n    /** Returns the current {@link io.wolfscript.api.world.blocks.Block} along the line of vision","the current {@link io.wolfscript.api.world.blocks.Block} /\n    public Block getCurBlock() {\n        return currentBlock;\n    }\n\n    /** Sets current block type id","the last {@link io.wolfscript.api.world.blocks.Block} could be null if this is first iteration /\n    public Block getLastBlock() {\n        return lastBlock;\n    }\n\n    /** Sets previous block type id"]},"return":"void","scope":"public","title":"Set: Constructor requiring player, uses default values"}]},"io.wolfscript.MathHelp":{"namespace":"io.wolfscript","title":"Helper class for math methods","description":"Helper class for math methods","doc":{"author":["Jason (darkdiplomat)"]},"name":"MathHelp","qualifiedname":"io.wolfscript.MathHelp","type":"class","scope":"public","constructors":[],"methods":[{"title":"Checks if an integer is within a given range","description":"Checks if an integer is within a given range","doc":{"return":["{@code true} if in range; {@code false} if not /\n    public static boolean isInRange(int def, int min, int max) {\n        return def >= min && def <= max;\n    }\n\n    /** Sets an integer within the given range","{@code def} if in range; {@code min} if {@code def} is lower than {@code min}; {@code max} if {@code def} is greater than {@code max} /\n    public static int setInRange(int def, int min, int max) {\n        return def <= max ? def >= min ? def : min : max;\n    }\n\n    /** Sets a float within the given range","{@code def} if in range; {@code min} if {@code def} is lower than {@code min}; {@code max} if {@code def} is greater than {@code max}"]},"scope":"public","describe":"static","return":"float","name":"setInRange","args":[{"name":"def","type":"float","description":"the integer to check"},{"name":"min","type":"float","description":"the minimum value allowed"},{"name":"max","type":"float","description":"the maximum value allowed"}]}],"imports":[],"properties":[]},"io.wolfscript.ToolBox":{"namespace":"io.wolfscript","title":"Set of miscellaneous tools","description":"Set of miscellaneous tools","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"ToolBox","qualifiedname":"io.wolfscript.ToolBox","type":"class","scope":"public","constructors":[],"methods":[{"title":"Check if an array contains a specified value","description":"Check if an array contains a specified value","doc":{"return":["true if needle is found in haystack, false otherwise /\n    public static <T> boolean arrayContains(T[] haystack, T needle) {\n        // return Arrays.asList(haystack).contains(needle); // could be this but in some cases pure iterating is slightly faster\n        for (T type : haystack) {\n            if (type != null && type.equals(needle)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Merge 2 arrays. This will just merge two arrays.","array containing all elements of the 2 given ones /\n    public static <T> T[] arrayMerge(T[] first, T[] second) {\n        T[] result = Arrays.copyOf(first, first.length + second.length);\n\n        System.arraycopy(second, 0, result, first.length, second.length);\n        return result;\n    }\n\n    /** Merge 2 integer arrays. This will just merge two arrays.","array containing all elements of the 2 given ones /\n    public static int[] arrayMerge(int[] first, int[] second) {\n        int[] result = Arrays.copyOf(first, first.length + second.length);\n\n        System.arraycopy(second, 0, result, first.length, second.length);\n        return result;\n    }\n\n    /** Merge 2 arrays. This will remove duplicates.","array containing all elements of the given 2 arrays, minus duplicate entries /\n    public static <T> T[] safeArrayMerge(T[] first, T[] second, T[] template) {\n        HashSet<T> res = new HashSet<T>();\n\n        Collections.addAll(res, first);\n        Collections.addAll(res, second);\n        return res.toArray(template);\n    }\n\n    /** If the given string is \"null\" or null, this method returns null, otherwise it will return the string as it was passed","{@code null} if the {@link String} is {@code null} or is equal to {@code \"null\"}; the {@link String} value otherwise /\n    public static String stringToNull(String str) {\n        if (str == null) {\n            return null;\n        }\n        if (str.equalsIgnoreCase(\"null\")) {\n            return null;\n        }\n        else {\n            return str;\n        }\n    }\n\n    /** Round a entity ordinate to a valid block location component This takes into account the rounding issues in negative x/z direction","the rounded number /\n    public static int floorToBlock(double num) {\n        int i = (int)num;\n\n        return num < i ? i - 1 : i;\n    }\n\n    /** Parses a fully qualified world name as generated by World.getFqName() to a {@link io.wolfscript.api.world.World} object. Also parses fully qualified world names with <code>WorldName:</code>{@link io.wolfscript.api.world.DimensionType} If only the world group name is given (that's \"default\" by default), then the NORMAL dimension will be assumed. <p/> Will not auto load the world if not loaded","the world that was parsed or null if the world didn't exist or wasn't loaded. /\n    public static World parseWorld(String world) {\n        return parseWorld(world, false);\n    }\n\n    /** Parses a fully qualified world name as generated by World.getFqName() to a {@link io.wolfscript.api.world.World} object. Also parses fully qualified world names with <code>WorldName:</code>{@link io.wolfscript.api.world.DimensionType} If only the world group name is given (that's \"default\" by default), then the NORMAL dimension will be assumed. <p/> Will auto load the world if {@code autoLoad} is {@code true}","the world that was parsed or null if the world didn't exist or wasn't loaded. /\n    public static World parseWorld(String world, boolean autoLoad) {\n        String FQName = parseWorldName(world);\n        try {\n            return Wolf.getServer().getWorldManager().getWorld(FQName, autoLoad);\n        }\n        catch (UnknownWorldException e) {\n            return null;\n        }\n    }\n\n    /** Takes <code>World</code> and turns it into <code>World_Normal</code> Takes <code>World:NORMAL</code> and turns it into <code>World_NORMAL</code>","The right FQ name /\n    public static String parseWorldName(String world) {\n        String[] worldData = world.split(\"[:_]\");\n        DimensionType t = null;\n        if (worldData.length == 2) {\n            t = DimensionType.fromName(worldData[1]);\n        }\n        String nameOnly = worldData[0];\n        return parseWorldName(nameOnly, t);\n    }\n\n    /** Gets the FQ world name for the base world and {@link io.wolfscript.api.world.DimensionType} Takes <code>World</code> and turns it into <code>World_Normal</code>","The right FQ name /\n    public static String parseWorldName(String world, DimensionType dimension) {\n        return dimension != null ? world + \"_\" + dimension.getName() : world + \"_\" + DimensionType.NORMAL.getName();\n    }\n\n    /** Get the Unix timestamp for the current time","{@code long} timestamp /\n    public static long getUnixTimestamp() {\n        return (System.currentTimeMillis() / 1000L);\n    }\n\n    /** Parse number of seconds for the given time and TimeUnit String<br> Example: long 1 String HOUR will give you number of seconds in 1 hour.<br> This is used to work with Unix timestamps.","{@code long} parsed time /\n    public static long parseTime(long time, String timeUnit) {\n\n        if (timeUnit.toLowerCase().startsWith(\"min\")) {\n            time = 60;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"h\")) { //hours\n            time = 3600;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"d\")) { //days\n            time = 86400;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"w\")) { //weeks\n            time = 604800;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"mo\")) { //months\n            time = 2629743;\n        }\n        else {\n            throw new NumberFormatException(timeUnit + \" is not a valid time unit!\");\n        }\n        return time;\n    }\n\n    /** Parse number of milliseconds for the given time and TimeUnit String<br> Example: long 1 String HOUR will give you number of seconds in 1 hour.<br> This is used to work with Unix timestamps.","{@code long} parsed time /\n    public static long parseTimeInMillis(long time, String timeUnit) {\n        if (timeUnit.toLowerCase().startsWith(\"minute\")) {\n            time = 60;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"hour\")) {\n            time = 3600;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"day\")) {\n            time = 86400;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"week\")) {\n            time = 604800;\n        }\n        else if (timeUnit.toLowerCase().startsWith(\"month\")) {\n            time = 2629743;\n        }\n        else {\n            throw new NumberFormatException(timeUnit + \" is not a valid time unit!\");\n        }\n        return time 1000;\n    }\n\n    /** Parse number of seconds for the given time and TimeUnit<br> Example: long 1 String {@link TimeUnit#HOURS} will give you number of seconds in 1 hour.<br> This is used to work with unix timestamps.","{@code long} parsed time /\n    public static long parseTime(long time, TimeUnit unit) {\n        return unit.convert(time, TimeUnit.SECONDS);\n    }\n\n    /** Formats a Unix timestamp into the date format defined in server.cfg","{@link String} formatted TimeStamp /\n    public static String formatTimestamp(long timestamp) {\n        return new SimpleDateFormat(Configuration.getServerConfig().getDateFormat()).format(timestamp 1000);\n    }\n\n    /** Form ats a Unix timestamp into the date format specified by {@code format}","{@link String} formatted TimeStamp /\n    public static String formatTimestamp(long timestamp, String format) {\n        return new SimpleDateFormat(format).format(timestamp 1000);\n    }\n\n    /** Gets a readable string for the days/hours/minutes/seconds until a period of time","the String representation of the time until /\n    public static String getTimeUntil(long time, long delay) {\n        long correctedTime = (time + delay) - getUnixTimestamp();\n        if (correctedTime <= 0) {\n            return \"ERR Time\";\n        }\n        return getTimeUntil(correctedTime);\n    }\n\n    /** Gets a readable string for the days/hours/minutes/seconds until a period of time","the String representation of the time until /\n    public static String getTimeUntil(long time) {\n        if (time <= 0) {\n            return \"ERR Time\";\n        }\n        // How many days left?\n        StringBuilder stringTimeLeft = new StringBuilder();\n        if (time >= 60 60 24) {\n            int days = (int)Math.floor(time / (60 60 24));\n            time -= 60 60 24 days;\n            if (days == 1) {\n                stringTimeLeft.append(Integer.toString(days)).append(\" day, \");\n            }\n            else {\n                stringTimeLeft.append(Integer.toString(days)).append(\" days, \");\n            }\n        }\n        if (time >= 60 60) {\n            int hours = (int)Math.floor(time / (60 60));\n            time -= 60 60 hours;\n            if (hours == 1) {\n                stringTimeLeft.append(Integer.toString(hours)).append(\" hour, \");\n            }\n            else {\n                stringTimeLeft.append(Integer.toString(hours)).append(\" hours, \");\n            }\n        }\n        if (time >= 60) {\n            int minutes = (int)Math.floor(time / (60));\n            time -= 60 minutes;\n            if (minutes == 1) {\n                stringTimeLeft.append(Integer.toString(minutes)).append(\" minute \");\n            }\n            else {\n                stringTimeLeft.append(Integer.toString(minutes)).append(\" minutes \");\n            }\n        }\n        else {\n            // Lets remove the last comma, since it will look bad with 2 days, 3 hours, and 14 seconds.\n            if (stringTimeLeft.length() != 0) {\n                stringTimeLeft.deleteCharAt(stringTimeLeft.length() - 1);\n            }\n        }\n        int secs = (int)time;\n        if (stringTimeLeft.length() != 0) {\n            stringTimeLeft.append(\"and \");\n        }\n        if (secs == 1) {\n            stringTimeLeft.append(secs).append(\" second.\");\n        }\n        else {\n            stringTimeLeft.append(secs).append(\" seconds.\");\n        }\n        return stringTimeLeft.toString();\n    }\n\n    /** Generates a Calendar(GMT, English) object representing the current time of day from the time of a world. This time can be retrieved from World.getRelativeTime(). Year, month and day values may be odd as those are not contained within the range of the world tick times in Minecraft.","Calendar object representing the world time as real date /\n    public static Calendar worldTicksToCalendar(long ticks) {\n        long tickMillis = TimeUnit.HOURS.toMillis(6) + (ticks 3600); // Add 6 hours and assume each tick is 3600 mcmillis\n        Calendar calendar = Calendar.getInstance(tz_GMT, Locale.ENGLISH);\n        calendar.setTimeInMillis(tickMillis);\n        return calendar;\n    }\n\n    /** Converts World relative time into a 24 hour clock format","24 hour clock formatted string of the time /\n    public static String worldTimeTo24hClock(long ticks) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm\");\n        dateFormat.setTimeZone(tz_GMT);\n        return dateFormat.format(worldTicksToCalendar(ticks).getTime());\n    }\n\n    /** Converts World relative time into a 12 hour clock format","12 hour clock formatted string of the time /\n    public static String worldTimeTo12hClock(long ticks) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"hh:mm aa\");\n        dateFormat.setTimeZone(tz_GMT);\n        return dateFormat.format(worldTicksToCalendar(ticks).getTime());\n    }\n\n    /** Calculate experience points from the given level, The returned value can be passed to Player.set/remove/addExperience.","the amount of experience points for the given level /\n    public static int levelToExperience(int level) {\n        //source: http://minecraft.gamepedia.com/Experience#Formulas_and_Tables\n        int mid = Math.max(0, level - 15);\n        int high = Math.max(0, level - 30);\n        return level 17 + (mid (mid - 1) / 2) 3 + (high (high - 1) / 2) 7;\n    }\n\n    /** Checks if a string is a UUID","{@code true} if UUID; {@code false} if not /\n    public static boolean isUUID(String uuid) {\n        if (uuid == null) {\n            return false;\n        }\n        return uuidMatcher.reset(uuid).matches();\n    }\n\n    /** Checks if a given user name is a valid Minecraft Username","{@code true} of valid; {@code false} if not /\n    public static boolean isValidUsername(String username) {\n        if (username == null) {\n            return false;\n        }\n        return usrMatcher.reset(username).matches();\n    }\n\n    public static UUID getOfflineUUID(String username) {\n        if (isUUID(username)) {\n            return UUID.fromString(username); // shmuck passed in a UUID so pass it back\n        }\n        return UUID.nameUUIDFromBytes((\"OfflinePlayer:\" + username).getBytes(Charsets.UTF_8));\n    }\n\n    /** Ask's Mojang's API for a UUID for a give UserName","user's uuid or null if not found/on error /\n    public static String usernameToUUID(String username) {\n        if (username == null) {\n            return null;\n        }\n        if (!isValidUsername(username)) {\n            if (isUUID(username)) {\n                return username; // shmuck passed in a UUID so pass it back\n            }\n            return getOfflineUUID(username).toString(); // username isn't valid, so don't bother checking against the mojang API\n        }\n\n        // Make sure the server isn't null, this can happen when called early in server init\n        if (Wolf.getServer() != null) {\n            Player p = Wolf.getServer().getPlayer(username);\n            if (p != null) {\n                return p.getUUIDString(); // player is online, so don't query the mojang API\n            }\n        }\n\n        // If offline mode and not doing BungeeCord, don't continue forward with the API checks\n        if (!Configuration.getServerConfig().isOnlineMode() && !Configuration.getServerConfig().getBungeecordSupport()) {\n            return getOfflineUUID(username).toString(); // username isn't valid, so don't bother checking against the mojang API\n        }\n\n        // Check the reverse lookup cache\n        if (userLookup.getPropertiesMap().containsValue(username)) {\n            for (Map.Entry<String, String> entry : userLookup.getPropertiesMap().entrySet()) {\n                if (entry.getValue().equals(username)) {\n                    if (userLookup.getComments(entry.getKey()).length > 0) {\n                        if (!userLookupExpired(userLookup.getComments(entry.getKey())[0].replace(\";Verified: \", \"\").trim())) {\n                            return entry.getKey();\n                        }\n                    }\n                }\n            }\n        }\n\n        String uuid = null;\n        try {\n            URL url = new URL(\"https://api.mojang.com/profiles/page/1\");\n            HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n            uc.setRequestMethod(\"POST\");\n            uc.setUseCaches(false);\n            uc.setDefaultUseCaches(false);\n            uc.addRequestProperty(\"User-Agent\", \"Minecraft\");\n            uc.addRequestProperty(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            uc.addRequestProperty(\"Pragma\", \"no-cache\");\n            uc.setRequestProperty(\"Content-Type\", \"application/json\");\n            uc.setDoOutput(true);\n            DataOutputStream wr = new DataOutputStream(uc.getOutputStream());\n            wr.writeBytes(\"[{\\\"name\\\":\\\"\" + username + \"\\\", \\\"agent\\\":\\\"Minecraft\\\"}]\");\n            wr.flush();\n            wr.close();\n\n            // Parse it\n            String json = new Scanner(uc.getInputStream(), \"UTF-8\").useDelimiter(\"\\\\A\").next();\n            JSONParser parser = new JSONParser();\n            Object obj = parser.parse(json);\n            uuid = (String)((JSONObject)((JSONArray)((JSONObject)obj).get(\"profiles\")).get(0)).get(\"id\");\n        }\n        catch (Exception ex) {\n            Wolf.log.warn(\"Failed to translate Username into a UUID\");\n            Wolf.log.debug(\"Debugging Stacktrace of failed UUID lookup\", ex);\n        }\n        if (uuid != null && !uuid.contains(\"-\")) {\n            // Add the hyphens back in\n            uuid = uuid.substring(0, 8) + \"-\" + uuid.substring(8, 12) + \"-\" + uuid.substring(12, 16) + \"-\" + uuid.substring(16, 20) + \"-\" + uuid.substring(20, 32);\n        }\n\n        // Update the userLookup\n        if (uuid != null) {\n            userLookup.setString(uuid, username);\n            userLookup.setComments(uuid, \";Verified: \" + System.currentTimeMillis());\n            userLookup.save();\n        }\n        return uuid;\n    }\n\n    /** Asks Mojang's API for a UUID for a given UserName","user's uuid or null if not found/on error"]},"scope":"public","describe":"static","return":"java.util.UUID","name":"uuidFromUsername","args":[{"name":"username","type":"String","description":"the username to check"}]}],"imports":["com.google.common.base.Charsets","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.UnknownWorldException","io.wolfscript.api.world.World","io.wolfscript.config.Configuration","net.visualillusionsent.utils.PropertiesFile","org.json.simple.JSONArray","org.json.simple.JSONObject","org.json.simple.parser.JSONParser","java.io.DataOutputStream","java.net.HttpURLConnection","java.net.URL","java.text.SimpleDateFormat","java.util.Arrays","java.util.Calendar","java.util.Collections","java.util.HashSet","java.util.Locale","java.util.Map","java.util.Scanner","java.util.TimeZone","java.util.UUID","java.util.concurrent.TimeUnit","java.util.regex.Matcher","java.util.regex.Pattern"],"properties":[]},"io.wolfscript.Translator":{"namespace":"io.wolfscript","title":"This class handles internationalization (aka i18n).","description":"This class handles internationalization (aka i18n). It will look up translations from a given key to the language that is currently active.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Translator","qualifiedname":"io.wolfscript.Translator","type":"class","scope":"public","extends":["net.visualillusionsent.utils.LocaleHelper"],"constructors":[],"methods":[],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.config.Configuration","net.visualillusionsent.utils.FileUtils","net.visualillusionsent.utils.LocaleHelper","java.io.File","java.io.FileInputStream","java.io.IOException","java.util.Arrays","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"describe":"static","description":"Get: Translates a message into the current system language if that mapping exists","doc":{"param":["key the message key to used to get the message from the Language file","locale the locale code to get translation for","key the message key to used to get the message from the Language file","locale the locale code to get translation for","args the arguments used to format the message","messageKey the message key to used to get the message from the Language file","messageKey the message key to used to get the message from the Language file","format the arguments used to format the message","key the key to translate","key the key to translate","args the argument objects to use with translation","key the key to check","receiver the receiver of the message","key the key to translate /\n    public static void sendTranslatedNotice(MessageReceiver receiver, String key) {\n        receiver.notice(localTranslate(key, receiver.getLocale()));\n    }\n\n    /** Translates a message and sends it as a notice to the given {@link io.wolfscript.chat.MessageReceiver}","receiver the receiver of the message","key the key to translate","args the argument objects to use with translation /\n    public static void sendTranslatedNotice(MessageReceiver receiver, String key, Object... args) {\n        Wolf.log.debug(\"Translation - \" + key + \": Local{\" + localTranslate(key, receiver.getLocale(), args) + \"} Raw{\" + translateAndFormat(key, args) + \"}\");\n        receiver.notice(localTranslate(key, receiver.getLocale(), args));\n    }\n\n    /** Translates a message and sends it to the given {@link io.wolfscript.chat.MessageReceiver}","receiver the receiver of the message","key the key to translate /\n    public static void sendTranslatedMessage(MessageReceiver receiver, String key) {\n        receiver.message(localTranslate(key, receiver.getLocale()));\n    }\n\n    /** Translates a message and sends it to the given {@link io.wolfscript.chat.MessageReceiver}","receiver the receiver of the message","key the key to translate","args the argument objects to use with translation /\n    public static void sendTranslatedMessage(MessageReceiver receiver, String key, Object... args) {\n        receiver.message(localTranslate(key, receiver.getLocale(), args));\n    }\n\n    /** Translates a message and sends it to the given {@link io.wolfscript.chat.MessageReceiver}","receiver the receiver of the message","messageColor the {@link ChatFormat} color to make the message","key the key to translate","args the argument objects to use with translation /\n    public static void sendTranslatedMessage(MessageReceiver receiver, ChatFormat messageColor, String key, Object... args) {\n        if (messageColor == null) {\n            messageColor = ChatFormat.WHITE;\n        }\n        receiver.message(messageColor.concat(localTranslate(key, receiver.getLocale(), args)));\n    }\n\n    /**","receiver","prefixColor the messages starting color","messages a Map of keys and arguments for translations (arguments may be null) /\n    public static void sendTranslatedMessages(MessageReceiver receiver, ChatFormat prefixColor, Map<String, Object[]> messages) {\n        if (prefixColor == null) {\n            prefixColor = ChatFormat.WHITE;\n        }\n        StringBuilder builder = new StringBuilder(prefixColor.toString());\n        for (Map.Entry<String, Object[]> entry : messages.entrySet()) {\n            if (entry.getValue() != null && entry.getValue().length > 0) {\n                builder.append(localTranslate(entry.getKey(), receiver.getLocale(), entry.getValue()));\n            }\n            else {\n                builder.append(localTranslate(entry.getKey(), receiver.getLocale()));\n            }\n        }\n        receiver.message(builder.toString());\n    }\n\n    /** Returns the instance for this Translator. For translation purposes, please use the provided static methods. This here is for working with the command system"],"return":["the translated message /\n    public static String localTranslate(String key, String locale) {\n        return instance.localeTranslate(key, locale);\n    }\n\n    /** Translates the given message key and applies formatting according to standard Java formatting rules","the translated message","the translated message /\n    public static String translate(String messageKey) {\n        return instance.systemTranslate(messageKey);\n    }\n\n    /** Translates the given message key and applies formatting according to standard Java formatting rules","the translated message","the translated string /\n    public static String nativeTranslate(String key) {\n        return NativeTranslateBridge.$.nativeTranslate(key);\n    }\n\n    /** Uses Minecraft's native translation to translate a key","the translated string /\n    public static String nativeTranslate(String key, Object... args) {\n        return NativeTranslateBridge.$.nativeTranslate(key, args);\n    }\n\n    /** Checks if a key exists for translation in Minecraft's native translation","{@code true} if exists; {@code false} if not /\n    public static boolean nativeCanTranslate(String key) {\n        return NativeTranslateBridge.$.nativeCanTranslate(key);\n    }\n\n    /** Translates a message and sends it as a notice to the given {@link io.wolfscript.chat.MessageReceiver}","the Translator instance"],"see":["java.text.MessageFormat /\n    public static String localTranslate(String key, String locale, Object... args) {\n        return instance.localeTranslate(key, locale, args);\n    }\n\n    /** Translates a message into the current system language if that mapping exists","java.text.MessageFormat /\n    public static String translateAndFormat(String messageKey, Object... format) {\n        return instance.systemTranslate(messageKey, format);\n    }\n\n    /** Uses Minecraft's native translation to translate a key"]},"return":"io.wolfscript.Translator","scope":"public","title":"Get: Translates a message into the current system language if that mapping exists"}]},"io.wolfscript.Wolf":{"namespace":"io.wolfscript","title":"The interface to the brains of the bird! AKA Utils","description":"The interface to the brains of the bird! AKA Utils","doc":{"author":["Chris (damagefilter)","Jos Kuijpers","Brian (WWOL)","Jason (darkdiplomat)"]},"name":"Wolf","qualifiedname":"io.wolfscript.Wolf","type":"class","scope":"public","describe":"abstract","implements":["io.wolfscript.tasks.TaskOwner"],"constructors":[],"fields":[{"title":"log field","description":"log field","name":"log","scope":"public","type":"io.wolfscript.logger.Logman","describe":"final static"}],"methods":[{"title":"Get the ban System to manage bans","description":"Get the ban System to manage bans","doc":{"return":["{@link io.wolfscript.bansystem.BanManager} /\n    public static BanManager bans() {\n        return instance.banManager;\n    }\n\n    /** Get the Groups provider to manage groups","{@link io.wolfscript.user.UserAndGroupsProvider} /\n    public static UserAndGroupsProvider usersAndGroups() {\n        return instance.userAndGroupsProvider;\n    }\n\n    /** Get the Warps provider to manage warps and homes","{@link io.wolfscript.warp.WarpProvider} /\n    public static WarpProvider warps() {\n        return instance.warpProvider;\n    }\n\n    /** Get the Kit Provider to manage kits","{@link io.wolfscript.kit.KitProvider} /\n    public static KitProvider kits() {\n        return instance.kitProvider;\n    }\n\n    /** Get the whitelist provider for managing the whitelist","{@link io.wolfscript.user.WhitelistProvider} /\n    public static WhitelistProvider whitelist() {\n        return instance.whitelist;\n    }\n\n    /** Get the operators provider for managing the ops","{@link io.wolfscript.user.OperatorsProvider} /\n    public static OperatorsProvider ops() {\n        return instance.ops;\n    }\n\n    /** Get the reservelist provider for managing the reservelist","{@link io.wolfscript.user.ReservelistProvider} /\n    public static ReservelistProvider reservelist() {\n        return instance.reservelist;\n    }\n\n    /** Get the Hook executor to fire hooks","{@link io.wolfscript.hook.HookExecutor} /\n    public static HookExecutor hooks() {\n        return instance.hookExecutor;\n    }\n\n    /** Get the database interface for managing system data and custom plugin data","{@link io.wolfscript.database.Database} /\n    public static Database db() {\n        return instance.database;\n    }\n\n    /** Get the Plugin Manager to load, enable or disable plugins and manage plugin dependencies","{@link io.wolfscript.plugin.DefaultPluginManager}","{@link io.wolfscript.permissionsystem.PermissionManager} /\n    public static PermissionManager permissionManager() {\n        return instance.permissionManager;\n    }\n\n    /** Get the help manager, used to register and unregister help commands, and creating help visualizations","{@link io.wolfscript.help.HelpManager} /\n    public static HelpManager help() {\n        return instance.helpManager;\n    }\n\n    /** Get the command manager, used to register and unregister commands.","The current {@link io.wolfscript.commandsys.CommandManager} instance. /\n    public static CommandManager commands() {\n        return instance.commandManager;\n    }\n\n    /** Gets the {@link io.wolfscript.api.factory.Factory} manager","{@link io.wolfscript.api.factory.Factory} /\n    public static Factory factory() {\n        return instance.factory;\n    }\n\n    /** Gets the {@link io.wolfscript.channels.ChannelManager}","{@link io.wolfscript.channels.ChannelManager} /\n    public static ChannelManager channels() {\n        return instance.channelManager;\n    }\n\n    /** Gets the {@link io.wolfscript.api.scoreboard.ScoreboardManager}","{@link io.wolfscript.api.scoreboard.ScoreboardManager} /\n    public static ScoreboardManager scoreboards() {\n        return instance.scoreboardManager;\n    }\n\n    public static MessageOfTheDay motd() {\n        return instance.motd;\n    }\n\n    /** Gets the {@link io.wolfscript.commandsys.PlayerSelector}","{@link io.wolfscript.commandsys.PlayerSelector} /\n    public static PlayerSelector playerSelector() {\n        return instance.playerSelector;\n    }\n\n    /** Get the wolf instance","{@link io.wolfscript.Wolf} /\n    public static Wolf instance() {\n        return instance;\n    }\n\n    /** Set the wolf instance","{@link io.wolfscript.api.Server} /\n    public static Server getServer() {\n        return instance.server;\n    }\n\n    /** Serialize an object of the given Type T into a String.","serialized {@link String} of the object or null if there is no suitable serializer registered /\n    @SuppressWarnings(\"unchecked\")\n    public static <T> String serialize(T object) {\n        Serializer<T> ser = (Serializer<T>)instance.serializers.get(object.getClass());\n\n        if (ser != null) {\n            return ser.serialize(object);\n        }\n        return null;\n    }\n\n    /** Accepts a String with data and the type it should deserialize into.","deserialized data /\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T deserialize(String data, Class<T> shell) {\n        Serializer<T> ser = (Serializer<T>)instance.serializers.get(shell);\n\n        if (ser != null) {\n            try {\n                return ser.deserialize(data);\n            }\n            catch (WolfDeserializeException e) {\n                log.error(\"Deserialization failure.\", e);\n            }\n        }\n        return null;\n    }\n\n    /** Add a serializer to the system","specification version","specification title","implementation version","implementation title","the Wolf Jar file path /\n    public static String getWolfJarPath() {\n        if (jarPath == null) {\n            jarPath = JarUtils.getJarPath(Wolf.class);\n        }\n        return jarPath;\n    }\n\n    /** Attempts to get a Canonical File of the working directory with fall back to absolute","the working directory file /\n    public static File getWorkingDirectory() {\n        try {\n            return new File(\".\").getCanonicalFile();\n        }\n        catch (IOException e) {\n            return new File(\".\").getAbsoluteFile(); // For those moments when Java goes full retard\n        }\n    }\n\n    /** Gets the Working Directory path as a string","working directory path /\n    public static String getWorkingPath() {\n        return getWorkingDirectory().getAbsolutePath();\n    }\n\n    /** Retrieves the JsonNBT Utility","JsonNBTUtility"],"deprecated":["use pluginManager() instead /\n    @Deprecated\n    public static PluginManager manager() {\n        return pluginManager();\n    }\n\n    public static PluginManager pluginManager() {\n        return instance.pluginManager;\n    }\n\n    /** Get the permission loader. Note: As plugin author will rarely need to use this. Use the PermissionProviders with Groups and players instead!"],"param":["wolf the {@link Wolf} instance /\n    public static void setWolf(Wolf wolf) {\n        if (instance == null) {\n            instance = wolf;\n        }\n    }\n\n    /** Set the server instance for this Wolf","server the {@link Server} instance /\n    public static void setServer(Server server) {\n        instance.server = server;\n    }\n\n    /** Enables all late plugins. That means: All plugins that require sub systems to be functioning, such as warps. /\n    public static void enableLatePlugins() {\n        if (!latePluginsLoaded && instance.server != null) {\n            log.info(\"Enabling late Plugins...\");\n            pluginManager().enableLatePlugins();\n            latePluginsLoaded = true;\n        }\n\n        // Enable metrics\n        if (metrics == null) {\n            try {\n                log.debug(\"Starting Metrics...\");\n                metrics = new WolfMetrics(getImplementationTitle(), getImplementationVersion());\n                if (!metrics.start()) {\n                    log.debug(\"Metrics failed to start, no error thrown (opt-out?)\");\n                    return;\n                }\n                log.debug(\"Metrics started!\");\n            }\n            catch (IOException e) {\n                log.debug(\"Metrics failed to start, Error thrown: \", e);\n            }\n        }\n    }\n\n    /** Enables all early plugins. That means: All plugins that don't require sub systems to be functioning, such as warps. /\n    public static void enableEarlyPlugins() {\n        if (!earlyPluginsLoaded && instance.server != null) {\n            log.info(\"Enabling early Plugins...\");\n            pluginManager().enableEarlyPlugins();\n            earlyPluginsLoaded = true;\n        }\n    }\n\n    /** Get the Server for managing server related stuff","object the {@link Object} to serialize","data the data to have deserialized","shell object of given type or null if there is no suitable serializer registered","serializer the {@link Serializer} to add","type The type this serializer can process /\n    public static void addSerializer(Serializer<?> serializer, Class<?> type) {\n        log.debug(\"Adding a new Serializer: \" + type);\n        instance.serializers.put(type, serializer);\n    }\n\n    /** Reload all subsystems and the whole of wolf. Don't over-use this method, it slows down the server. It is used by the reload command and should not be used by anything else! /\n    public void reload() {\n\n        // Reload configurations\n        Configuration.reload();\n\n        // Reload all subsystems with a cache\n        instance.banManager.reload();\n        instance.kitProvider.reload();\n        instance.userAndGroupsProvider.reloadAll();\n        instance.warpProvider.reload();\n        instance.whitelist.reload();\n        instance.reservelist.reload();\n        instance.ops.reload();\n        instance.motd.reload();\n\n        // Reload Player permissions and groups data\n        for (Player p : getServer().getPlayerList()) {\n            userAndGroupsProvider.addOrUpdatePlayerData(p);\n        }\n    }\n\n    /** Sets the Specification Version"],"see":["Package#getSpecificationVersion() /\n    public static String getSpecificationVersion() {\n        return Wolf.class.getPackage().getSpecificationVersion();\n    }\n\n    /** Gets the Specification Title","Package#getSpecificationTitle() /\n    public static String getSpecificationTitle() {\n        return Wolf.class.getPackage().getSpecificationTitle();\n    }\n\n    /** Gets the Implementation Version","Package#getImplementationVersion() /\n    public static String getImplementationVersion() {\n        return Wolf.class.getPackage().getImplementationVersion();\n    }\n\n    /** Gets the Implementation Title","Package#getImplementationTitle() /\n    public static String getImplementationTitle() {\n        return Wolf.class.getPackage().getImplementationTitle();\n    }\n\n    public static long getBuildNumber() {\n        URLClassLoader cl = (URLClassLoader)Wolf.class.getClassLoader();\n        try {\n            Manifest manifest = new Manifest(cl.findResource(\"META-INF/MANIFEST.MF\").openStream());\n            String build = manifest.getMainAttributes().getValue(\"Build\");\n            return Long.parseLong(build);\n        }\n        catch (Exception ex) {\n            return 0;\n        }\n    }\n\n    /** Gets the file path for the Wolf jar file"]},"scope":"public","describe":"static","return":"io.wolfscript.util.JsonNBTUtility","name":"jsonNBT","args":[]}],"imports":["io.wolfscript.api.Server","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.factory.Factory","io.wolfscript.api.scoreboard.ScoreboardManager","io.wolfscript.bansystem.BanManager","io.wolfscript.channels.ChannelManager","io.wolfscript.commandsys.CommandManager","io.wolfscript.commandsys.PlayerSelector","io.wolfscript.config.Configuration","io.wolfscript.database.Database","io.wolfscript.help.HelpManager","io.wolfscript.hook.HookExecutor","io.wolfscript.kit.KitProvider","io.wolfscript.logger.Logman","io.wolfscript.metrics.WolfMetrics","io.wolfscript.motd.MessageOfTheDay","io.wolfscript.permissionsystem.PermissionManager","io.wolfscript.plugin.PluginManager","io.wolfscript.plugin.lifecycle.InvalidPluginLifecycleException","io.wolfscript.plugin.lifecycle.JavaPluginLifecycle","io.wolfscript.plugin.lifecycle.PluginLifecycleFactory","io.wolfscript.serialize.Serializer","io.wolfscript.tasks.TaskOwner","io.wolfscript.user.OperatorsProvider","io.wolfscript.user.ReservelistProvider","io.wolfscript.user.UserAndGroupsProvider","io.wolfscript.user.WhitelistProvider","io.wolfscript.util.JsonNBTUtility","io.wolfscript.warp.WarpProvider","net.visualillusionsent.utils.JarUtils","java.io.File","java.io.IOException","java.net.URLClassLoader","java.util.HashMap","java.util.jar.Manifest"],"properties":[]},"io.wolfscript.WolfClassLoader":{"namespace":"io.wolfscript","title":"Wolf Class Loader","description":"Wolf Class Loader <p/> Used to load and manage plugin jars/classes","doc":{"author":["Jason (darkdiplomat)"]},"name":"WolfClassLoader","qualifiedname":"io.wolfscript.WolfClassLoader","type":"class","scope":"public","describe":"final","extends":["java.net.URLClassLoader"],"constructors":[{"title":"Constructs a new WolfClassLoader","description":"Constructs a new WolfClassLoader","scope":"public","name":"WolfClassLoader","args":[{"name":"url","type":"java.net.URL","description":"the {@link java.net.URL} to the jar file to be opened in this loader"},{"name":"loader","type":"ClassLoader","description":"the {@link ClassLoader} parent"}]}],"methods":[],"imports":["java.lang.reflect.Field","java.net.URL","java.net.URLClassLoader","java.util.Collection","java.util.jar.JarFile"],"properties":[]},"io.wolfscript.WolfDeserializeException":{"namespace":"io.wolfscript","title":"Exception that will be thrown if the serialized String","description":"Exception that will be thrown if the serialized String of a WolfSerializable object does not have the expected length","doc":{"author":["Chris (damagefilter)"]},"name":"WolfDeserializeException","qualifiedname":"io.wolfscript.WolfDeserializeException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[],"methods":[],"imports":[],"properties":[{"name":"Vendor","modifier":"readonly","args":[],"description":"Get: Constructs a new {@code WolfDeserializeException}","doc":{"param":["message the message of the exception that occurred","vendor the vendor /\n    public WolfDeserializeException(String message, String vendor) {\n        super(message);\n        this.vendor = vendor;\n    }\n\n    /** Return the vendor of the serializer that threw this exception."],"return":["the vendor"]},"return":"String","scope":"public","title":"Get: Constructs a new {@code WolfDeserializeException}"}]},"io.wolfscript.api.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.api","description":"Classes and interfaces for namespace io.wolfscript.api","name":"api","qualifiedname":"io.wolfscript.api.0","packagename":"io.wolfscript.api","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.PlayerListData"],"interfaces":["io.wolfscript.api.BoundingBox","io.wolfscript.api.CommandBlockLogic","io.wolfscript.api.ConfigurationManager","io.wolfscript.api.DamageSource","io.wolfscript.api.DataWatcher","io.wolfscript.api.EntityTracker","io.wolfscript.api.EntityTrackerEntry","io.wolfscript.api.MobSpawnerEntry","io.wolfscript.api.MobSpawnerLogic","io.wolfscript.api.NetServerHandler","io.wolfscript.api.OfflinePlayer","io.wolfscript.api.PathFinder","io.wolfscript.api.PlayerManager","io.wolfscript.api.PlayerReference","io.wolfscript.api.VillagerTrade"],"enums":["io.wolfscript.api.DamageType","io.wolfscript.api.DyeColor","io.wolfscript.api.GameMode","io.wolfscript.api.PlayerListAction"],"namespaces":["io.wolfscript.api.ai.0","io.wolfscript.api.attributes.0","io.wolfscript.api.chat.0","io.wolfscript.api.entity.0","io.wolfscript.api.factory.0","io.wolfscript.api.gui.0","io.wolfscript.api.inventory.0","io.wolfscript.api.nbt.0","io.wolfscript.api.packet.0","io.wolfscript.api.potion.0","io.wolfscript.api.scoreboard.0","io.wolfscript.api.statistics.0","io.wolfscript.api.world.0"],"properties":[]},"io.wolfscript.api.BoundingBox":{"namespace":"io.wolfscript.api","title":"(Axis-Aligned) Bounding Box wrapper","description":"(Axis-Aligned) Bounding Box wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BoundingBox","qualifiedname":"io.wolfscript.api.BoundingBox","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.CommandBlockLogic":{"namespace":"io.wolfscript.api","title":"Command Block Logical Interface wrapping","description":"Command Block Logical Interface wrapping","doc":{"author":["Jason (darkdiplomat)"]},"name":"CommandBlockLogic","qualifiedname":"io.wolfscript.api.CommandBlockLogic","type":"interface","scope":"public","extends":["io.wolfscript.chat.MessageReceiver"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.World","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group"],"properties":[]},"io.wolfscript.api.ConfigurationManager":{"namespace":"io.wolfscript.api","title":"Interface for the server configuration manager.","description":"Interface for the server configuration manager. It's important to note that this has nothing to do with the WolfScript configurations!","doc":{"author":["Chris (damagefilter)"]},"name":"ConfigurationManager","qualifiedname":"io.wolfscript.api.ConfigurationManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.packet.Packet","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.Block","java.util.List"],"properties":[]},"io.wolfscript.api.DamageSource":{"namespace":"io.wolfscript.api","title":"DamageSource wrapper","description":"DamageSource wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"DamageSource","qualifiedname":"io.wolfscript.api.DamageSource","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.api.DamageType":{"namespace":"io.wolfscript.api","title":"DamageType enum","description":"DamageType enum","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"DamageType","qualifiedname":"io.wolfscript.api.DamageType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Damage cause by an anvil","description":"Damage cause by an anvil /\n    ANVIL,\n    //\n    /** Damage cause by an arrow /\n    ARROW,\n    //\n    /** Damage caused by cactus (1) /\n    CACTUS,\n    //\n    /** Damage caused by an enchantment /\n    ENCHANTMENT,\n    //\n    /** Damage caused by explosion /\n    EXPLOSION,\n    //\n    /** Damage caused from falling (fall distance - 3.0) /\n    FALL,\n    //\n    /** Damage caused from a falling block /\n    FALLING_BLOCK,\n    //\n    /** Damage caused by fire (1) /\n    FIRE,\n    //\n    /** Damage cause by a Fireball (Assuming Ghast Fireball) /\n    FIREBALL,\n    //\n    /** Low periodic damage caused by burning (1) /\n    FIRE_TICK,\n    //\n    /** Typical Vanilla's /kill but could be used for other things /\n    GENERIC,\n    //\n    /** Damage caused from lava (4) /\n    LAVA,\n    //\n    /** Damage caused from a lightning bolt /\n    LIGHTNINGBOLT,\n    /** Damage dealt by a Mob /\n    MOB,\n    //\n    /** Damage caused by a Player /\n    PLAYER,\n    //\n    /** Damage caused by poison (1) (Potions, Poison) /\n    POTION,\n    //\n    /** Damage caused by starvation (1) /\n    STARVATION,\n    //\n    /** Damage caused by suffocating(1) /\n    SUFFOCATION,\n    //\n    /** Damage caused by a thrown item (like a snowball) /\n    THROWN,\n    //\n    /** Damage caused from falling into the void /\n    VOID,\n    //\n    /** Damage caused from drowning (2) /\n    WATER,\n    //\n    /** Damage caused from a Wither /\n    WITHER,\n    //\n    /** Damage caused from thorns magic /\n    THORNS,\n    //\n    ;\n\n    /** Gets the type from the {@link io.wolfscript.api.DamageSource}","doc":{"return":["the type of the {@link io.wolfscript.api.DamageSource} if valid; {@code null} if not"]},"scope":"public","describe":"static","return":"io.wolfscript.api.DamageType","name":"fromDamageSource","args":[{"name":"source","type":"io.wolfscript.api.DamageSource","description":"the {@link io.wolfscript.api.DamageSource} to get the type for"}]}],"imports":[],"enum":[{"code":"THORNS","value":"","title":"Damage cause by an anvil","description":"Damage cause by an anvil /\n    ANVIL,\n    //\n    /** Damage cause by an arrow /\n    ARROW,\n    //\n    /** Damage caused by cactus (1) /\n    CACTUS,\n    //\n    /** Damage caused by an enchantment /\n    ENCHANTMENT,\n    //\n    /** Damage caused by explosion /\n    EXPLOSION,\n    //\n    /** Damage caused from falling (fall distance - 3.0) /\n    FALL,\n    //\n    /** Damage caused from a falling block /\n    FALLING_BLOCK,\n    //\n    /** Damage caused by fire (1) /\n    FIRE,\n    //\n    /** Damage cause by a Fireball (Assuming Ghast Fireball) /\n    FIREBALL,\n    //\n    /** Low periodic damage caused by burning (1) /\n    FIRE_TICK,\n    //\n    /** Typical Vanilla's /kill but could be used for other things /\n    GENERIC,\n    //\n    /** Damage caused from lava (4) /\n    LAVA,\n    //\n    /** Damage caused from a lightning bolt /\n    LIGHTNINGBOLT,\n    /** Damage dealt by a Mob /\n    MOB,\n    //\n    /** Damage caused by a Player /\n    PLAYER,\n    //\n    /** Damage caused by poison (1) (Potions, Poison) /\n    POTION,\n    //\n    /** Damage caused by starvation (1) /\n    STARVATION,\n    //\n    /** Damage caused by suffocating(1) /\n    SUFFOCATION,\n    //\n    /** Damage caused by a thrown item (like a snowball) /\n    THROWN,\n    //\n    /** Damage caused from falling into the void /\n    VOID,\n    //\n    /** Damage caused from drowning (2) /\n    WATER,\n    //\n    /** Damage caused from a Wither /\n    WITHER,\n    //\n    /** Damage caused from thorns magic","doc":{}}],"properties":[]},"io.wolfscript.api.DataWatcher":{"namespace":"io.wolfscript.api","title":"DataWatcher interface to manipulate data within Native Minecraft Sources.","description":"DataWatcher interface to manipulate data within Native Minecraft Sources. This might as well be used as Stand-Alone datawatcher implementation along with the wrapper.","doc":{"author":["Chris (damagefilter)"]},"name":"DataWatcher","qualifiedname":"io.wolfscript.api.DataWatcher","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.DyeColor":{"namespace":"io.wolfscript.api","title":"DyeColor","description":"DyeColor","doc":{"author":["Jason (darkdiplomat)"]},"name":"DyeColor","qualifiedname":"io.wolfscript.api.DyeColor","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets the Color Code as used for Wool and Wolf Collars","description":"Gets the Color Code as used for Wool and Wolf Collars","doc":{"return":["color code /\n    public int getColorCode() {\n        return ordinal();\n    }\n\n    /** Gets the Color Code as used for Dyes","dye color code /\n    public int getDyeColorCode() {\n        return ~ordinal() & 15;\n    }\n\n    /** Gets the decimal representation of the DyeColor","the decimal code /\n    public int getDecimalCode() {\n        return color_dec;\n    }\n\n    /** Gets a DyeColor from a Dye Color Code","the DyeColor /\n    public static DyeColor fromDyeColorCode(int code) {\n        if (code < 0 || code > 15) {\n            return CUSTOM;\n        }\n        return values()[~code & 15];\n    }\n\n    /** Gets a DyeColor from a Color Code","the DyeColor /\n    public static DyeColor fromColorCode(int code) {\n        if (code < 0 || code > 15) {\n            return CUSTOM;\n        }\n        return values()[code];\n    }\n\n    /** Gets the DyeColor from the decimal code","the DyeColor /\n    public static DyeColor fromDecimalCode(int code) {\n        for (DyeColor color : values()) {\n            if (color.color_dec == code) {\n                return color;\n            }\n        }\n        return CUSTOM;\n    }\n\n    /** Gets a raw color code from R G B values","the rgb color"]},"scope":"public","describe":"static","return":"int","name":"rawColorFromRGB","args":[{"name":"red","type":"int","description":"the red color"},{"name":"green","type":"int","description":"the green color"},{"name":"blue","type":"int","description":"the blue color"}]}],"imports":[],"enum":[{"code":"WHITE","value":"15790320","title":"WHITE DyeColor","description":"WHITE DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ORANGE","value":"15435844","title":"ORANGE DyeColor","description":"ORANGE DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MAGENTA","value":"12801229","title":"MAGENTA DyeColor","description":"MAGENTA DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIGHT_BLUE","value":"6719955","title":"LIGHT_BLUE DyeColor","description":"LIGHT_BLUE DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"YELLOW","value":"14602026","title":"YELLOW DyeColor","description":"YELLOW DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIME","value":"4312372","title":"LIME DyeColor","description":"LIME DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PINK","value":"14188952","title":"PINK DyeColor","description":"PINK DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GRAY","value":"4408131","title":"GRAY DyeColor","description":"GRAY DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIGHT_GRAY","value":"11250603","title":"LIGHT_GRAY DyeColor","description":"LIGHT_GRAY DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CYAN","value":"2651799","title":"CYAN DyeColor","description":"CYAN DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PURPLE","value":"8073150","title":"PURPLE DyeColor","description":"PURPLE DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BLUE","value":"2437522","title":"BLUE DyeColor","description":"BLUE DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BROWN","value":"5320730","title":"BROWN DyeColor","description":"BROWN DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GREEN","value":"3887386","title":"GREEN DyeColor","description":"GREEN DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"RED","value":"11743532","title":"RED DyeColor","description":"RED DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BLACK","value":"1973019","title":"BLACK DyeColor","description":"BLACK DyeColor","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CUSTOM","value":"-1","title":"CUSTOM DyeColor","description":"CUSTOM DyeColor","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.EntityTracker":{"namespace":"io.wolfscript.api","title":"EntityTracker wrapper","description":"EntityTracker wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"EntityTracker","qualifiedname":"io.wolfscript.api.EntityTracker","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.packet.Packet","io.wolfscript.api.world.World","java.util.List"],"properties":[]},"io.wolfscript.api.EntityTrackerEntry":{"namespace":"io.wolfscript.api","title":"EntityTrackerEntry to handle entries in entity trackers","description":"EntityTrackerEntry to handle entries in entity trackers Perhaps we need some more at some point, then we can have it here","doc":{"author":["Chris (damagefilter)"]},"name":"EntityTrackerEntry","qualifiedname":"io.wolfscript.api.EntityTrackerEntry","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.GameMode":{"namespace":"io.wolfscript.api","title":"An enum of player game modes","description":"An enum of player game modes","doc":{"author":["Jason (darkdiplomat)"]},"name":"GameMode","qualifiedname":"io.wolfscript.api.GameMode","type":"enum","scope":"public","constructors":[],"methods":[{"title":"fromId method","description":"fromId method","scope":"public","describe":"static","return":"io.wolfscript.api.GameMode","name":"fromId","args":[{"name":"id","type":"int","description":"id argument"}]}],"imports":[],"enum":[{"code":"SURVIVAL","value":"","title":"SURVIVAL GameMode","description":"SURVIVAL GameMode","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CREATIVE","value":"","title":"CREATIVE GameMode","description":"CREATIVE GameMode","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ADVENTURE","value":"","title":"ADVENTURE GameMode","description":"ADVENTURE GameMode","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SPECTATOR","value":"","title":"SPECTATOR GameMode","description":"SPECTATOR GameMode","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[{"name":"Id","modifier":"readonly","args":[],"describe":"final","description":"Id property","return":"int","scope":"public","title":"Id property"}]},"io.wolfscript.api.MobSpawnerEntry":{"namespace":"io.wolfscript.api","title":"This represents an Entity to spawn from a Mob Spawner.","description":"This represents an Entity to spawn from a Mob Spawner.","doc":{"author":["Aaron (somners)"]},"name":"MobSpawnerEntry","qualifiedname":"io.wolfscript.api.MobSpawnerEntry","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.api.MobSpawnerLogic":{"namespace":"io.wolfscript.api","title":"Wraps the MobSpawnerLogic","description":"Wraps the MobSpawnerLogic","doc":{"author":["Jason Jason (darkdiplomat)","Willem (l4mRh4X0r)"]},"name":"MobSpawnerLogic","qualifiedname":"io.wolfscript.api.MobSpawnerLogic","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.NetServerHandler":{"namespace":"io.wolfscript.api","title":"NetServerHandler wrapper","description":"NetServerHandler wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"NetServerHandler","qualifiedname":"io.wolfscript.api.NetServerHandler","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.packet.Packet","java.net.SocketAddress"],"properties":[]},"io.wolfscript.api.OfflinePlayer":{"namespace":"io.wolfscript.api","title":"An offline player. This is an offline version of a registered player.","description":"An offline player. This is an offline version of a registered player. OfflinePlayer contains information about groups, permissions, world and location where the player has logged out, according to data on disk.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"OfflinePlayer","qualifiedname":"io.wolfscript.api.OfflinePlayer","type":"interface","scope":"public","extends":["io.wolfscript.api.PlayerReference"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.api.PathFinder":{"namespace":"io.wolfscript.api","title":"Path Finder","description":"Path Finder","doc":{"author":["Aaron (somners)"]},"name":"PathFinder","qualifiedname":"io.wolfscript.api.PathFinder","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.position.Location"],"properties":[]},"io.wolfscript.api.PlayerListAction":{"namespace":"io.wolfscript.api","title":"PlayerList action enum","description":"PlayerList action enum","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerListAction","qualifiedname":"io.wolfscript.api.PlayerListAction","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"ADD_PLAYER","value":"","title":"ADD_PLAYER PlayerListAction","description":"ADD_PLAYER PlayerListAction","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"UPDATE_GAME_MODE","value":"","title":"UPDATE_GAME_MODE PlayerListAction","description":"UPDATE_GAME_MODE PlayerListAction","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"UPDATE_LATENCY","value":"","title":"UPDATE_LATENCY PlayerListAction","description":"UPDATE_LATENCY PlayerListAction","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"UPDATE_DISPLAY_NAME","value":"","title":"UPDATE_DISPLAY_NAME PlayerListAction","description":"UPDATE_DISPLAY_NAME PlayerListAction","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REMOVE_PLAYER","value":"","title":"REMOVE_PLAYER PlayerListAction","description":"REMOVE_PLAYER PlayerListAction","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.PlayerListData":{"namespace":"io.wolfscript.api","title":"The information shown in the PlayerList (\"Tab List\")","description":"The information shown in the PlayerList (\"Tab List\")","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerListData","qualifiedname":"io.wolfscript.api.PlayerListData","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"copy method","description":"copy method","scope":"public","return":"io.wolfscript.api.PlayerListData","name":"copy","args":[]},{"title":"Constructs a PlayerListData with {@link io.wolfscript.api.PlayerListAction} information","description":"Constructs a PlayerListData with {@link io.wolfscript.api.PlayerListAction} information","doc":{"param":["action the {@link io.wolfscript.api.PlayerListAction} this data if for","profile the {@link com.mojang.authlib.GameProfile} of the {@link Player} this ListData is for","ping the ping of the {@link Player} this ListData is for","mode the mode of the {@link Player} this ListData is for","displayName the {@link io.wolfscript.api.chat.ChatComponent} used as a DisplayName in the list /\n    public PlayerListData(PlayerListAction action, GameProfile profile, int ping, GameMode mode, ChatComponent displayName) {\n        this.action = action;\n        this.profile = profile;\n        this.ping = ping;\n        this.mode = mode;\n        this.displayName = displayName;\n    }\n\n    /** Constructs a PlayerListData with {@link io.wolfscript.api.PlayerListAction} information","action","uuid","ping","mode","displayName /\n    public PlayerListData(PlayerListAction action, UUID uuid, int ping, GameMode mode, ChatComponent displayName) {\n        // This is the constructor for doing a display name change usually, but can be used for other changes\n        this(action, new GameProfile(uuid, null), ping, mode, displayName);\n    }\n\n    /** Constructs a PlayerListData with {@link io.wolfscript.api.PlayerListAction} information","action the {@link io.wolfscript.api.PlayerListAction} of this ListData","player the {@link Player} to use data from /\n    public PlayerListData(PlayerListAction action, Player player) {\n        // This is the constructor most used within the Player implementation (if done right that is)\n        this.action = action;\n        this.profile = player.getGameProfile();\n        this.ping = player.getPing();\n        this.mode = player.getMode();\n        this.displayName = player.getDisplayNameComponent();\n    }\n\n    /* Copy Construct /\n    private PlayerListData(PlayerListData templ) {\n        this.action = templ.action;\n        this.profile = templ.profile;\n        this.ping = templ.ping;\n        this.mode = templ.mode;\n        this.displayName = displayName != null ? displayName.clone() : null;\n    }\n\n    /** Gets the {@link io.wolfscript.api.PlayerListAction} of this ListData","profile the {@link com.mojang.authlib.GameProfile} to /\n    public final void setProfile(GameProfile profile) {\n        this.profile = profile;\n    }\n\n    /** Gets the ping of the {@link io.wolfscript.api.entity.living.humanoid.Player} this ListData is for","ping the ping to be set /\n    public final void setPing(int ping) {\n        this.ping = ping;\n    }\n\n    /** Gets the {@link io.wolfscript.api.GameMode} of the {@link io.wolfscript.api.entity.living.humanoid.Player} this ListData is for","mode the {@link io.wolfscript.api.GameMode} /\n    public final void setMode(GameMode mode) {\n        this.mode = mode;\n    }\n\n    /** Checks if the {@link io.wolfscript.api.chat.ChatComponent} display name is not null"],"return":["action /\n    public final PlayerListAction getAction() {\n        return action;\n    }\n\n    /** Gets the {@link com.mojang.authlib.GameProfile} of this ListData","profile /\n    public final GameProfile getProfile() {\n        return profile;\n    }\n\n    /** Sets the {@link com.mojang.authlib.GameProfile} of this ListData","ping /\n    public final int getPing() {\n        return ping;\n    }\n\n    /** Sets the ping of this ListData","gamemode /\n    public final GameMode getMode() {\n        return mode;\n    }\n\n    /** Sets the {@link io.wolfscript.api.GameMode} of this ListData","{@code true} if not null; {@code false} if null"]},"scope":"public","describe":"final","return":"boolean","name":"displayNameSet","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["com.mojang.authlib.GameProfile","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.living.humanoid.Player","java.util.UUID"],"properties":[{"name":"DisplayName","args":[{"name":"displayName","type":"io.wolfscript.api.chat.ChatComponent","description":"displayName argument"}],"describe":"final","description":"DisplayName property","return":"io.wolfscript.api.chat.ChatComponent","scope":"public","title":"DisplayName property"}]},"io.wolfscript.api.PlayerManager":{"namespace":"io.wolfscript.api","title":"PlayerManager wrapper","description":"PlayerManager wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerManager","qualifiedname":"io.wolfscript.api.PlayerManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.Block","java.util.List"],"properties":[]},"io.wolfscript.api.PlayerReference":{"namespace":"io.wolfscript.api","title":"The reference that brings {@link io.wolfscript.api.OfflinePlayer} and {@link io.wolfscript.api.entity.living.humanoid.Player} together","description":"The reference that brings {@link io.wolfscript.api.OfflinePlayer} and {@link io.wolfscript.api.entity.living.humanoid.Player} together","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerReference","qualifiedname":"io.wolfscript.api.PlayerReference","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.EnderChestInventory","io.wolfscript.api.inventory.Inventory","io.wolfscript.api.inventory.PlayerInventory","io.wolfscript.api.statistics.Achievement","io.wolfscript.api.statistics.Achievements","io.wolfscript.api.statistics.Stat","io.wolfscript.api.statistics.Statistics","io.wolfscript.api.world.World","io.wolfscript.api.world.position.Location","io.wolfscript.api.world.position.Position","io.wolfscript.permissionsystem.PermissionProvider","io.wolfscript.user.Group","java.util.UUID"],"properties":[]},"io.wolfscript.api.VillagerTrade":{"namespace":"io.wolfscript.api","title":"VillagerTrade wrapper","description":"VillagerTrade wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"VillagerTrade","qualifiedname":"io.wolfscript.api.VillagerTrade","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.entity.living.humanoid.Villager","io.wolfscript.api.inventory.Item","io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.api.ai.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.ai","description":"Classes and interfaces for namespace io.wolfscript.api.ai","name":"ai","qualifiedname":"io.wolfscript.api.ai.0","packagename":"io.wolfscript.api.ai","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.ai.AIArrowAttack","io.wolfscript.api.ai.AIAttackOnCollide","io.wolfscript.api.ai.AIAvoidEntity","io.wolfscript.api.ai.AIBase","io.wolfscript.api.ai.AIBeg","io.wolfscript.api.ai.AIBreakDoor","io.wolfscript.api.ai.AIControlledByPlayer","io.wolfscript.api.ai.AICreeperSwell","io.wolfscript.api.ai.AIDefendVillage","io.wolfscript.api.ai.AIDoorInteract","io.wolfscript.api.ai.AIEatGrass","io.wolfscript.api.ai.AIFindEntityNearest","io.wolfscript.api.ai.AIFindEntityNearestPlayer","io.wolfscript.api.ai.AIFleeSun","io.wolfscript.api.ai.AIFollowGolem","io.wolfscript.api.ai.AIFollowOwner","io.wolfscript.api.ai.AIFollowParent","io.wolfscript.api.ai.AIHarvestFarmland","io.wolfscript.api.ai.AIHurtByTarget","io.wolfscript.api.ai.AILeapAtTarget","io.wolfscript.api.ai.AILookAtTradePlayer","io.wolfscript.api.ai.AILookAtVillager","io.wolfscript.api.ai.AILookIdle","io.wolfscript.api.ai.AIManager","io.wolfscript.api.ai.AIMate","io.wolfscript.api.ai.AIMoveIndoors","io.wolfscript.api.ai.AIMoveThroughVillage","io.wolfscript.api.ai.AIMoveToBlock","io.wolfscript.api.ai.AIMoveTowardsRestriction","io.wolfscript.api.ai.AIMoveTowardsTarget","io.wolfscript.api.ai.AINearestAttackableTarget","io.wolfscript.api.ai.AIOcelotAttack","io.wolfscript.api.ai.AIOcelotSit","io.wolfscript.api.ai.AIOpenDoor","io.wolfscript.api.ai.AIOwnerHurtByTarget","io.wolfscript.api.ai.AIOwnerHurtTarget","io.wolfscript.api.ai.AIPanic","io.wolfscript.api.ai.AIPlay","io.wolfscript.api.ai.AIRestrictOpenDoor","io.wolfscript.api.ai.AIRestrictSun","io.wolfscript.api.ai.AIRunAroundLikeCrazy","io.wolfscript.api.ai.AISit","io.wolfscript.api.ai.AISwimming","io.wolfscript.api.ai.AITarget","io.wolfscript.api.ai.AITargetNonTamed","io.wolfscript.api.ai.AITempt","io.wolfscript.api.ai.AITradePlayer","io.wolfscript.api.ai.AIVillagerInteract","io.wolfscript.api.ai.AIVillagerMate","io.wolfscript.api.ai.AIWander","io.wolfscript.api.ai.AIWatchClosest","io.wolfscript.api.ai.AIWatchClosest2"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.ai.AIArrowAttack":{"namespace":"io.wolfscript.api.ai","title":"interface AIArrowAttack","description":"interface AIArrowAttack","doc":{"author":["Aaron"]},"name":"AIArrowAttack","qualifiedname":"io.wolfscript.api.ai.AIArrowAttack","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIAttackOnCollide":{"namespace":"io.wolfscript.api.ai","title":"interface AIAttackOnCollide","description":"interface AIAttackOnCollide","doc":{"author":["Aaron"]},"name":"AIAttackOnCollide","qualifiedname":"io.wolfscript.api.ai.AIAttackOnCollide","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIAvoidEntity":{"namespace":"io.wolfscript.api.ai","title":"interface AIAvoidEntity","description":"interface AIAvoidEntity","doc":{"author":["Aaron"]},"name":"AIAvoidEntity","qualifiedname":"io.wolfscript.api.ai.AIAvoidEntity","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIBase":{"namespace":"io.wolfscript.api.ai","title":"This class executes AI tasks on a Living Entity based on the following Logic.","description":"This class executes AI tasks on a Living Entity based on the following Logic. To use this, create a class implementing it and then add it to an entity via {@link io.wolfscript.api.ai.AIManager}.","doc":{"author":["Aaron (somners)"]},"name":"AIBase","qualifiedname":"io.wolfscript.api.ai.AIBase","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIBeg":{"namespace":"io.wolfscript.api.ai","title":"interface AIBeg","description":"interface AIBeg","doc":{"author":["Aaron"]},"name":"AIBeg","qualifiedname":"io.wolfscript.api.ai.AIBeg","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIBreakDoor":{"namespace":"io.wolfscript.api.ai","title":"interface AIBreakDoor","description":"interface AIBreakDoor","doc":{"author":["Aaron"]},"name":"AIBreakDoor","qualifiedname":"io.wolfscript.api.ai.AIBreakDoor","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIControlledByPlayer":{"namespace":"io.wolfscript.api.ai","title":"interface AIControlledByPlayer","description":"interface AIControlledByPlayer","doc":{"author":["Aaron"]},"name":"AIControlledByPlayer","qualifiedname":"io.wolfscript.api.ai.AIControlledByPlayer","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AICreeperSwell":{"namespace":"io.wolfscript.api.ai","title":"interface AICreeperSwell","description":"interface AICreeperSwell","doc":{"author":["Aaron"]},"name":"AICreeperSwell","qualifiedname":"io.wolfscript.api.ai.AICreeperSwell","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIDefendVillage":{"namespace":"io.wolfscript.api.ai","title":"interface AIDefendVillage","description":"interface AIDefendVillage","doc":{"author":["Aaron"]},"name":"AIDefendVillage","qualifiedname":"io.wolfscript.api.ai.AIDefendVillage","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIDoorInteract":{"namespace":"io.wolfscript.api.ai","title":"interface AIDoorInteract","description":"interface AIDoorInteract","doc":{"author":["Aaron"]},"name":"AIDoorInteract","qualifiedname":"io.wolfscript.api.ai.AIDoorInteract","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIEatGrass":{"namespace":"io.wolfscript.api.ai","title":"interface AIEatGrass","description":"interface AIEatGrass","doc":{"author":["Aaron"]},"name":"AIEatGrass","qualifiedname":"io.wolfscript.api.ai.AIEatGrass","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFindEntityNearest":{"namespace":"io.wolfscript.api.ai","title":"interface AIFindEntityNearest","description":"interface AIFindEntityNearest","doc":{"author":["Aaron"]},"name":"AIFindEntityNearest","qualifiedname":"io.wolfscript.api.ai.AIFindEntityNearest","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFindEntityNearestPlayer":{"namespace":"io.wolfscript.api.ai","title":"interface AIFindEntityNearestPlayer","description":"interface AIFindEntityNearestPlayer","doc":{"author":["Aaron"]},"name":"AIFindEntityNearestPlayer","qualifiedname":"io.wolfscript.api.ai.AIFindEntityNearestPlayer","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFleeSun":{"namespace":"io.wolfscript.api.ai","title":"interface AIFleeSun","description":"interface AIFleeSun","doc":{"author":["Aaron"]},"name":"AIFleeSun","qualifiedname":"io.wolfscript.api.ai.AIFleeSun","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFollowGolem":{"namespace":"io.wolfscript.api.ai","title":"interface AIFollowGolem","description":"interface AIFollowGolem","doc":{"author":["Aaron"]},"name":"AIFollowGolem","qualifiedname":"io.wolfscript.api.ai.AIFollowGolem","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFollowOwner":{"namespace":"io.wolfscript.api.ai","title":"interface AIFollowOwner","description":"interface AIFollowOwner","doc":{"author":["Aaron"]},"name":"AIFollowOwner","qualifiedname":"io.wolfscript.api.ai.AIFollowOwner","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIFollowParent":{"namespace":"io.wolfscript.api.ai","title":"interface AIFollowParent","description":"interface AIFollowParent","doc":{"author":["Aaron"]},"name":"AIFollowParent","qualifiedname":"io.wolfscript.api.ai.AIFollowParent","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIHarvestFarmland":{"namespace":"io.wolfscript.api.ai","title":"interface AIHarvestFarmland","description":"interface AIHarvestFarmland","doc":{"author":["Aaron"]},"name":"AIHarvestFarmland","qualifiedname":"io.wolfscript.api.ai.AIHarvestFarmland","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIHurtByTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AIHurtByTarget","description":"interface AIHurtByTarget","doc":{"author":["Aaron"]},"name":"AIHurtByTarget","qualifiedname":"io.wolfscript.api.ai.AIHurtByTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AILeapAtTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AILeapAtTarget","description":"interface AILeapAtTarget","doc":{"author":["Aaron"]},"name":"AILeapAtTarget","qualifiedname":"io.wolfscript.api.ai.AILeapAtTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AILookAtTradePlayer":{"namespace":"io.wolfscript.api.ai","title":"interface AILookAtTradePlayer","description":"interface AILookAtTradePlayer","doc":{"author":["Aaron"]},"name":"AILookAtTradePlayer","qualifiedname":"io.wolfscript.api.ai.AILookAtTradePlayer","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AILookAtVillager":{"namespace":"io.wolfscript.api.ai","title":"interface AILookAtVillager","description":"interface AILookAtVillager","doc":{"author":["Aaron"]},"name":"AILookAtVillager","qualifiedname":"io.wolfscript.api.ai.AILookAtVillager","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AILookIdle":{"namespace":"io.wolfscript.api.ai","title":"interface AILookIdle","description":"interface AILookIdle","doc":{"author":["Aaron"]},"name":"AILookIdle","qualifiedname":"io.wolfscript.api.ai.AILookIdle","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIManager":{"namespace":"io.wolfscript.api.ai","title":"This class manages AI for Living Entities. Will do nothing for players.","description":"This class manages AI for Living Entities. Will do nothing for players.","doc":{"author":["Aaron (somners)"]},"name":"AIManager","qualifiedname":"io.wolfscript.api.ai.AIManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMate":{"namespace":"io.wolfscript.api.ai","title":"interface AIMate","description":"interface AIMate","doc":{"author":["Aaron"]},"name":"AIMate","qualifiedname":"io.wolfscript.api.ai.AIMate","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMoveIndoors":{"namespace":"io.wolfscript.api.ai","title":"interface AIMoveIndoors","description":"interface AIMoveIndoors","doc":{"author":["Aaron"]},"name":"AIMoveIndoors","qualifiedname":"io.wolfscript.api.ai.AIMoveIndoors","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMoveThroughVillage":{"namespace":"io.wolfscript.api.ai","title":"interface AIMoveThroughVillage","description":"interface AIMoveThroughVillage","doc":{"author":["Aaron"]},"name":"AIMoveThroughVillage","qualifiedname":"io.wolfscript.api.ai.AIMoveThroughVillage","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMoveToBlock":{"namespace":"io.wolfscript.api.ai","title":"interface AIMoveToBlock","description":"interface AIMoveToBlock","doc":{"author":["Aaron"]},"name":"AIMoveToBlock","qualifiedname":"io.wolfscript.api.ai.AIMoveToBlock","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMoveTowardsRestriction":{"namespace":"io.wolfscript.api.ai","title":"interface AIMoveTowardsRestriction","description":"interface AIMoveTowardsRestriction","doc":{"author":["Aaron"]},"name":"AIMoveTowardsRestriction","qualifiedname":"io.wolfscript.api.ai.AIMoveTowardsRestriction","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIMoveTowardsTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AIMoveTowardsTarget","description":"interface AIMoveTowardsTarget","doc":{"author":["Aaron"]},"name":"AIMoveTowardsTarget","qualifiedname":"io.wolfscript.api.ai.AIMoveTowardsTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AINearestAttackableTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AINearestAttackableTarget","description":"interface AINearestAttackableTarget","doc":{"author":["Aaron"]},"name":"AINearestAttackableTarget","qualifiedname":"io.wolfscript.api.ai.AINearestAttackableTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIOcelotAttack":{"namespace":"io.wolfscript.api.ai","title":"interface AIOcelotAttack","description":"interface AIOcelotAttack","doc":{"author":["Aaron"]},"name":"AIOcelotAttack","qualifiedname":"io.wolfscript.api.ai.AIOcelotAttack","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIOcelotSit":{"namespace":"io.wolfscript.api.ai","title":"interface AIOcelotSit","description":"interface AIOcelotSit","doc":{"author":["Aaron"]},"name":"AIOcelotSit","qualifiedname":"io.wolfscript.api.ai.AIOcelotSit","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIOpenDoor":{"namespace":"io.wolfscript.api.ai","title":"interface AIOpenDoor","description":"interface AIOpenDoor","doc":{"author":["Aaron"]},"name":"AIOpenDoor","qualifiedname":"io.wolfscript.api.ai.AIOpenDoor","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIOwnerHurtByTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AIOwnerHurtByTarget","description":"interface AIOwnerHurtByTarget","doc":{"author":["Aaron"]},"name":"AIOwnerHurtByTarget","qualifiedname":"io.wolfscript.api.ai.AIOwnerHurtByTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIOwnerHurtTarget":{"namespace":"io.wolfscript.api.ai","title":"interface AIOwnerHurtTarget","description":"interface AIOwnerHurtTarget","doc":{"author":["Aaron"]},"name":"AIOwnerHurtTarget","qualifiedname":"io.wolfscript.api.ai.AIOwnerHurtTarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIPanic":{"namespace":"io.wolfscript.api.ai","title":"interface AIPanic","description":"interface AIPanic","doc":{"author":["Aaron"]},"name":"AIPanic","qualifiedname":"io.wolfscript.api.ai.AIPanic","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIPlay":{"namespace":"io.wolfscript.api.ai","title":"interface AIPlay","description":"interface AIPlay","doc":{"author":["Aaron"]},"name":"AIPlay","qualifiedname":"io.wolfscript.api.ai.AIPlay","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIRestrictOpenDoor":{"namespace":"io.wolfscript.api.ai","title":"interface AIRestrictOpenDoor","description":"interface AIRestrictOpenDoor","doc":{"author":["Aaron"]},"name":"AIRestrictOpenDoor","qualifiedname":"io.wolfscript.api.ai.AIRestrictOpenDoor","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIRestrictSun":{"namespace":"io.wolfscript.api.ai","title":"interface AIRestrictSun","description":"interface AIRestrictSun","doc":{"author":["Aaron"]},"name":"AIRestrictSun","qualifiedname":"io.wolfscript.api.ai.AIRestrictSun","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIRunAroundLikeCrazy":{"namespace":"io.wolfscript.api.ai","title":"interface AIRunAroundLikeCrazy","description":"interface AIRunAroundLikeCrazy","doc":{"author":["Aaron"]},"name":"AIRunAroundLikeCrazy","qualifiedname":"io.wolfscript.api.ai.AIRunAroundLikeCrazy","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AISit":{"namespace":"io.wolfscript.api.ai","title":"interface AISit","description":"interface AISit","doc":{"author":["Aaron"]},"name":"AISit","qualifiedname":"io.wolfscript.api.ai.AISit","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AISwimming":{"namespace":"io.wolfscript.api.ai","title":"interface AISwimming","description":"interface AISwimming","doc":{"author":["Aaron"]},"name":"AISwimming","qualifiedname":"io.wolfscript.api.ai.AISwimming","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AITarget":{"namespace":"io.wolfscript.api.ai","title":"interface AITarget","description":"interface AITarget","doc":{"author":["Aaron"]},"name":"AITarget","qualifiedname":"io.wolfscript.api.ai.AITarget","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AITargetNonTamed":{"namespace":"io.wolfscript.api.ai","title":"interface AITargetNonTamed","description":"interface AITargetNonTamed","doc":{"author":["Aaron"]},"name":"AITargetNonTamed","qualifiedname":"io.wolfscript.api.ai.AITargetNonTamed","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AITempt":{"namespace":"io.wolfscript.api.ai","title":"interface AITempt","description":"interface AITempt","doc":{"author":["Aaron"]},"name":"AITempt","qualifiedname":"io.wolfscript.api.ai.AITempt","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AITradePlayer":{"namespace":"io.wolfscript.api.ai","title":"interface AITradePlayer","description":"interface AITradePlayer","doc":{"author":["Aaron"]},"name":"AITradePlayer","qualifiedname":"io.wolfscript.api.ai.AITradePlayer","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIVillagerInteract":{"namespace":"io.wolfscript.api.ai","title":"interface AIVillagerInteract","description":"interface AIVillagerInteract","doc":{"author":["Aaron"]},"name":"AIVillagerInteract","qualifiedname":"io.wolfscript.api.ai.AIVillagerInteract","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIVillagerMate":{"namespace":"io.wolfscript.api.ai","title":"interface AIVillagerMate","description":"interface AIVillagerMate","doc":{"author":["Aaron"]},"name":"AIVillagerMate","qualifiedname":"io.wolfscript.api.ai.AIVillagerMate","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIWander":{"namespace":"io.wolfscript.api.ai","title":"interface AIWander","description":"interface AIWander","doc":{"author":["Aaron"]},"name":"AIWander","qualifiedname":"io.wolfscript.api.ai.AIWander","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIWatchClosest":{"namespace":"io.wolfscript.api.ai","title":"interface AIWatchClosest","description":"interface AIWatchClosest","doc":{"author":["Aaron"]},"name":"AIWatchClosest","qualifiedname":"io.wolfscript.api.ai.AIWatchClosest","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.ai.AIWatchClosest2":{"namespace":"io.wolfscript.api.ai","title":"interface AIWatchClosest2","description":"interface AIWatchClosest2","doc":{"author":["Aaron"]},"name":"AIWatchClosest2","qualifiedname":"io.wolfscript.api.ai.AIWatchClosest2","type":"interface","scope":"public","extends":["io.wolfscript.api.ai.AIBase"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.attributes.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.attributes","description":"Classes and interfaces for namespace io.wolfscript.api.attributes","name":"attributes","qualifiedname":"io.wolfscript.api.attributes.0","packagename":"io.wolfscript.api.attributes","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.attributes.Attribute","io.wolfscript.api.attributes.AttributeMap","io.wolfscript.api.attributes.AttributeModifier","io.wolfscript.api.attributes.ModifiedAttribute","io.wolfscript.api.attributes.RangedAttribute"],"enums":["io.wolfscript.api.attributes.GenericAttribute"],"namespaces":[],"properties":[]},"io.wolfscript.api.attributes.Attribute":{"namespace":"io.wolfscript.api.attributes","title":"interface Attribute","description":"interface Attribute","doc":{"author":["Jason (darkdiplomat)"]},"name":"Attribute","qualifiedname":"io.wolfscript.api.attributes.Attribute","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.attributes.AttributeMap":{"namespace":"io.wolfscript.api.attributes","title":"interface AttributeMap","description":"interface AttributeMap","doc":{"author":["Jason (darkdiplomat)"]},"name":"AttributeMap","qualifiedname":"io.wolfscript.api.attributes.AttributeMap","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","com.google.common.collect.Multimap","java.util.Collection"],"properties":[]},"io.wolfscript.api.attributes.AttributeModifier":{"namespace":"io.wolfscript.api.attributes","title":"interface AttributeModifier","description":"interface AttributeModifier","doc":{"author":["Jason (darkdiplomat)"]},"name":"AttributeModifier","qualifiedname":"io.wolfscript.api.attributes.AttributeModifier","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","java.util.UUID"],"properties":[]},"io.wolfscript.api.attributes.GenericAttribute":{"namespace":"io.wolfscript.api.attributes","title":"enum GenericAttribute","description":"enum GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]},"name":"GenericAttribute","qualifiedname":"io.wolfscript.api.attributes.GenericAttribute","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","io.wolfscript.Wolf"],"enum":[{"code":"MAXHEALTH","value":"\"generic.maxHealth\"","title":"MAXHEALTH GenericAttribute","description":"MAXHEALTH GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FOLLOWRANGE","value":"\"generic.followRange\"","title":"FOLLOWRANGE GenericAttribute","description":"FOLLOWRANGE GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MOVEMENTSPEED","value":"\"generic.movementSpeed\"","title":"MOVEMENTSPEED GenericAttribute","description":"MOVEMENTSPEED GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ATTACKDAMAGE","value":"\"generic.attackDamage\"","title":"ATTACKDAMAGE GenericAttribute","description":"ATTACKDAMAGE GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"KNOCKBACKRESIST","value":"\"generic.knockbackResistance\"","title":"KNOCKBACKRESIST GenericAttribute","description":"KNOCKBACKRESIST GenericAttribute","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[{"name":"Attribute","modifier":"readonly","args":[],"description":"Attribute property","return":"io.wolfscript.api.attributes.Attribute","scope":"public","title":"Attribute property"},{"name":"NativeName","modifier":"readonly","args":[],"description":"NativeName property","return":"String","scope":"public","title":"NativeName property"}]},"io.wolfscript.api.attributes.ModifiedAttribute":{"namespace":"io.wolfscript.api.attributes","title":"interface ModifiedAttribute","description":"interface ModifiedAttribute","doc":{"author":["Jason (darkdiplomat)"]},"name":"ModifiedAttribute","qualifiedname":"io.wolfscript.api.attributes.ModifiedAttribute","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","java.util.UUID"],"properties":[]},"io.wolfscript.api.attributes.RangedAttribute":{"namespace":"io.wolfscript.api.attributes","title":"interface RangedAttribute","description":"interface RangedAttribute","doc":{"author":["Jason (darkdiplomat)"]},"name":"RangedAttribute","qualifiedname":"io.wolfscript.api.attributes.RangedAttribute","type":"interface","scope":"public","extends":["io.wolfscript.api.attributes.Attribute"],"constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta"],"properties":[]},"io.wolfscript.api.chat.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.chat","description":"Classes and interfaces for namespace io.wolfscript.api.chat","name":"chat","qualifiedname":"io.wolfscript.api.chat.0","packagename":"io.wolfscript.api.chat","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.chat.ChatFormatting","io.wolfscript.api.chat.ChatStyle","io.wolfscript.api.chat.ClickEvent","io.wolfscript.api.chat.ClickEventAction","io.wolfscript.api.chat.HoverEvent","io.wolfscript.api.chat.HoverEventAction"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.chat.ChatComponent":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for IChatComponent","description":"Wrapper interface for IChatComponent","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChatComponent","qualifiedname":"io.wolfscript.api.chat.ChatComponent","type":"interface","scope":"public","extends":["Cloneable"],"constructors":[],"methods":[{"title":"Sets the {@link io.wolfscript.api.chat.ChatStyle} of this {@code ChatComponent}","description":"Sets the {@link io.wolfscript.api.chat.ChatStyle} of this {@code ChatComponent}","doc":{"param":["style the {@link io.wolfscript.api.chat.ChatStyle} to be set","text the text to be set","text the text to append","sibling the {@code ChatComponent} to append"],"return":["{@code this} with the {@linke ChatStyle} applied /\n    ChatComponent setChatStyle(ChatStyle style);\n\n    /** Gets the {@link io.wolfscript.api.chat.ChatStyle} of this {@code ChatComponent}","{@link io.wolfscript.api.chat.ChatStyle} /\n    ChatStyle getChatStyle();\n\n    /** Overrides the original text and sets the new text","{@code this} with the new text set /\n    ChatComponent setText(String text);\n\n    /** Appends text to this {@code ChatComponent}","{@code this} with text appened /\n    ChatComponent appendText(String text);\n\n    /** Appends a sibling {@code ChatComponent} to this {@code ChatComponent}","{@code this} with the {@code ChatComponent} appended /\n    ChatComponent appendSibling(ChatComponent sibling);\n\n    /** Gets the unformatted text value of this {@code ChatComponent}","unformatted text value /\n    String getText();\n\n    /** Get the full unformatted text value of this {@code ChatComponent} and all siblings","full unformatted text value /\n    String getFullText();\n\n    /** Gets a {@link java.util.List} of all sibling {@code ChatComponent}s","list of siblings /\n    List<ChatComponent> getSiblings();\n\n    /** Serializes the ChatComponent as a Json String","json string /\n    String serialize();\n\n    /** Clones this {@code ChatComponent}","clone of {@code this}"]},"scope":"public","return":"io.wolfscript.api.chat.ChatComponent","name":"clone","args":[]}],"imports":["java.util.List"],"properties":[]},"io.wolfscript.api.chat.ChatFormatting":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for EnumChatFormatting","description":"Wrapper interface for EnumChatFormatting","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChatFormatting","qualifiedname":"io.wolfscript.api.chat.ChatFormatting","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.chat.ChatStyle":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for Minecraft native ChatStyle","description":"Wrapper interface for Minecraft native ChatStyle","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChatStyle","qualifiedname":"io.wolfscript.api.chat.ChatStyle","type":"interface","scope":"public","extends":["Cloneable"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.chat.ClickEvent":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for Minecraft's native ClickEvent","description":"Wrapper interface for Minecraft's native ClickEvent","doc":{"author":["Jason (darkdiplomat)"]},"name":"ClickEvent","qualifiedname":"io.wolfscript.api.chat.ClickEvent","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.chat.ClickEventAction":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for Minecraft's native ClickEvent.Action","description":"Wrapper interface for Minecraft's native ClickEvent.Action","doc":{"author":["Jason (darkdiplomat)"]},"name":"ClickEventAction","qualifiedname":"io.wolfscript.api.chat.ClickEventAction","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.chat.HoverEvent":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for Minecraft's native HoverEvent","description":"Wrapper interface for Minecraft's native HoverEvent","doc":{"author":["Jason (darkdiplomat)"]},"name":"HoverEvent","qualifiedname":"io.wolfscript.api.chat.HoverEvent","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.chat.HoverEventAction":{"namespace":"io.wolfscript.api.chat","title":"Wrapper interface for Minecraft's native HoverEvent.Action","description":"Wrapper interface for Minecraft's native HoverEvent.Action","doc":{"author":["Jason (darkdiplomat)"]},"name":"HoverEventAction","qualifiedname":"io.wolfscript.api.chat.HoverEventAction","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.entity","description":"Classes and interfaces for namespace io.wolfscript.api.entity","name":"entity","qualifiedname":"io.wolfscript.api.entity.0","packagename":"io.wolfscript.api.entity","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.EnderEye","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.Explosive","io.wolfscript.api.entity.FallingBlock","io.wolfscript.api.entity.Fireball","io.wolfscript.api.entity.FireworkRocket","io.wolfscript.api.entity.FishHook","io.wolfscript.api.entity.Projectile","io.wolfscript.api.entity.SmallFireball","io.wolfscript.api.entity.XPOrb"],"enums":["io.wolfscript.api.entity.EntityType"],"namespaces":["io.wolfscript.api.entity.effect.0","io.wolfscript.api.entity.hanging.0","io.wolfscript.api.entity.living.0","io.wolfscript.api.entity.throwable.0","io.wolfscript.api.entity.vehicle.0"],"properties":[]},"io.wolfscript.api.entity.EnderEye":{"namespace":"io.wolfscript.api.entity","title":"Ender Eye wrapper","description":"Ender Eye wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EnderEye","qualifiedname":"io.wolfscript.api.entity.EnderEye","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.position.Location"],"properties":[]},"io.wolfscript.api.entity.Entity":{"namespace":"io.wolfscript.api.entity","title":"This defines an entity in the world","description":"This defines an entity in the world Everything that is not a block inherits from Entity in a way.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","Larry1123"]},"name":"Entity","qualifiedname":"io.wolfscript.api.entity.Entity","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.BoundingBox","io.wolfscript.api.entity.living.Golem","io.wolfscript.api.inventory.Item","io.wolfscript.api.nbt.BaseTag","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.world.World","io.wolfscript.api.world.position.Location","io.wolfscript.api.world.position.Position","io.wolfscript.api.world.position.Vector3D","java.util.List","java.util.UUID"],"properties":[]},"io.wolfscript.api.entity.EntityItem":{"namespace":"io.wolfscript.api.entity","title":"EntityItem wrapper","description":"EntityItem wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityItem","qualifiedname":"io.wolfscript.api.entity.EntityItem","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.EntityType":{"namespace":"io.wolfscript.api.entity","title":"EntityType enum","description":"EntityType enum","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityType","qualifiedname":"io.wolfscript.api.entity.EntityType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Checks if the EntityType is that of a Throwable","description":"Checks if the EntityType is that of a Throwable","doc":{"return":["{@code true} if throwable; {@code false} if not /\n    public boolean isThrowable() {\n        return this == GENERIC_THROWABLE || this.isOf(GENERIC_THROWABLE);\n    }\n\n    /** Checks if the EntityType is that of a Vehicle","{@code true} if vehicle; {@code false} if not /\n    public boolean isVehicle() {\n        return this == GENERIC_VEHICLE || this.isOf(GENERIC_VEHICLE);\n    }\n\n    /** Checks if the EntityType is that of a EntityLiving","{@code true} if living; {@code false} if not /\n    public boolean isLiving() {\n        return this == GENERIC_LIVING || this.isOf(GENERIC_LIVING);\n    }\n\n    /** Checks if the EntityType is that of an Animal","{@code true} if animal; {@code false} if not /\n    public boolean isAnimal() {\n        return this == GENERIC_ANIMAL || this.isOf(GENERIC_ANIMAL);\n    }\n\n    /** Checks if the EntityType is that of a Mob","{@code true} if mob; {@code false} if not /\n    public boolean isMob() {\n        return this == GENERIC_MOB || this.isOf(GENERIC_MOB);\n    }\n\n    /** Checks if the EntityType is that of a HangingEntity","{@code true} if hanging; {@code false} if not /\n    public boolean isHanging() {\n        return this == GENERIC_HANGING || this.isOf(GENERIC_HANGING);\n    }\n\n    /** Checks if the EntityType is that of a Effect (ie: LightningBolt)","{@code true} if effect; {@code false} if not /\n    public boolean isEffect() {\n        return this == GENERIC_EFFECT || this.isOf(GENERIC_EFFECT);\n    }\n\n    /** Checks if the EntityType is of a given type","{@code true} if equal to or a subtype of; {@code false} if no relation"]},"scope":"public","return":"boolean","name":"isOf","args":[{"name":"type","type":"io.wolfscript.api.entity.EntityType","description":"the type to check for"}]}],"imports":[],"enum":[{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"49","value":"","title":"49 EntityType","description":"49 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"49","value":"","title":"49 EntityType","description":"49 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"48","value":"","title":"48 EntityType","description":"48 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"30","value":"","title":"30 EntityType","description":"30 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"10","value":"","title":"10 EntityType","description":"10 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"65","value":"","title":"65 EntityType","description":"65 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"61","value":"","title":"61 EntityType","description":"61 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"41","value":"","title":"41 EntityType","description":"41 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"59","value":"","title":"59 EntityType","description":"59 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"43","value":"","title":"43 EntityType","description":"43 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"93","value":"","title":"93 EntityType","description":"93 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"40","value":"","title":"40 EntityType","description":"40 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"92","value":"","title":"92 EntityType","description":"92 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"50","value":"","title":"50 EntityType","description":"50 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"100","value":"","title":"100 EntityType","description":"100 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"42","value":"","title":"42 EntityType","description":"42 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"200","value":"","title":"200 EntityType","description":"200 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"63","value":"","title":"63 EntityType","description":"63 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"15","value":"","title":"15 EntityType","description":"15 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"58","value":"","title":"58 EntityType","description":"58 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"67","value":"","title":"67 EntityType","description":"67 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"14","value":"","title":"14 EntityType","description":"14 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"1","value":"","title":"1 EntityType","description":"1 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"16","value":"","title":"16 EntityType","description":"16 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"21","value":"","title":"21 EntityType","description":"21 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"22","value":"","title":"22 EntityType","description":"22 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ID","value":"","title":"ID EntityType","description":"ID EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"44","value":"","title":"44 EntityType","description":"44 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"68","value":"","title":"68 EntityType","description":"68 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"56","value":"","title":"56 EntityType","description":"56 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"53","value":"","title":"53 EntityType","description":"53 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"46","value":"","title":"46 EntityType","description":"46 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"100","value":"","title":"100 EntityType","description":"100 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"99","value":"","title":"99 EntityType","description":"99 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"18","value":"","title":"18 EntityType","description":"18 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"12","value":"","title":"12 EntityType","description":"12 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"8","value":"","title":"8 EntityType","description":"8 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"0","value":"","title":"0 EntityType","description":"0 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"62","value":"","title":"62 EntityType","description":"62 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"47","value":"","title":"47 EntityType","description":"47 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"96","value":"","title":"96 EntityType","description":"96 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"100","value":"","title":"100 EntityType","description":"100 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"48","value":"","title":"48 EntityType","description":"48 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"48","value":"","title":"48 EntityType","description":"48 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"98","value":"","title":"98 EntityType","description":"98 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"9","value":"","title":"9 EntityType","description":"9 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"90","value":"","title":"90 EntityType","description":"90 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"57","value":"","title":"57 EntityType","description":"57 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"48","value":"","title":"48 EntityType","description":"48 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"16","value":"","title":"16 EntityType","description":"16 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"91","value":"","title":"91 EntityType","description":"91 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"60","value":"","title":"60 EntityType","description":"60 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"51","value":"","title":"51 EntityType","description":"51 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"100","value":"","title":"100 EntityType","description":"100 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"55","value":"","title":"55 EntityType","description":"55 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"13","value":"","title":"13 EntityType","description":"13 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"11","value":"","title":"11 EntityType","description":"11 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"97","value":"","title":"97 EntityType","description":"97 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"52","value":"","title":"52 EntityType","description":"52 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"94","value":"","title":"94 EntityType","description":"94 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"101","value":"","title":"101 EntityType","description":"101 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"45","value":"","title":"45 EntityType","description":"45 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"20","value":"","title":"20 EntityType","description":"20 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"120","value":"","title":"120 EntityType","description":"120 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"66","value":"","title":"66 EntityType","description":"66 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"64","value":"","title":"64 EntityType","description":"64 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"51","value":"","title":"51 EntityType","description":"51 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"19","value":"","title":"19 EntityType","description":"19 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"95","value":"","title":"95 EntityType","description":"95 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"17","value":"","title":"17 EntityType","description":"17 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"2","value":"","title":"2 EntityType","description":"2 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"54","value":"","title":"54 EntityType","description":"54 EntityType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"100","value":"","title":"100 EntityType","description":"100 EntityType","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[{"name":"EntityID","modifier":"readonly","args":[],"description":"EntityID property","return":"short","scope":"public","title":"EntityID property"}]},"io.wolfscript.api.entity.Explosive":{"namespace":"io.wolfscript.api.entity","title":"Interface for manipulating Explosive devices","description":"Interface for manipulating Explosive devices","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Explosive","qualifiedname":"io.wolfscript.api.entity.Explosive","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.FallingBlock":{"namespace":"io.wolfscript.api.entity","title":"Falling Block wrapper","description":"Falling Block wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"FallingBlock","qualifiedname":"io.wolfscript.api.entity.FallingBlock","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.Anvil","io.wolfscript.api.world.blocks.Block"],"properties":[]},"io.wolfscript.api.entity.Fireball":{"namespace":"io.wolfscript.api.entity","title":"Fireball Wrapper interface","description":"Fireball Wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"Fireball","qualifiedname":"io.wolfscript.api.entity.Fireball","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.LivingBase"],"properties":[]},"io.wolfscript.api.entity.FireworkRocket":{"namespace":"io.wolfscript.api.entity","title":"FireworkRocket wrapper","description":"FireworkRocket wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"FireworkRocket","qualifiedname":"io.wolfscript.api.entity.FireworkRocket","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.FishHook":{"namespace":"io.wolfscript.api.entity","title":"Fish Hook wrapper","description":"Fish Hook wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"FishHook","qualifiedname":"io.wolfscript.api.entity.FishHook","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.Projectile":{"namespace":"io.wolfscript.api.entity","title":"Projectile wrapper","description":"Projectile wrapper","doc":{"author":["Larry (Larry1123)"]},"name":"Projectile","qualifiedname":"io.wolfscript.api.entity.Projectile","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.SmallFireball":{"namespace":"io.wolfscript.api.entity","title":"Small Fireball Wrapper (FireCharge)","description":"Small Fireball Wrapper (FireCharge)","doc":{"author":["Jason (darkdiplomat)"]},"name":"SmallFireball","qualifiedname":"io.wolfscript.api.entity.SmallFireball","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Fireball"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.XPOrb":{"namespace":"io.wolfscript.api.entity","title":"XPOrb wrapper","description":"XPOrb wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"XPOrb","qualifiedname":"io.wolfscript.api.entity.XPOrb","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.api.entity.effect.0":{"namespace":"io.wolfscript.api.entity","title":"Classes and interfaces for namespace io.wolfscript.api.entity.effect","description":"Classes and interfaces for namespace io.wolfscript.api.entity.effect","name":"effect","qualifiedname":"io.wolfscript.api.entity.effect.0","packagename":"io.wolfscript.api.entity.effect","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.effect.LightningBolt","io.wolfscript.api.entity.effect.WeatherEffect"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.effect.LightningBolt":{"namespace":"io.wolfscript.api.entity.effect","title":"LightningBolt wrapper interface","description":"LightningBolt wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"LightningBolt","qualifiedname":"io.wolfscript.api.entity.effect.LightningBolt","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.effect.WeatherEffect"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.effect.WeatherEffect":{"namespace":"io.wolfscript.api.entity.effect","title":"Weather Effect Wrapper Interface","description":"Weather Effect Wrapper Interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"WeatherEffect","qualifiedname":"io.wolfscript.api.entity.effect.WeatherEffect","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.entity.hanging.0":{"namespace":"io.wolfscript.api.entity","title":"Classes and interfaces for namespace io.wolfscript.api.entity.hanging","description":"Classes and interfaces for namespace io.wolfscript.api.entity.hanging","name":"hanging","qualifiedname":"io.wolfscript.api.entity.hanging.0","packagename":"io.wolfscript.api.entity.hanging","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.hanging.HangingEntity","io.wolfscript.api.entity.hanging.ItemFrame","io.wolfscript.api.entity.hanging.LeashKnot","io.wolfscript.api.entity.hanging.Painting"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.hanging.HangingEntity":{"namespace":"io.wolfscript.api.entity.hanging","title":"HangingEntity wrapper","description":"HangingEntity wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"HangingEntity","qualifiedname":"io.wolfscript.api.entity.hanging.HangingEntity","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.entity.hanging.ItemFrame":{"namespace":"io.wolfscript.api.entity.hanging","title":"Wraps an ItemFrame","description":"Wraps an ItemFrame","doc":{"author":["Jason (darkdiplomat)"]},"name":"ItemFrame","qualifiedname":"io.wolfscript.api.entity.hanging.ItemFrame","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.hanging.HangingEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.hanging.LeashKnot":{"namespace":"io.wolfscript.api.entity.hanging","title":"LeashKnot wrapper interface","description":"LeashKnot wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"LeashKnot","qualifiedname":"io.wolfscript.api.entity.hanging.LeashKnot","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.hanging.HangingEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.hanging.Painting":{"namespace":"io.wolfscript.api.entity.hanging","title":"Painting warpper","description":"Painting warpper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Painting","qualifiedname":"io.wolfscript.api.entity.hanging.Painting","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.hanging.HangingEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.0":{"namespace":"io.wolfscript.api.entity","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living","name":"living","qualifiedname":"io.wolfscript.api.entity.living.0","packagename":"io.wolfscript.api.entity.living","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.living.Ageable","io.wolfscript.api.entity.living.AmbientCreature","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.living.Golem","io.wolfscript.api.entity.living.IronGolem","io.wolfscript.api.entity.living.LivingBase"],"enums":[],"namespaces":["io.wolfscript.api.entity.living.animal.0","io.wolfscript.api.entity.living.humanoid.0","io.wolfscript.api.entity.living.monster.0"],"properties":[]},"io.wolfscript.api.entity.living.Ageable":{"namespace":"io.wolfscript.api.entity.living","title":"Ageable wrapper","description":"Ageable wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Ageable","qualifiedname":"io.wolfscript.api.entity.living.Ageable","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.AmbientCreature":{"namespace":"io.wolfscript.api.entity.living","title":"Interface for ambient creatures.","description":"Interface for ambient creatures.","doc":{"author":["Larry1123"]},"name":"AmbientCreature","qualifiedname":"io.wolfscript.api.entity.living.AmbientCreature","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.EntityLiving":{"namespace":"io.wolfscript.api.entity.living","title":"An entity living defines any entities that own health, such as animals and mobs.","description":"An entity living defines any entities that own health, such as animals and mobs. Every entity with health inherits from this.","doc":{"author":["Chris (damagefilter)"]},"name":"EntityLiving","qualifiedname":"io.wolfscript.api.entity.living.EntityLiving","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.LivingBase"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.PathFinder","io.wolfscript.api.ai.AIManager","io.wolfscript.api.entity.EntityType","io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.living.Golem":{"namespace":"io.wolfscript.api.entity.living","title":"Golem wrapper","description":"Golem wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Golem","qualifiedname":"io.wolfscript.api.entity.living.Golem","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.EntityLiving"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.IronGolem":{"namespace":"io.wolfscript.api.entity.living","title":"IronGolem wrapper interface","description":"IronGolem wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"IronGolem","qualifiedname":"io.wolfscript.api.entity.living.IronGolem","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.Golem"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.Village"],"properties":[]},"io.wolfscript.api.entity.living.LivingBase":{"namespace":"io.wolfscript.api.entity.living","title":"EntityLivingBase wrapper interface","description":"EntityLivingBase wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"LivingBase","qualifiedname":"io.wolfscript.api.entity.living.LivingBase","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.DamageType","io.wolfscript.api.attributes.AttributeMap","io.wolfscript.api.entity.Entity","io.wolfscript.api.potion.Potion","io.wolfscript.api.potion.PotionEffect","io.wolfscript.api.potion.PotionEffectType","io.wolfscript.api.world.position.Location","java.util.List"],"properties":[]},"io.wolfscript.api.entity.living.animal.0":{"namespace":"io.wolfscript.api.entity.living","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living.animal","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living.animal","name":"animal","qualifiedname":"io.wolfscript.api.entity.living.animal.0","packagename":"io.wolfscript.api.entity.living.animal","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.living.animal.Bat","io.wolfscript.api.entity.living.animal.EntityAnimal","io.wolfscript.api.entity.living.animal.Mooshroom","io.wolfscript.api.entity.living.animal.Rabbit","io.wolfscript.api.entity.living.animal.Squid","io.wolfscript.api.entity.living.animal.Tameable"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.living.animal.Bat":{"namespace":"io.wolfscript.api.entity.living.animal","title":"Bat wrapper","description":"Bat wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Bat","qualifiedname":"io.wolfscript.api.entity.living.animal.Bat","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.animal.EntityAnimal"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.animal.EntityAnimal":{"namespace":"io.wolfscript.api.entity.living.animal","title":"EntityAnimal wrapper","description":"EntityAnimal wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityAnimal","qualifiedname":"io.wolfscript.api.entity.living.animal.EntityAnimal","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.EntityLiving"],"constructors":[],"methods":[{"title":"Checks if the {@link io.wolfscript.api.inventory.Item} is the item the initiates breeding","description":"Checks if the {@link io.wolfscript.api.inventory.Item} is the item the initiates breeding","doc":{"return":["{@code true} if breeding item; {@code false} if not"]},"scope":"public","return":"boolean","name":"isBreedingItem","args":[{"name":"item","type":"io.wolfscript.api.inventory.Item","description":"the {@link io.wolfscript.api.inventory.Item} to check"}]}],"imports":["io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.living.animal.Mooshroom":{"namespace":"io.wolfscript.api.entity.living.animal","title":"Mooshroom wrapper","description":"Mooshroom wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Mooshroom","qualifiedname":"io.wolfscript.api.entity.living.animal.Mooshroom","type":"interface","scope":"public","extends":["Cow"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.animal.Rabbit":{"namespace":"io.wolfscript.api.entity.living.animal","title":"Rabbit wrapper","description":"Rabbit wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Rabbit","qualifiedname":"io.wolfscript.api.entity.living.animal.Rabbit","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.animal.EntityAnimal"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.animal.Squid":{"namespace":"io.wolfscript.api.entity.living.animal","title":"Squid wrapper","description":"Squid wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Squid","qualifiedname":"io.wolfscript.api.entity.living.animal.Squid","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.animal.EntityAnimal"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.animal.Tameable":{"namespace":"io.wolfscript.api.entity.living.animal","title":"Tameable wrapper","description":"Tameable wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Tameable","qualifiedname":"io.wolfscript.api.entity.living.animal.Tameable","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.animal.EntityAnimal"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.LivingBase"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.0":{"namespace":"io.wolfscript.api.entity.living","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid","name":"humanoid","qualifiedname":"io.wolfscript.api.entity.living.humanoid.0","packagename":"io.wolfscript.api.entity.living.humanoid","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.living.humanoid.Human","io.wolfscript.api.entity.living.humanoid.HumanCapabilities","io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter"],"enums":[],"namespaces":["io.wolfscript.api.entity.living.humanoid.npc.0"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.Human":{"namespace":"io.wolfscript.api.entity.living.humanoid","title":"Human interface","description":"Human interface Shared methods between Players and NPCs","doc":{"author":["Jason (darkdiplomat)"]},"name":"Human","qualifiedname":"io.wolfscript.api.entity.living.humanoid.Human","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.LivingBase"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.PlayerInventory"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.HumanCapabilities":{"namespace":"io.wolfscript.api.entity.living.humanoid","title":"HumanCapabilities wrapper interface","description":"HumanCapabilities wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"HumanCapabilities","qualifiedname":"io.wolfscript.api.entity.living.humanoid.HumanCapabilities","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter":{"namespace":"io.wolfscript.api.entity.living.humanoid","title":"Non-Playable Character interface","description":"Non-Playable Character interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"NonPlayableCharacter","qualifiedname":"io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.humanoid.Human"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.PathFinder","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener","java.util.List"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.0":{"namespace":"io.wolfscript.api.entity.living.humanoid","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid.npc","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid.npc","name":"npc","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.0","packagename":"io.wolfscript.api.entity.living.humanoid.npc","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.entity.living.humanoid.npc.NPCAIExcutionException","io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorRegistry","io.wolfscript.api.entity.living.humanoid.npc.NpcAiListenerMethodConsistancyException"],"interfaces":["io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener"],"enums":[],"namespaces":["io.wolfscript.api.entity.living.humanoid.npc.ai.0"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.NPCAIExcutionException":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc","title":"NPC AI Excution Exception","description":"NPC AI Excution Exception Thrown if an exception occurs while executing a NPC AI Event","doc":{"author":["Jason (darkdiplomat)"]},"name":"NPCAIExcutionException","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.NPCAIExcutionException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"{@inheritDoc}","description":"{@inheritDoc} /\n    public NPCAIExcutionException(String message) {\n        super(message);\n    }\n\n    /** {@inheritDoc}","doc":{},"scope":"public","name":"NPCAIExcutionException","args":[{"name":"msg","type":"String","description":"msg argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc","title":"A newer and updated NPC Behavior listening","description":"A newer and updated NPC Behavior listening","doc":{"author":["Jason (darkdiplomat)"]},"name":"NPCBehaviorListener","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorRegistry":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc","title":"class NPCBehaviorRegistry","description":"class NPCBehaviorRegistry","doc":{"author":["Jason (darkdiplomat)"]},"name":"NPCBehaviorRegistry","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorRegistry","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"Registers a new {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener}","description":"Registers a new {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener}","doc":{"return":["The {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener}  or null if one of that type is not registered to the given {@link io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter} /\n    public static NPCBehaviorListener getRegisteredListener(Class<? extends NPCBehaviorListener> clazz, NonPlayableCharacter npc) {\n        NPCBehaviorListener listener = null;\n        synchronized (registered) {\n            Iterator<NPCBehaviorRegisteredListener> itr = registered.values().iterator();\n            while (itr.hasNext()) {\n                NPCBehaviorRegisteredListener nbrl = itr.next();\n                if (nbrl.isFor(npc) && clazz.equals(nbrl.getListener().getClass())) {\n                    listener = nbrl.getListener();\n                    break;\n                }\n            }\n        }\n        return listener;\n    }\n\n    /** Gets a list of all the Registered {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener} for manipulation.","The list of {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener} registered to the given {@link io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter} /\n    public static List<NPCBehaviorListener> getRegisteredListeners(NonPlayableCharacter npc) {\n        List<NPCBehaviorListener> listeners = new ArrayList<NPCBehaviorListener>();\n        synchronized (registered) {\n            Iterator<NPCBehaviorRegisteredListener> itr = registered.values().iterator();\n            while (itr.hasNext()) {\n                NPCBehaviorRegisteredListener nbrl = itr.next();\n                if (nbrl.isFor(npc)) {\n                    listeners.add(nbrl.getListener());\n                }\n            }\n        }\n        return listeners;\n    }\n\n    /** Parses a NPC AI Event to the {@link io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorListener}s"]},"scope":"public","describe":"static","return":"void","name":"execute","args":[{"name":"npc","type":"io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","description":"the {@link io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter} associated with the listener"},{"name":"npcai","type":"io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI","description":"the AI event called"}]}],"imports":["com.google.common.collect.ArrayListMultimap","io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI","java.lang.reflect.Method","java.util.ArrayList","java.util.Iterator","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.NpcAiListenerMethodConsistancyException":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc","title":"class NpcAiListenerMethodConsistancyException","description":"class NpcAiListenerMethodConsistancyException","doc":{"author":["Jason (darkdiplomat)"]},"name":"NpcAiListenerMethodConsistancyException","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.NpcAiListenerMethodConsistancyException","type":"class","scope":"public","describe":"final","extends":["RuntimeException"],"constructors":[{"title":"{@inheritDoc}","description":"{@inheritDoc} /\n    public NpcAiListenerMethodConsistancyException(String message) {\n        super(message);\n    }\n\n    /** {@inheritDoc}","doc":{},"scope":"public","name":"NpcAiListenerMethodConsistancyException","args":[{"name":"msg","type":"String","description":"msg argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.0":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid.npc.ai","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living.humanoid.npc.ai","name":"ai","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.0","packagename":"io.wolfscript.api.entity.living.humanoid.npc.ai","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.entity.living.humanoid.npc.ai.Attacked","io.wolfscript.api.entity.living.humanoid.npc.ai.Clicked","io.wolfscript.api.entity.living.humanoid.npc.ai.Destroyed","io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI","io.wolfscript.api.entity.living.humanoid.npc.ai.PickupItem","io.wolfscript.api.entity.living.humanoid.npc.ai.Update"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.Attacked":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"AI Container for Attacked NPC","description":"AI Container for Attacked NPC","doc":{"author":["Jason (darkdiplomat)"]},"name":"Attacked","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.Attacked","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI"],"constructors":[],"fields":[{"title":"attacker field","description":"attacker field","name":"attacker","scope":"public","type":"io.wolfscript.api.entity.Entity","describe":"final"}],"methods":[{"title":"Constructs a new Attacked AI Container","description":"Constructs a new Attacked AI Container","doc":{"param":["attacker the {@link io.wolfscript.api.entity.Entity} attacking the NPC /\n    public Attacked(Entity attacker) {\n        this.attacker = attacker;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.Entity} attacker"],"return":["attacker /\n    public final Entity getAttacker() {\n        return attacker;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.Clicked":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"AI container for Clicked NPC","description":"AI container for Clicked NPC","doc":{"author":["Jason (darkdiplomat)"]},"name":"Clicked","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.Clicked","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI"],"constructors":[],"methods":[{"title":"Constructs a new Clicked AI Container","description":"Constructs a new Clicked AI Container","doc":{"param":["clicker /\n    public Clicked(Player clicker) {\n        this.clicker = clicker;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} that has clicked the NPC"],"return":["clicker /\n    public final Player getClicker() {\n        return this.clicker;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.Destroyed":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"AI Container for Destroyed NPC","description":"AI Container for Destroyed NPC","doc":{"author":["Jason (darkdiplomat)"]},"name":"Destroyed","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.Destroyed","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI"],"constructors":[],"methods":[{"title":"{@inheritDoc}","description":"{@inheritDoc}","doc":{},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"Abstract container for the NPC AI system","description":"Abstract container for the NPC AI system","doc":{"author":["Jason (darkdiplomat)"]},"name":"NPCAI","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[{"title":"Gets the name of the NPC AI class","description":"Gets the name of the NPC AI class","doc":{"return":["NPCAI subclass name /\n    public final String getName() {\n        return \"NPCAI.\" + this.getClass().getSimpleName();\n    }\n\n    /** Short cut to calling this AI event"]},"scope":"public","describe":"final","return":"void","name":"call","args":[{"name":"npc","type":"io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","description":"the NPC the event is taking place for"}]}],"imports":["io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","io.wolfscript.api.entity.living.humanoid.npc.NPCBehaviorRegistry"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.PickupItem":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"AI Container for NPC item pickup","description":"AI Container for NPC item pickup","doc":{"author":["Jason (darkdiplomat)"]},"name":"PickupItem","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.PickupItem","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI"],"constructors":[],"methods":[{"title":"Constructs a new PickupItem AI Container","description":"Constructs a new PickupItem AI Container","doc":{"param":["pickedUp the {@link io.wolfscript.api.inventory.Item} being picked up /\n    public PickupItem(Item pickedUp) {\n        this.pickedUp = pickedUp;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} being picked up"],"return":["picked up item /\n    public final Item getItemPickedUp() {\n        return pickedUp;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.entity.living.humanoid.npc.ai.Update":{"namespace":"io.wolfscript.api.entity.living.humanoid.npc.ai","title":"AI Container for NPC Updates","description":"AI Container for NPC Updates","doc":{"author":["Jason (darkdiplomat)"]},"name":"Update","qualifiedname":"io.wolfscript.api.entity.living.humanoid.npc.ai.Update","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.entity.living.humanoid.npc.ai.NPCAI"],"constructors":[],"methods":[{"title":"{@inheritDoc}","description":"{@inheritDoc}","doc":{},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.0":{"namespace":"io.wolfscript.api.entity.living","title":"Classes and interfaces for namespace io.wolfscript.api.entity.living.monster","description":"Classes and interfaces for namespace io.wolfscript.api.entity.living.monster","name":"monster","qualifiedname":"io.wolfscript.api.entity.living.monster.0","packagename":"io.wolfscript.api.entity.living.monster","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.living.monster.Blaze","io.wolfscript.api.entity.living.monster.CaveSpider","io.wolfscript.api.entity.living.monster.EnderDragon","io.wolfscript.api.entity.living.monster.Enderman","io.wolfscript.api.entity.living.monster.Endermite","io.wolfscript.api.entity.living.monster.EntityMob","io.wolfscript.api.entity.living.monster.Ghast","io.wolfscript.api.entity.living.monster.GiantZombie","io.wolfscript.api.entity.living.monster.Guardian","io.wolfscript.api.entity.living.monster.MagmaCube","io.wolfscript.api.entity.living.monster.PigZombie","io.wolfscript.api.entity.living.monster.RangedAttackMob","io.wolfscript.api.entity.living.monster.Silverfish","io.wolfscript.api.entity.living.monster.Slime","io.wolfscript.api.entity.living.monster.Spider","io.wolfscript.api.entity.living.monster.Zombie"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Blaze":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Blaze wrapper","description":"Blaze wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Blaze","qualifiedname":"io.wolfscript.api.entity.living.monster.Blaze","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.CaveSpider":{"namespace":"io.wolfscript.api.entity.living.monster","title":"CaveSpider Wrapper","description":"CaveSpider Wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"CaveSpider","qualifiedname":"io.wolfscript.api.entity.living.monster.CaveSpider","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.Spider"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.EnderDragon":{"namespace":"io.wolfscript.api.entity.living.monster","title":"EnderDragon wrapper","description":"EnderDragon wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EnderDragon","qualifiedname":"io.wolfscript.api.entity.living.monster.EnderDragon","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.EnderCrystal"],"properties":[]},"io.wolfscript.api.entity.living.monster.Enderman":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Enderman Wrapper","description":"Enderman Wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Enderman","qualifiedname":"io.wolfscript.api.entity.living.monster.Enderman","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.blocks.Block"],"properties":[]},"io.wolfscript.api.entity.living.monster.Endermite":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Endermite wrapper","description":"Endermite wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Endermite","qualifiedname":"io.wolfscript.api.entity.living.monster.Endermite","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.EntityMob":{"namespace":"io.wolfscript.api.entity.living.monster","title":"A Mob base-entity that all mobs inherit from.","description":"A Mob base-entity that all mobs inherit from. Declares some methods useful for mobs","doc":{"author":["Chris Ksoll"]},"name":"EntityMob","qualifiedname":"io.wolfscript.api.entity.living.monster.EntityMob","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.EntityLiving"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.EntityLiving"],"properties":[]},"io.wolfscript.api.entity.living.monster.Ghast":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Ghast wrapper interface","description":"Ghast wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"Ghast","qualifiedname":"io.wolfscript.api.entity.living.monster.Ghast","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.GiantZombie":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Giant Zombie wrapper","description":"Giant Zombie wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"GiantZombie","qualifiedname":"io.wolfscript.api.entity.living.monster.GiantZombie","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Guardian":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Guardian wrapper","description":"Guardian wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Guardian","qualifiedname":"io.wolfscript.api.entity.living.monster.Guardian","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.MagmaCube":{"namespace":"io.wolfscript.api.entity.living.monster","title":"LavaSlime wrapper","description":"LavaSlime wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"MagmaCube","qualifiedname":"io.wolfscript.api.entity.living.monster.MagmaCube","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.Slime"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.PigZombie":{"namespace":"io.wolfscript.api.entity.living.monster","title":"PigZombie wrapper","description":"PigZombie wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"PigZombie","qualifiedname":"io.wolfscript.api.entity.living.monster.PigZombie","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.Zombie"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.api.entity.living.monster.RangedAttackMob":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Interface for distinguishing which mobs have ranged attack abilities.","description":"Interface for distinguishing which mobs have ranged attack abilities.","doc":{"author":["Aaron"]},"name":"RangedAttackMob","qualifiedname":"io.wolfscript.api.entity.living.monster.RangedAttackMob","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Silverfish":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Silverfish wrapper","description":"Silverfish wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Silverfish","qualifiedname":"io.wolfscript.api.entity.living.monster.Silverfish","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Slime":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Slime wrapper","description":"Slime wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Slime","qualifiedname":"io.wolfscript.api.entity.living.monster.Slime","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Spider":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Spider wrapper","description":"Spider wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Spider","qualifiedname":"io.wolfscript.api.entity.living.monster.Spider","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.living.monster.Zombie":{"namespace":"io.wolfscript.api.entity.living.monster","title":"Zombie wrapper","description":"Zombie wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Zombie","qualifiedname":"io.wolfscript.api.entity.living.monster.Zombie","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.living.monster.EntityMob"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Villager"],"properties":[]},"io.wolfscript.api.entity.throwable.0":{"namespace":"io.wolfscript.api.entity","title":"Classes and interfaces for namespace io.wolfscript.api.entity.throwable","description":"Classes and interfaces for namespace io.wolfscript.api.entity.throwable","name":"throwable","qualifiedname":"io.wolfscript.api.entity.throwable.0","packagename":"io.wolfscript.api.entity.throwable","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.throwable.ChickenEgg","io.wolfscript.api.entity.throwable.EnderPearl","io.wolfscript.api.entity.throwable.EntityPotion","io.wolfscript.api.entity.throwable.Snowball","io.wolfscript.api.entity.throwable.XPBottle"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.throwable.ChickenEgg":{"namespace":"io.wolfscript.api.entity.throwable","title":"Chicken Egg wrapper","description":"Chicken Egg wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChickenEgg","qualifiedname":"io.wolfscript.api.entity.throwable.ChickenEgg","type":"interface","scope":"public","extends":["EntityThrowable"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.throwable.EnderPearl":{"namespace":"io.wolfscript.api.entity.throwable","title":"EnderPerl wrapper","description":"EnderPerl wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EnderPearl","qualifiedname":"io.wolfscript.api.entity.throwable.EnderPearl","type":"interface","scope":"public","extends":["EntityThrowable"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.throwable.EntityPotion":{"namespace":"io.wolfscript.api.entity.throwable","title":"EntityPotion wrapper","description":"EntityPotion wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityPotion","qualifiedname":"io.wolfscript.api.entity.throwable.EntityPotion","type":"interface","scope":"public","extends":["EntityThrowable"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.potion.PotionType"],"properties":[]},"io.wolfscript.api.entity.throwable.Snowball":{"namespace":"io.wolfscript.api.entity.throwable","title":"Snowball wrapper","description":"Snowball wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Snowball","qualifiedname":"io.wolfscript.api.entity.throwable.Snowball","type":"interface","scope":"public","extends":["EntityThrowable"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.throwable.XPBottle":{"namespace":"io.wolfscript.api.entity.throwable","title":"XPBottle wrapper","description":"XPBottle wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"XPBottle","qualifiedname":"io.wolfscript.api.entity.throwable.XPBottle","type":"interface","scope":"public","extends":["EntityThrowable"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.0":{"namespace":"io.wolfscript.api.entity","title":"Classes and interfaces for namespace io.wolfscript.api.entity.vehicle","description":"Classes and interfaces for namespace io.wolfscript.api.entity.vehicle","name":"vehicle","qualifiedname":"io.wolfscript.api.entity.vehicle.0","packagename":"io.wolfscript.api.entity.vehicle","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.entity.vehicle.Boat","io.wolfscript.api.entity.vehicle.ChestMinecart","io.wolfscript.api.entity.vehicle.EmptyMinecart","io.wolfscript.api.entity.vehicle.FurnaceMinecart","io.wolfscript.api.entity.vehicle.Minecart","io.wolfscript.api.entity.vehicle.MobSpawnerMinecart","io.wolfscript.api.entity.vehicle.Vehicle"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.entity.vehicle.Boat":{"namespace":"io.wolfscript.api.entity.vehicle","title":"Boat Wrapper","description":"Boat Wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"Boat","qualifiedname":"io.wolfscript.api.entity.vehicle.Boat","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.vehicle.Vehicle"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.ChestMinecart":{"namespace":"io.wolfscript.api.entity.vehicle","title":"ChestMinecraft wrapper","description":"ChestMinecraft wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChestMinecart","qualifiedname":"io.wolfscript.api.entity.vehicle.ChestMinecart","type":"interface","scope":"public","extends":["ContainerMinecart"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.EmptyMinecart":{"namespace":"io.wolfscript.api.entity.vehicle","title":"EmptyMinecart (Ridable) wrapper","description":"EmptyMinecart (Ridable) wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EmptyMinecart","qualifiedname":"io.wolfscript.api.entity.vehicle.EmptyMinecart","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.vehicle.Minecart"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.FurnaceMinecart":{"namespace":"io.wolfscript.api.entity.vehicle","title":"FurnaceMinecart wrapper","description":"FurnaceMinecart wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"FurnaceMinecart","qualifiedname":"io.wolfscript.api.entity.vehicle.FurnaceMinecart","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.vehicle.Minecart"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.Minecart":{"namespace":"io.wolfscript.api.entity.vehicle","title":"Minecart wrapper","description":"Minecart wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Minecart","qualifiedname":"io.wolfscript.api.entity.vehicle.Minecart","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.vehicle.Vehicle"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.entity.vehicle.MobSpawnerMinecart":{"namespace":"io.wolfscript.api.entity.vehicle","title":"MobSpawnerMinecart wrapper","description":"MobSpawnerMinecart wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"MobSpawnerMinecart","qualifiedname":"io.wolfscript.api.entity.vehicle.MobSpawnerMinecart","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.vehicle.Minecart"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.MobSpawnerLogic"],"properties":[]},"io.wolfscript.api.entity.vehicle.Vehicle":{"namespace":"io.wolfscript.api.entity.vehicle","title":"Vehicle wrapper","description":"Vehicle wrapper","doc":{"author":["Chris (damagefilter)"]},"name":"Vehicle","qualifiedname":"io.wolfscript.api.entity.vehicle.Vehicle","type":"interface","scope":"public","extends":["io.wolfscript.api.entity.Entity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.factory.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.factory","description":"Classes and interfaces for namespace io.wolfscript.api.factory","name":"factory","qualifiedname":"io.wolfscript.api.factory.0","packagename":"io.wolfscript.api.factory","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.factory.AIFactory","io.wolfscript.api.factory.AttributeFactory","io.wolfscript.api.factory.ChatComponentFactory","io.wolfscript.api.factory.EntityFactory","io.wolfscript.api.factory.Factory","io.wolfscript.api.factory.ItemFactory","io.wolfscript.api.factory.NBTFactory","io.wolfscript.api.factory.ObjectFactory","io.wolfscript.api.factory.PacketFactory","io.wolfscript.api.factory.PotionFactory","io.wolfscript.api.factory.StatisticsFactory"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.factory.AIFactory":{"namespace":"io.wolfscript.api.factory","title":"AI Factory","description":"AI Factory","doc":{"author":["Aaron"]},"name":"AIFactory","qualifiedname":"io.wolfscript.api.factory.AIFactory","type":"interface","scope":"public","constructors":[],"methods":[{"title":"newAIOcelotAttack method","description":"newAIOcelotAttack method","scope":"public","return":"AIOcelotAttack","name":"newAIOcelotAttack","args":[]}],"imports":["com.google.common.base.Predicate","io.wolfscript.api.ai.AIArrowAttack","io.wolfscript.api.ai.AIAttackOnCollide","io.wolfscript.api.ai.AIAvoidEntity","io.wolfscript.api.ai.AIBeg","io.wolfscript.api.ai.AIBreakDoor","io.wolfscript.api.ai.AIControlledByPlayer","io.wolfscript.api.ai.AICreeperSwell","io.wolfscript.api.ai.AIDefendVillage","io.wolfscript.api.ai.AIEatGrass","io.wolfscript.api.ai.AIFindEntityNearest","io.wolfscript.api.ai.AIFindEntityNearestPlayer","io.wolfscript.api.ai.AIFleeSun","io.wolfscript.api.ai.AIFollowGolem","io.wolfscript.api.ai.AIFollowOwner","io.wolfscript.api.ai.AIFollowParent","io.wolfscript.api.ai.AIHarvestFarmland","io.wolfscript.api.ai.AIHurtByTarget","io.wolfscript.api.ai.AILeapAtTarget","io.wolfscript.api.ai.AILookAtTradePlayer","io.wolfscript.api.ai.AILookAtVillager","io.wolfscript.api.ai.AILookIdle","io.wolfscript.api.ai.AIMate","io.wolfscript.api.ai.AIMoveIndoors","io.wolfscript.api.ai.AIMoveThroughVillage","io.wolfscript.api.ai.AIMoveTowardsRestriction","io.wolfscript.api.ai.AIMoveTowardsTarget","io.wolfscript.api.ai.AINearestAttackableTarget","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.living.IronGolem","io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.entity.living.animal.EntityAnimal","io.wolfscript.api.entity.living.animal.Tameable","io.wolfscript.api.entity.living.animal.Wolf","io.wolfscript.api.entity.living.humanoid.Villager","io.wolfscript.api.entity.living.monster.Creeper","io.wolfscript.api.entity.living.monster.EntityMob","io.wolfscript.api.entity.living.monster.RangedAttackMob"],"properties":[]},"io.wolfscript.api.factory.AttributeFactory":{"namespace":"io.wolfscript.api.factory","title":"interface AttributeFactory","description":"interface AttributeFactory","doc":{"author":["Jason (darkdiplomat)"]},"name":"AttributeFactory","qualifiedname":"io.wolfscript.api.factory.AttributeFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","io.wolfscript.api.attributes.Attribute"],"properties":[]},"io.wolfscript.api.factory.ChatComponentFactory":{"namespace":"io.wolfscript.api.factory","title":"Interface to creating the ChatComponent components","description":"Interface to creating the ChatComponent components","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChatComponentFactory","qualifiedname":"io.wolfscript.api.factory.ChatComponentFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.chat.ChatFormatting","io.wolfscript.api.chat.ClickEvent","io.wolfscript.api.chat.ClickEventAction","io.wolfscript.api.chat.HoverEvent","io.wolfscript.api.chat.HoverEventAction"],"properties":[]},"io.wolfscript.api.factory.EntityFactory":{"namespace":"io.wolfscript.api.factory","title":"Entity Manufacturing Factory","description":"Entity Manufacturing Factory<br> NOTE: Entities created are not spawned.","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityFactory","qualifiedname":"io.wolfscript.api.factory.EntityFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.EntityType","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.living.animal.EntityAnimal","io.wolfscript.api.entity.living.humanoid.NonPlayableCharacter","io.wolfscript.api.entity.living.monster.EntityMob","io.wolfscript.api.entity.throwable.EntityThrowable","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.api.world.World","io.wolfscript.api.world.position.Location"],"properties":[]},"io.wolfscript.api.factory.Factory":{"namespace":"io.wolfscript.api.factory","title":"Factory interface","description":"Factory interface<br> For creation of Entities, Items, etc...","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]},"name":"Factory","qualifiedname":"io.wolfscript.api.factory.Factory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.factory.ItemFactory":{"namespace":"io.wolfscript.api.factory","title":"Item Manufacturing Factory","description":"Item Manufacturing Factory","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]},"name":"ItemFactory","qualifiedname":"io.wolfscript.api.factory.ItemFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Enchantment","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType","io.wolfscript.api.inventory.MapData"],"properties":[]},"io.wolfscript.api.factory.NBTFactory":{"namespace":"io.wolfscript.api.factory","title":"NamedBinaryTag Manufacturing Factory","description":"NamedBinaryTag Manufacturing Factory","doc":{"author":["Jason (darkdiplomat)"]},"name":"NBTFactory","qualifiedname":"io.wolfscript.api.factory.NBTFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.nbt.BaseTag","io.wolfscript.api.nbt.ByteArrayTag","io.wolfscript.api.nbt.ByteTag","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.DoubleTag","io.wolfscript.api.nbt.FloatTag","io.wolfscript.api.nbt.IntArrayTag","io.wolfscript.api.nbt.IntTag","io.wolfscript.api.nbt.ListTag","io.wolfscript.api.nbt.LongTag","io.wolfscript.api.nbt.NBTTagType","io.wolfscript.api.nbt.ShortTag","io.wolfscript.api.nbt.StringTag"],"properties":[]},"io.wolfscript.api.factory.ObjectFactory":{"namespace":"io.wolfscript.api.factory","title":"Object Manufacturing Factory","description":"Object Manufacturing Factory <p/> For the odds and ends that don't fit else where","doc":{"author":["Jason (darkdiplomat)"]},"name":"ObjectFactory","qualifiedname":"io.wolfscript.api.factory.ObjectFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.MobSpawnerEntry","io.wolfscript.api.VillagerTrade","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Villager","io.wolfscript.api.inventory.CustomStorageInventory","io.wolfscript.api.inventory.Item","io.wolfscript.api.world.Chunk","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.blocks.properties.BlockProperty"],"properties":[]},"io.wolfscript.api.factory.PacketFactory":{"namespace":"io.wolfscript.api.factory","title":"Packet manufacturing Factory","description":"Packet manufacturing Factory <p/> See <a href=\"http://wiki.vg/Protocol\">wiki.vg/Protocol</a> for information about Packets <p/> Some implemented packets may not function as intended or at all.","doc":{"author":["Jason (darkdiplomat)"]},"name":"PacketFactory","qualifiedname":"io.wolfscript.api.factory.PacketFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.DataWatcher","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.XPOrb","io.wolfscript.api.entity.hanging.Painting","io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.entity.living.humanoid.Human","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.packet.InvalidPacketConstructionException","io.wolfscript.api.packet.Packet","io.wolfscript.api.potion.PotionEffect","io.wolfscript.api.statistics.Stat","io.wolfscript.api.world.Chunk","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.position.Position","io.wolfscript.api.world.position.Vector3D","java.util.List","java.util.Map"],"properties":[]},"io.wolfscript.api.factory.PotionFactory":{"namespace":"io.wolfscript.api.factory","title":"PotionEffect Manufacturing Factory","description":"PotionEffect Manufacturing Factory","doc":{"author":["Jason (darkdiplomat)"]},"name":"PotionFactory","qualifiedname":"io.wolfscript.api.factory.PotionFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.potion.PotionEffect","io.wolfscript.api.potion.PotionEffectType"],"properties":[]},"io.wolfscript.api.factory.StatisticsFactory":{"namespace":"io.wolfscript.api.factory","title":"Statitics Factory","description":"Statitics Factory","doc":{"author":["Jason (darkdiplomat)"]},"name":"StatisticsFactory","qualifiedname":"io.wolfscript.api.factory.StatisticsFactory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.statistics.Achievement","io.wolfscript.api.statistics.Stat"],"properties":[]},"io.wolfscript.api.gui.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.gui","description":"Classes and interfaces for namespace io.wolfscript.api.gui","name":"gui","qualifiedname":"io.wolfscript.api.gui.0","packagename":"io.wolfscript.api.gui","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.gui.GUIControl"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.gui.GUIControl":{"namespace":"io.wolfscript.api.gui","title":"GUI Control intereface","description":"GUI Control intereface","doc":{"author":["Larry (Larry1123)"]},"name":"GUIControl","qualifiedname":"io.wolfscript.api.gui.GUIControl","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.inventory","description":"Classes and interfaces for namespace io.wolfscript.api.inventory","name":"inventory","qualifiedname":"io.wolfscript.api.inventory.0","packagename":"io.wolfscript.api.inventory","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.inventory.ItemType","io.wolfscript.api.inventory.ItemTypeException"],"interfaces":["io.wolfscript.api.inventory.AnimalInventory","io.wolfscript.api.inventory.BaseItem","io.wolfscript.api.inventory.CraftingMatrix","io.wolfscript.api.inventory.CustomStorageInventory","io.wolfscript.api.inventory.EnderChestInventory","io.wolfscript.api.inventory.Hopper","io.wolfscript.api.inventory.Inventory","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.MapData","io.wolfscript.api.inventory.PlayerCraftingMatrix","io.wolfscript.api.inventory.PlayerInventory","io.wolfscript.api.inventory.VillagerInventory"],"enums":["io.wolfscript.api.inventory.InventoryType"],"namespaces":["io.wolfscript.api.inventory.helper.0","io.wolfscript.api.inventory.recipes.0","io.wolfscript.api.inventory.slot.0"],"properties":[]},"io.wolfscript.api.inventory.AnimalInventory":{"namespace":"io.wolfscript.api.inventory","title":"Animal Inventory wrapper interface","description":"Animal Inventory wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"AnimalInventory","qualifiedname":"io.wolfscript.api.inventory.AnimalInventory","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.animal.EntityAnimal"],"properties":[]},"io.wolfscript.api.inventory.BaseItem":{"namespace":"io.wolfscript.api.inventory","title":"Base Item to retrieve Item statistics","description":"Base Item to retrieve Item statistics","doc":{"author":["Chris (damagefilter)"]},"name":"BaseItem","qualifiedname":"io.wolfscript.api.inventory.BaseItem","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.CraftingMatrix":{"namespace":"io.wolfscript.api.inventory","title":"Crafting Matrix sharer interface","description":"Crafting Matrix sharer interface This interface is so Workbench and PlayerCraftingMatrix can be sent the same","doc":{"author":["Jason (darkdiplomat)"]},"name":"CraftingMatrix","qualifiedname":"io.wolfscript.api.inventory.CraftingMatrix","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.CustomStorageInventory":{"namespace":"io.wolfscript.api.inventory","title":"Custom Inventory wrapper interface","description":"Custom Inventory wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"CustomStorageInventory","qualifiedname":"io.wolfscript.api.inventory.CustomStorageInventory","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.ListTag"],"properties":[]},"io.wolfscript.api.inventory.EnderChestInventory":{"namespace":"io.wolfscript.api.inventory","title":"Enderchest inventory interface","description":"Enderchest inventory interface","doc":{"author":["Jos Kuijpers"]},"name":"EnderChestInventory","qualifiedname":"io.wolfscript.api.inventory.EnderChestInventory","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Human"],"properties":[]},"io.wolfscript.api.inventory.Hopper":{"namespace":"io.wolfscript.api.inventory","title":"Interface for Hoppers, At the time of writing this includes HopperBlock and","description":"Interface for Hoppers, At the time of writing this includes HopperBlock and HopperMinecart.","doc":{"author":["Somners"]},"name":"Hopper","qualifiedname":"io.wolfscript.api.inventory.Hopper","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.World"],"properties":[]},"io.wolfscript.api.inventory.Inventory":{"namespace":"io.wolfscript.api.inventory","title":"Generic item inventory.","description":"Generic item inventory.","doc":{"author":["Chris (damagefilter)","Jos Kuijpers"]},"name":"Inventory","qualifiedname":"io.wolfscript.api.inventory.Inventory","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.InventoryType":{"namespace":"io.wolfscript.api.inventory","title":"Inventory Type enum","description":"Inventory Type enum <p/> List of all inventory types","doc":{"author":["Jason (darkdiplomat)"]},"name":"InventoryType","qualifiedname":"io.wolfscript.api.inventory.InventoryType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"ANIMAL","value":"","title":"ANIMAL InventoryType","description":"ANIMAL InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ANVIL","value":"","title":"ANVIL InventoryType","description":"ANVIL InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BEACON","value":"","title":"BEACON InventoryType","description":"BEACON InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BREWING","value":"","title":"BREWING InventoryType","description":"BREWING InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CHEST","value":"","title":"CHEST InventoryType","description":"CHEST InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CRAFTMATRIX","value":"","title":"CRAFTMATRIX InventoryType","description":"CRAFTMATRIX InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CUSTOM","value":"","title":"CUSTOM InventoryType","description":"CUSTOM InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DISPENSER","value":"","title":"DISPENSER InventoryType","description":"DISPENSER InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ENCHANTMENT","value":"","title":"ENCHANTMENT InventoryType","description":"ENCHANTMENT InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FURNACE","value":"","title":"FURNACE InventoryType","description":"FURNACE InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HOPPER","value":"","title":"HOPPER InventoryType","description":"HOPPER InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MINECART_CHEST","value":"","title":"MINECART_CHEST InventoryType","description":"MINECART_CHEST InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MINECART_HOPPER","value":"","title":"MINECART_HOPPER InventoryType","description":"MINECART_HOPPER InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLAYER","value":"","title":"PLAYER InventoryType","description":"PLAYER InventoryType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WORKBENCH","value":"","title":"WORKBENCH InventoryType","description":"WORKBENCH InventoryType","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.inventory.Item":{"namespace":"io.wolfscript.api.inventory","title":"This wraps an item stack","description":"This wraps an item stack","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","Jos"]},"name":"Item","qualifiedname":"io.wolfscript.api.inventory.Item","type":"interface","scope":"public","extends":["Cloneable"],"constructors":[],"methods":[],"imports":["com.google.common.collect.Multimap","io.wolfscript.api.attributes.AttributeModifier","io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.api.inventory.ItemType":{"namespace":"io.wolfscript.api.inventory","title":"Item Types","description":"Item Types","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"ItemType","qualifiedname":"io.wolfscript.api.inventory.ItemType","type":"class","scope":"public","describe":"final","constructors":[{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"data","type":"int","description":"data argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"name","type":"String","description":"name argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"isBlockCreating","type":"boolean","description":"isBlockCreating argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"data","type":"int","description":"data argument"},{"name":"name","type":"String","description":"name argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"isBlockCreating","type":"boolean","description":"isBlockCreating argument"},{"name":"machineName","type":"String","description":"machineName argument"}]},{"title":"ItemType constructor","description":"ItemType constructor","scope":"public","name":"ItemType","args":[{"name":"id","type":"int","description":"id argument"},{"name":"data","type":"int","description":"data argument"},{"name":"isBlockCreating","type":"boolean","description":"isBlockCreating argument"},{"name":"machineName","type":"String","description":"machineName argument"}]}],"fields":[{"title":"Stone field","description":"Stone field","name":"Stone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Granite field","description":"Granite field","name":"Granite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PolishedGranite field","description":"PolishedGranite field","name":"PolishedGranite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Diorite field","description":"Diorite field","name":"Diorite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PolishedDiorite field","description":"PolishedDiorite field","name":"PolishedDiorite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Andesite field","description":"Andesite field","name":"Andesite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PolishedAndesite field","description":"PolishedAndesite field","name":"PolishedAndesite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Grass field","description":"Grass field","name":"Grass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Dirt field","description":"Dirt field","name":"Dirt","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CoarseDirt field","description":"CoarseDirt field","name":"CoarseDirt","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Podzol field","description":"Podzol field","name":"Podzol","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Cobble field","description":"Cobble field","name":"Cobble","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OakWood field","description":"OakWood field","name":"OakWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceWood field","description":"SpruceWood field","name":"SpruceWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchWood field","description":"BirchWood field","name":"BirchWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleWood field","description":"JungleWood field","name":"JungleWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaWood field","description":"AcaciaWood field","name":"AcaciaWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakWood field","description":"DarkOakWood field","name":"DarkOakWood","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OakSapling field","description":"OakSapling field","name":"OakSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceSapling field","description":"SpruceSapling field","name":"SpruceSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchSapling field","description":"BirchSapling field","name":"BirchSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleSapling field","description":"JungleSapling field","name":"JungleSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaSapling field","description":"AcaciaSapling field","name":"AcaciaSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakSapling field","description":"DarkOakSapling field","name":"DarkOakSapling","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bedrock field","description":"Bedrock field","name":"Bedrock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WaterFlowing field","description":"WaterFlowing field","name":"WaterFlowing","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Water field","description":"Water field","name":"Water","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LavaFlowing field","description":"LavaFlowing field","name":"LavaFlowing","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Lava field","description":"Lava field","name":"Lava","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sand field","description":"Sand field","name":"Sand","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Gravel field","description":"Gravel field","name":"Gravel","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldOre field","description":"GoldOre field","name":"GoldOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronOre field","description":"IronOre field","name":"IronOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CoalOre field","description":"CoalOre field","name":"CoalOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OakLog field","description":"OakLog field","name":"OakLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PineLog field","description":"PineLog field","name":"PineLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchLog field","description":"BirchLog field","name":"BirchLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleLog field","description":"JungleLog field","name":"JungleLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OakLeaves field","description":"OakLeaves field","name":"OakLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PineLeaves field","description":"PineLeaves field","name":"PineLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchLeaves field","description":"BirchLeaves field","name":"BirchLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleLeaves field","description":"JungleLeaves field","name":"JungleLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sponge field","description":"Sponge field","name":"Sponge","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Glass field","description":"Glass field","name":"Glass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LapislazuliOre field","description":"LapislazuliOre field","name":"LapislazuliOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LapisBlock field","description":"LapisBlock field","name":"LapisBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Dispenser field","description":"Dispenser field","name":"Dispenser","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sandstone field","description":"Sandstone field","name":"Sandstone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SandstoneOrnate field","description":"SandstoneOrnate field","name":"SandstoneOrnate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SandstoneBlank field","description":"SandstoneBlank field","name":"SandstoneBlank","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NoteBlock field","description":"NoteBlock field","name":"NoteBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PoweredRail field","description":"PoweredRail field","name":"PoweredRail","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DetectorRail field","description":"DetectorRail field","name":"DetectorRail","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StickyPiston field","description":"StickyPiston field","name":"StickyPiston","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpiderWeb field","description":"SpiderWeb field","name":"SpiderWeb","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Shrub field","description":"Shrub field","name":"Shrub","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"TallGrass field","description":"TallGrass field","name":"TallGrass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"TallFern field","description":"TallFern field","name":"TallFern","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DeadBush field","description":"DeadBush field","name":"DeadBush","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Piston field","description":"Piston field","name":"Piston","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolWhite field","description":"WoolWhite field","name":"WoolWhite","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolOrange field","description":"WoolOrange field","name":"WoolOrange","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolMagenta field","description":"WoolMagenta field","name":"WoolMagenta","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolLightBlue field","description":"WoolLightBlue field","name":"WoolLightBlue","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolYellow field","description":"WoolYellow field","name":"WoolYellow","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolLightGreen field","description":"WoolLightGreen field","name":"WoolLightGreen","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolPink field","description":"WoolPink field","name":"WoolPink","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolGray field","description":"WoolGray field","name":"WoolGray","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolLightGray field","description":"WoolLightGray field","name":"WoolLightGray","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolCyan field","description":"WoolCyan field","name":"WoolCyan","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolPurple field","description":"WoolPurple field","name":"WoolPurple","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolBlue field","description":"WoolBlue field","name":"WoolBlue","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolBrown field","description":"WoolBrown field","name":"WoolBrown","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolDarkGreen field","description":"WoolDarkGreen field","name":"WoolDarkGreen","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolRed field","description":"WoolRed field","name":"WoolRed","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoolBlack field","description":"WoolBlack field","name":"WoolBlack","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"YellowFlower field","description":"YellowFlower field","name":"YellowFlower","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Poppy field","description":"Poppy field","name":"Poppy","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlueOrchid field","description":"BlueOrchid field","name":"BlueOrchid","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Allium field","description":"Allium field","name":"Allium","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AzureBluet field","description":"AzureBluet field","name":"AzureBluet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedTulip field","description":"RedTulip field","name":"RedTulip","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeTulip field","description":"OrangeTulip field","name":"OrangeTulip","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WhiteTulip field","description":"WhiteTulip field","name":"WhiteTulip","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkTulip field","description":"PinkTulip field","name":"PinkTulip","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OxeyeDaisy field","description":"OxeyeDaisy field","name":"OxeyeDaisy","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrownMushroom field","description":"BrownMushroom field","name":"BrownMushroom","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedMushroom field","description":"RedMushroom field","name":"RedMushroom","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldBlock field","description":"GoldBlock field","name":"GoldBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronBlock field","description":"IronBlock field","name":"IronBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleOrnateStoneSlab field","description":"DoubleOrnateStoneSlab field","name":"DoubleOrnateStoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleSandStoneTrimSlab field","description":"DoubleSandStoneTrimSlab field","name":"DoubleSandStoneTrimSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleWoodSlab field","description":"DoubleWoodSlab field","name":"DoubleWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleCobbleSlab field","description":"DoubleCobbleSlab field","name":"DoubleCobbleSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleBrickBlockSlab field","description":"DoubleBrickBlockSlab field","name":"DoubleBrickBlockSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleStoneBricksSlab field","description":"DoubleStoneBricksSlab field","name":"DoubleStoneBricksSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleNetherBrickSlab field","description":"DoubleNetherBrickSlab field","name":"DoubleNetherBrickSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleQuartzSlab field","description":"DoubleQuartzSlab field","name":"DoubleQuartzSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleStoneSlab field","description":"DoubleStoneSlab field","name":"DoubleStoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleSandstoneSlab field","description":"DoubleSandstoneSlab field","name":"DoubleSandstoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrnateStoneSlab field","description":"OrnateStoneSlab field","name":"OrnateStoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SandStoneTrimSlab field","description":"SandStoneTrimSlab field","name":"SandStoneTrimSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodSlab field","description":"WoodSlab field","name":"WoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CobbleSlab field","description":"CobbleSlab field","name":"CobbleSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrickSlab field","description":"BrickSlab field","name":"BrickSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneBricksSlab field","description":"StoneBricksSlab field","name":"StoneBricksSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherBricksSlab field","description":"NetherBricksSlab field","name":"NetherBricksSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzSlab field","description":"QuartzSlab field","name":"QuartzSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneSlab field","description":"StoneSlab field","name":"StoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SandstoneSlab field","description":"SandstoneSlab field","name":"SandstoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrickBlock field","description":"BrickBlock field","name":"BrickBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Tnt field","description":"Tnt field","name":"Tnt","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bookshelf field","description":"Bookshelf field","name":"Bookshelf","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MossyCobble field","description":"MossyCobble field","name":"MossyCobble","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Obsidian field","description":"Obsidian field","name":"Obsidian","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Torch field","description":"Torch field","name":"Torch","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FireBlock field","description":"FireBlock field","name":"FireBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MobSpawner field","description":"MobSpawner field","name":"MobSpawner","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodenStairs field","description":"WoodenStairs field","name":"WoodenStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Chest field","description":"Chest field","name":"Chest","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondOre field","description":"DiamondOre field","name":"DiamondOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondBlock field","description":"DiamondBlock field","name":"DiamondBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Workbench field","description":"Workbench field","name":"Workbench","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Soil field","description":"Soil field","name":"Soil","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Furnace field","description":"Furnace field","name":"Furnace","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BurningFurnace field","description":"BurningFurnace field","name":"BurningFurnace","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Ladder field","description":"Ladder field","name":"Ladder","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Rail field","description":"Rail field","name":"Rail","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CobbleStairs field","description":"CobbleStairs field","name":"CobbleStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Lever field","description":"Lever field","name":"Lever","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StonePlate field","description":"StonePlate field","name":"StonePlate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodPlate field","description":"WoodPlate field","name":"WoodPlate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneOre field","description":"RedstoneOre field","name":"RedstoneOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneTorchOn field","description":"RedstoneTorchOn field","name":"RedstoneTorchOn","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneButton field","description":"StoneButton field","name":"StoneButton","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Snow field","description":"Snow field","name":"Snow","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Ice field","description":"Ice field","name":"Ice","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SnowBlock field","description":"SnowBlock field","name":"SnowBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Cactus field","description":"Cactus field","name":"Cactus","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Clay field","description":"Clay field","name":"Clay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Jukebox field","description":"Jukebox field","name":"Jukebox","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Fence field","description":"Fence field","name":"Fence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Pumpkin field","description":"Pumpkin field","name":"Pumpkin","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Netherrack field","description":"Netherrack field","name":"Netherrack","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SoulSand field","description":"SoulSand field","name":"SoulSand","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GlowStone field","description":"GlowStone field","name":"GlowStone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Portal field","description":"Portal field","name":"Portal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JackOLantern field","description":"JackOLantern field","name":"JackOLantern","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WhiteGlass field","description":"WhiteGlass field","name":"WhiteGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeGlass field","description":"OrangeGlass field","name":"OrangeGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagentaGlass field","description":"MagentaGlass field","name":"MagentaGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightBlueGlass field","description":"LightBlueGlass field","name":"LightBlueGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"YellowGlass field","description":"YellowGlass field","name":"YellowGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LimeGlass field","description":"LimeGlass field","name":"LimeGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkGlass field","description":"PinkGlass field","name":"PinkGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrayGlass field","description":"GrayGlass field","name":"GrayGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightGrayGlass field","description":"LightGrayGlass field","name":"LightGrayGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CyanGlass field","description":"CyanGlass field","name":"CyanGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PurpleGlass field","description":"PurpleGlass field","name":"PurpleGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlueGlass field","description":"BlueGlass field","name":"BlueGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrownGlass field","description":"BrownGlass field","name":"BrownGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GreenGlass field","description":"GreenGlass field","name":"GreenGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedGlass field","description":"RedGlass field","name":"RedGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlackGlass field","description":"BlackGlass field","name":"BlackGlass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Trapdoor field","description":"Trapdoor field","name":"Trapdoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneSilverFishBlock field","description":"StoneSilverFishBlock field","name":"StoneSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CobbleSilverFishBlock field","description":"CobbleSilverFishBlock field","name":"CobbleSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneBrickSilverFishBlock field","description":"StoneBrickSilverFishBlock field","name":"StoneBrickSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MossyBrickSilverFishBlock field","description":"MossyBrickSilverFishBlock field","name":"MossyBrickSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CrackedSilverFishBlock field","description":"CrackedSilverFishBlock field","name":"CrackedSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrnateSilverFishBlock field","description":"OrnateSilverFishBlock field","name":"OrnateSilverFishBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneBrick field","description":"StoneBrick field","name":"StoneBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MossyStoneBrick field","description":"MossyStoneBrick field","name":"MossyStoneBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CrackedStoneBrick field","description":"CrackedStoneBrick field","name":"CrackedStoneBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrnateStoneBrick field","description":"OrnateStoneBrick field","name":"OrnateStoneBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HugeBrownMushroom field","description":"HugeBrownMushroom field","name":"HugeBrownMushroom","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HugeRedMushroom field","description":"HugeRedMushroom field","name":"HugeRedMushroom","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronBars field","description":"IronBars field","name":"IronBars","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GlassPane field","description":"GlassPane field","name":"GlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Melon field","description":"Melon field","name":"Melon","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Vines field","description":"Vines field","name":"Vines","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FenceGate field","description":"FenceGate field","name":"FenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrickStairs field","description":"BrickStairs field","name":"BrickStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneBrickStairs field","description":"StoneBrickStairs field","name":"StoneBrickStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Mycelium field","description":"Mycelium field","name":"Mycelium","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Lilypad field","description":"Lilypad field","name":"Lilypad","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherBrick field","description":"NetherBrick field","name":"NetherBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherBrickFence field","description":"NetherBrickFence field","name":"NetherBrickFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherBrickStairs field","description":"NetherBrickStairs field","name":"NetherBrickStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EnchantmentTable field","description":"EnchantmentTable field","name":"EnchantmentTable","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EndPortal field","description":"EndPortal field","name":"EndPortal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EndPortalFrame field","description":"EndPortalFrame field","name":"EndPortalFrame","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EndStone field","description":"EndStone field","name":"EndStone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EnderDragonEgg field","description":"EnderDragonEgg field","name":"EnderDragonEgg","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneLampOff field","description":"RedstoneLampOff field","name":"RedstoneLampOff","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleOakWoodSlab field","description":"DoubleOakWoodSlab field","name":"DoubleOakWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleSpruceWoodSlab field","description":"DoubleSpruceWoodSlab field","name":"DoubleSpruceWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleBirchWoodSlab field","description":"DoubleBirchWoodSlab field","name":"DoubleBirchWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleJungleWoodSlab field","description":"DoubleJungleWoodSlab field","name":"DoubleJungleWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleAcaciaWoodSlab field","description":"DoubleAcaciaWoodSlab field","name":"DoubleAcaciaWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleDarkOakWoodSlab field","description":"DoubleDarkOakWoodSlab field","name":"DoubleDarkOakWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OakWoodSlab field","description":"OakWoodSlab field","name":"OakWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceWoodSlab field","description":"SpruceWoodSlab field","name":"SpruceWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchWoodSlab field","description":"BirchWoodSlab field","name":"BirchWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleWoodSlab field","description":"JungleWoodSlab field","name":"JungleWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaWoodSlab field","description":"AcaciaWoodSlab field","name":"AcaciaWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakWoodSlab field","description":"DarkOakWoodSlab field","name":"DarkOakWoodSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CocoaPlant field","description":"CocoaPlant field","name":"CocoaPlant","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SandstoneStairs field","description":"SandstoneStairs field","name":"SandstoneStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EmeraldOre field","description":"EmeraldOre field","name":"EmeraldOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EnderChest field","description":"EnderChest field","name":"EnderChest","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"TripwireHook field","description":"TripwireHook field","name":"TripwireHook","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EmeraldBlock field","description":"EmeraldBlock field","name":"EmeraldBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PineWoodStairs field","description":"PineWoodStairs field","name":"PineWoodStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchWoodStairs field","description":"BirchWoodStairs field","name":"BirchWoodStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleWoodStairs field","description":"JungleWoodStairs field","name":"JungleWoodStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CommandBlock field","description":"CommandBlock field","name":"CommandBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Beacon field","description":"Beacon field","name":"Beacon","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CobblestoneWall field","description":"CobblestoneWall field","name":"CobblestoneWall","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MossyCobbleWall field","description":"MossyCobbleWall field","name":"MossyCobbleWall","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Carrots field","description":"Carrots field","name":"Carrots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Potatoes field","description":"Potatoes field","name":"Potatoes","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodenButton field","description":"WoodenButton field","name":"WoodenButton","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Anvil field","description":"Anvil field","name":"Anvil","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"TrappedChest field","description":"TrappedChest field","name":"TrappedChest","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightWeightedPressurePlate field","description":"LightWeightedPressurePlate field","name":"LightWeightedPressurePlate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HeavyWeightedPressurePlate field","description":"HeavyWeightedPressurePlate field","name":"HeavyWeightedPressurePlate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DaylightSensor field","description":"DaylightSensor field","name":"DaylightSensor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneBlock field","description":"RedstoneBlock field","name":"RedstoneBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherQuartzOre field","description":"NetherQuartzOre field","name":"NetherQuartzOre","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Hopper field","description":"Hopper field","name":"Hopper","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzBlock field","description":"QuartzBlock field","name":"QuartzBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrnateQuartzBlock field","description":"OrnateQuartzBlock field","name":"OrnateQuartzBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzPillarVertical field","description":"QuartzPillarVertical field","name":"QuartzPillarVertical","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzPillarHorizontal field","description":"QuartzPillarHorizontal field","name":"QuartzPillarHorizontal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzPillarCap field","description":"QuartzPillarCap field","name":"QuartzPillarCap","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"QuartzStairs field","description":"QuartzStairs field","name":"QuartzStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ActivatorRail field","description":"ActivatorRail field","name":"ActivatorRail","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Dropper field","description":"Dropper field","name":"Dropper","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WhiteStainedClay field","description":"WhiteStainedClay field","name":"WhiteStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeStainedClay field","description":"OrangeStainedClay field","name":"OrangeStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagentaStainedClay field","description":"MagentaStainedClay field","name":"MagentaStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightBlueStainedClay field","description":"LightBlueStainedClay field","name":"LightBlueStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"YellowStainedClay field","description":"YellowStainedClay field","name":"YellowStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LimeStainedClay field","description":"LimeStainedClay field","name":"LimeStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkStainedClay field","description":"PinkStainedClay field","name":"PinkStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrayStainedClay field","description":"GrayStainedClay field","name":"GrayStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightGrayStainedClay field","description":"LightGrayStainedClay field","name":"LightGrayStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CyanStainedClay field","description":"CyanStainedClay field","name":"CyanStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PurpleStainedClay field","description":"PurpleStainedClay field","name":"PurpleStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlueStainedClay field","description":"BlueStainedClay field","name":"BlueStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrownStainedClay field","description":"BrownStainedClay field","name":"BrownStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GreenStainedClay field","description":"GreenStainedClay field","name":"GreenStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedStainedClay field","description":"RedStainedClay field","name":"RedStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlackStainedClay field","description":"BlackStainedClay field","name":"BlackStainedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WhiteGlassPane field","description":"WhiteGlassPane field","name":"WhiteGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeGlassPane field","description":"OrangeGlassPane field","name":"OrangeGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagentaGlassPane field","description":"MagentaGlassPane field","name":"MagentaGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightBlueGlassPane field","description":"LightBlueGlassPane field","name":"LightBlueGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"YellowGlassPane field","description":"YellowGlassPane field","name":"YellowGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LimeGlassPane field","description":"LimeGlassPane field","name":"LimeGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkGlassPane field","description":"PinkGlassPane field","name":"PinkGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrayGlassPane field","description":"GrayGlassPane field","name":"GrayGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightGrayGlassPane field","description":"LightGrayGlassPane field","name":"LightGrayGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CyanGlassPane field","description":"CyanGlassPane field","name":"CyanGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PurpleGlassPane field","description":"PurpleGlassPane field","name":"PurpleGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlueGlassPane field","description":"BlueGlassPane field","name":"BlueGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrownGlassPane field","description":"BrownGlassPane field","name":"BrownGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GreenGlassPane field","description":"GreenGlassPane field","name":"GreenGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedGlassPane field","description":"RedGlassPane field","name":"RedGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlackGlassPane field","description":"BlackGlassPane field","name":"BlackGlassPane","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaLeaves field","description":"AcaciaLeaves field","name":"AcaciaLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakLeaves field","description":"DarkOakLeaves field","name":"DarkOakLeaves","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaLog field","description":"AcaciaLog field","name":"AcaciaLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakLog field","description":"DarkOakLog field","name":"DarkOakLog","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaStairs field","description":"AcaciaStairs field","name":"AcaciaStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakStairs field","description":"DarkOakStairs field","name":"DarkOakStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HayBale field","description":"HayBale field","name":"HayBale","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WhiteCarpet field","description":"WhiteCarpet field","name":"WhiteCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeCarpet field","description":"OrangeCarpet field","name":"OrangeCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagentaCarpet field","description":"MagentaCarpet field","name":"MagentaCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightBlueCarpet field","description":"LightBlueCarpet field","name":"LightBlueCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"YellowCarpet field","description":"YellowCarpet field","name":"YellowCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LimeCarpet field","description":"LimeCarpet field","name":"LimeCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkCarpet field","description":"PinkCarpet field","name":"PinkCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrayCarpet field","description":"GrayCarpet field","name":"GrayCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightGrayCarpet field","description":"LightGrayCarpet field","name":"LightGrayCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CyanCarpet field","description":"CyanCarpet field","name":"CyanCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PurpleCarpet field","description":"PurpleCarpet field","name":"PurpleCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlueCarpet field","description":"BlueCarpet field","name":"BlueCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrownCarpet field","description":"BrownCarpet field","name":"BrownCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GreenCarpet field","description":"GreenCarpet field","name":"GreenCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedCarpet field","description":"RedCarpet field","name":"RedCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlackCarpet field","description":"BlackCarpet field","name":"BlackCarpet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HardenedClay field","description":"HardenedClay field","name":"HardenedClay","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CoalBlock field","description":"CoalBlock field","name":"CoalBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PackedIce field","description":"PackedIce field","name":"PackedIce","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sunflower field","description":"Sunflower field","name":"Sunflower","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Lilac field","description":"Lilac field","name":"Lilac","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleGrass field","description":"DoubleGrass field","name":"DoubleGrass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LargeFern field","description":"LargeFern field","name":"LargeFern","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RoseBush field","description":"RoseBush field","name":"RoseBush","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Peony field","description":"Peony field","name":"Peony","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedSandstone field","description":"RedSandstone field","name":"RedSandstone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedSandstoneOrnate field","description":"RedSandstoneOrnate field","name":"RedSandstoneOrnate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedSandstoneBlank field","description":"RedSandstoneBlank field","name":"RedSandstoneBlank","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedSandstoneStairs field","description":"RedSandstoneStairs field","name":"RedSandstoneStairs","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedSandstoneSlab field","description":"RedSandstoneSlab field","name":"RedSandstoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DoubleRedSandstoneSlab field","description":"DoubleRedSandstoneSlab field","name":"DoubleRedSandstoneSlab","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceFenceGate field","description":"SpruceFenceGate field","name":"SpruceFenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchFenceGate field","description":"BirchFenceGate field","name":"BirchFenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleFenceGate field","description":"JungleFenceGate field","name":"JungleFenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakFenceGate field","description":"DarkOakFenceGate field","name":"DarkOakFenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaFenceGate field","description":"AcaciaFenceGate field","name":"AcaciaFenceGate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceFence field","description":"SpruceFence field","name":"SpruceFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchFence field","description":"BirchFence field","name":"BirchFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleFence field","description":"JungleFence field","name":"JungleFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakFence field","description":"DarkOakFence field","name":"DarkOakFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaFence field","description":"AcaciaFence field","name":"AcaciaFence","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronSpade field","description":"IronSpade field","name":"IronSpade","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronPickaxe field","description":"IronPickaxe field","name":"IronPickaxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronAxe field","description":"IronAxe field","name":"IronAxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FlintAndSteel field","description":"FlintAndSteel field","name":"FlintAndSteel","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Apple field","description":"Apple field","name":"Apple","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bow field","description":"Bow field","name":"Bow","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Arrow field","description":"Arrow field","name":"Arrow","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Coal field","description":"Coal field","name":"Coal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Charcoal field","description":"Charcoal field","name":"Charcoal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Diamond field","description":"Diamond field","name":"Diamond","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronIngot field","description":"IronIngot field","name":"IronIngot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldIngot field","description":"GoldIngot field","name":"GoldIngot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronSword field","description":"IronSword field","name":"IronSword","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodSword field","description":"WoodSword field","name":"WoodSword","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodSpade field","description":"WoodSpade field","name":"WoodSpade","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodPickaxe field","description":"WoodPickaxe field","name":"WoodPickaxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodAxe field","description":"WoodAxe field","name":"WoodAxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneSword field","description":"StoneSword field","name":"StoneSword","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneSpade field","description":"StoneSpade field","name":"StoneSpade","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StonePickaxe field","description":"StonePickaxe field","name":"StonePickaxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneAxe field","description":"StoneAxe field","name":"StoneAxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondSword field","description":"DiamondSword field","name":"DiamondSword","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondSpade field","description":"DiamondSpade field","name":"DiamondSpade","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondPickaxe field","description":"DiamondPickaxe field","name":"DiamondPickaxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondAxe field","description":"DiamondAxe field","name":"DiamondAxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Stick field","description":"Stick field","name":"Stick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bowl field","description":"Bowl field","name":"Bowl","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MushroomSoup field","description":"MushroomSoup field","name":"MushroomSoup","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldSword field","description":"GoldSword field","name":"GoldSword","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldSpade field","description":"GoldSpade field","name":"GoldSpade","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldPickaxe field","description":"GoldPickaxe field","name":"GoldPickaxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldAxe field","description":"GoldAxe field","name":"GoldAxe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"String field","description":"String field","name":"String","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Feather field","description":"Feather field","name":"Feather","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Gunpowder field","description":"Gunpowder field","name":"Gunpowder","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodHoe field","description":"WoodHoe field","name":"WoodHoe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StoneHoe field","description":"StoneHoe field","name":"StoneHoe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronHoe field","description":"IronHoe field","name":"IronHoe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondHoe field","description":"DiamondHoe field","name":"DiamondHoe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldHoe field","description":"GoldHoe field","name":"GoldHoe","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Seeds field","description":"Seeds field","name":"Seeds","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Wheat field","description":"Wheat field","name":"Wheat","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bread field","description":"Bread field","name":"Bread","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LeatherHelmet field","description":"LeatherHelmet field","name":"LeatherHelmet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LeatherChestplate field","description":"LeatherChestplate field","name":"LeatherChestplate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LeatherLeggings field","description":"LeatherLeggings field","name":"LeatherLeggings","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LeatherBoots field","description":"LeatherBoots field","name":"LeatherBoots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ChainmailHelmet field","description":"ChainmailHelmet field","name":"ChainmailHelmet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ChainmailChestplate field","description":"ChainmailChestplate field","name":"ChainmailChestplate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ChainmailLeggings field","description":"ChainmailLeggings field","name":"ChainmailLeggings","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ChainmailBoots field","description":"ChainmailBoots field","name":"ChainmailBoots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronHelmet field","description":"IronHelmet field","name":"IronHelmet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronChestplate field","description":"IronChestplate field","name":"IronChestplate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronLeggings field","description":"IronLeggings field","name":"IronLeggings","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronBoots field","description":"IronBoots field","name":"IronBoots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondHelmet field","description":"DiamondHelmet field","name":"DiamondHelmet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondChestplate field","description":"DiamondChestplate field","name":"DiamondChestplate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondLeggings field","description":"DiamondLeggings field","name":"DiamondLeggings","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondBoots field","description":"DiamondBoots field","name":"DiamondBoots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldHelmet field","description":"GoldHelmet field","name":"GoldHelmet","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldChestplate field","description":"GoldChestplate field","name":"GoldChestplate","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldLeggings field","description":"GoldLeggings field","name":"GoldLeggings","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldBoots field","description":"GoldBoots field","name":"GoldBoots","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Flint field","description":"Flint field","name":"Flint","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Pork field","description":"Pork field","name":"Pork","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrilledPork field","description":"GrilledPork field","name":"GrilledPork","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Painting field","description":"Painting field","name":"Painting","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldenApple field","description":"GoldenApple field","name":"GoldenApple","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sign field","description":"Sign field","name":"Sign","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WoodDoor field","description":"WoodDoor field","name":"WoodDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bucket field","description":"Bucket field","name":"Bucket","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WaterBucket field","description":"WaterBucket field","name":"WaterBucket","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LavaBucket field","description":"LavaBucket field","name":"LavaBucket","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Minecart field","description":"Minecart field","name":"Minecart","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Saddle field","description":"Saddle field","name":"Saddle","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronDoor field","description":"IronDoor field","name":"IronDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedStone field","description":"RedStone field","name":"RedStone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SnowBall field","description":"SnowBall field","name":"SnowBall","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Boat field","description":"Boat field","name":"Boat","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Leather field","description":"Leather field","name":"Leather","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MilkBucket field","description":"MilkBucket field","name":"MilkBucket","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ClayBrick field","description":"ClayBrick field","name":"ClayBrick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ClayBall field","description":"ClayBall field","name":"ClayBall","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Reed field","description":"Reed field","name":"Reed","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Paper field","description":"Paper field","name":"Paper","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Book field","description":"Book field","name":"Book","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SlimeBall field","description":"SlimeBall field","name":"SlimeBall","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StorageMinecart field","description":"StorageMinecart field","name":"StorageMinecart","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PoweredMinecart field","description":"PoweredMinecart field","name":"PoweredMinecart","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Egg field","description":"Egg field","name":"Egg","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Compass field","description":"Compass field","name":"Compass","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FishingRod field","description":"FishingRod field","name":"FishingRod","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Watch field","description":"Watch field","name":"Watch","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GlowstoneDust field","description":"GlowstoneDust field","name":"GlowstoneDust","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawFish field","description":"RawFish field","name":"RawFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawSalmon field","description":"RawSalmon field","name":"RawSalmon","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ClownFish field","description":"ClownFish field","name":"ClownFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PufferFish field","description":"PufferFish field","name":"PufferFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedFish field","description":"CookedFish field","name":"CookedFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedSalmon field","description":"CookedSalmon field","name":"CookedSalmon","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedClownFish field","description":"CookedClownFish field","name":"CookedClownFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedPufferFish field","description":"CookedPufferFish field","name":"CookedPufferFish","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"InkSack field","description":"InkSack field","name":"InkSack","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RoseRed field","description":"RoseRed field","name":"RoseRed","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CactusGreen field","description":"CactusGreen field","name":"CactusGreen","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CocoaBeans field","description":"CocoaBeans field","name":"CocoaBeans","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LapisLazuli field","description":"LapisLazuli field","name":"LapisLazuli","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PurpleDye field","description":"PurpleDye field","name":"PurpleDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CyanDye field","description":"CyanDye field","name":"CyanDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightGrayDye field","description":"LightGrayDye field","name":"LightGrayDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GrayDye field","description":"GrayDye field","name":"GrayDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PinkDye field","description":"PinkDye field","name":"PinkDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LimeDye field","description":"LimeDye field","name":"LimeDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DandelionYellow field","description":"DandelionYellow field","name":"DandelionYellow","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"LightBlueDye field","description":"LightBlueDye field","name":"LightBlueDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagentaDye field","description":"MagentaDye field","name":"MagentaDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"OrangeDye field","description":"OrangeDye field","name":"OrangeDye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bonemeal field","description":"Bonemeal field","name":"Bonemeal","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bone field","description":"Bone field","name":"Bone","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Sugar field","description":"Sugar field","name":"Sugar","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Cake field","description":"Cake field","name":"Cake","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Bed field","description":"Bed field","name":"Bed","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneRepeater field","description":"RedstoneRepeater field","name":"RedstoneRepeater","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Cookie field","description":"Cookie field","name":"Cookie","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Map field","description":"Map field","name":"Map","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Shears field","description":"Shears field","name":"Shears","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MelonSlice field","description":"MelonSlice field","name":"MelonSlice","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PumpkinSeeds field","description":"PumpkinSeeds field","name":"PumpkinSeeds","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MelonSeeds field","description":"MelonSeeds field","name":"MelonSeeds","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawBeef field","description":"RawBeef field","name":"RawBeef","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Steak field","description":"Steak field","name":"Steak","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawChicken field","description":"RawChicken field","name":"RawChicken","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedChicken field","description":"CookedChicken field","name":"CookedChicken","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RottenFlesh field","description":"RottenFlesh field","name":"RottenFlesh","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EnderPearl field","description":"EnderPearl field","name":"EnderPearl","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlazeRod field","description":"BlazeRod field","name":"BlazeRod","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GhastTear field","description":"GhastTear field","name":"GhastTear","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldNugget field","description":"GoldNugget field","name":"GoldNugget","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherWart field","description":"NetherWart field","name":"NetherWart","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Potion field","description":"Potion field","name":"Potion","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GlassBottle field","description":"GlassBottle field","name":"GlassBottle","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpiderEye field","description":"SpiderEye field","name":"SpiderEye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FermentedSpiderEye field","description":"FermentedSpiderEye field","name":"FermentedSpiderEye","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlazePowder field","description":"BlazePowder field","name":"BlazePowder","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MagmaCream field","description":"MagmaCream field","name":"MagmaCream","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BrewingStand field","description":"BrewingStand field","name":"BrewingStand","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Cauldron field","description":"Cauldron field","name":"Cauldron","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EyeofEnder field","description":"EyeofEnder field","name":"EyeofEnder","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GlisteringMelon field","description":"GlisteringMelon field","name":"GlisteringMelon","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpawnEgg field","description":"SpawnEgg field","name":"SpawnEgg","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BottleOEnchanting field","description":"BottleOEnchanting field","name":"BottleOEnchanting","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FireCharge field","description":"FireCharge field","name":"FireCharge","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BookAndQuill field","description":"BookAndQuill field","name":"BookAndQuill","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WrittenBook field","description":"WrittenBook field","name":"WrittenBook","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Emerald field","description":"Emerald field","name":"Emerald","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ItemFrame field","description":"ItemFrame field","name":"ItemFrame","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FlowerPot field","description":"FlowerPot field","name":"FlowerPot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Carrot field","description":"Carrot field","name":"Carrot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Potato field","description":"Potato field","name":"Potato","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BakedPotato field","description":"BakedPotato field","name":"BakedPotato","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PoisonousPotato field","description":"PoisonousPotato field","name":"PoisonousPotato","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EmptyMap field","description":"EmptyMap field","name":"EmptyMap","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldenCarrot field","description":"GoldenCarrot field","name":"GoldenCarrot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SkeletonHead field","description":"SkeletonHead field","name":"SkeletonHead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WitherSkeletonHead field","description":"WitherSkeletonHead field","name":"WitherSkeletonHead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ZombieHead field","description":"ZombieHead field","name":"ZombieHead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"HumanHead field","description":"HumanHead field","name":"HumanHead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CreeperHead field","description":"CreeperHead field","name":"CreeperHead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CarrotOnAStick field","description":"CarrotOnAStick field","name":"CarrotOnAStick","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherStar field","description":"NetherStar field","name":"NetherStar","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PumpkinPie field","description":"PumpkinPie field","name":"PumpkinPie","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FireworkRocket field","description":"FireworkRocket field","name":"FireworkRocket","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FireworkStar field","description":"FireworkStar field","name":"FireworkStar","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"EnchantedBook field","description":"EnchantedBook field","name":"EnchantedBook","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RedstoneComparator field","description":"RedstoneComparator field","name":"RedstoneComparator","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherBricks field","description":"NetherBricks field","name":"NetherBricks","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NetherQuartz field","description":"NetherQuartz field","name":"NetherQuartz","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MinecartTNT field","description":"MinecartTNT field","name":"MinecartTNT","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MinecartHopper field","description":"MinecartHopper field","name":"MinecartHopper","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PrismarineShard field","description":"PrismarineShard field","name":"PrismarineShard","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"PrismarineCrystals field","description":"PrismarineCrystals field","name":"PrismarineCrystals","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawRabbit field","description":"RawRabbit field","name":"RawRabbit","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedRabbit field","description":"CookedRabbit field","name":"CookedRabbit","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RabbitStew field","description":"RabbitStew field","name":"RabbitStew","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RabbitFoot field","description":"RabbitFoot field","name":"RabbitFoot","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RabbitHide field","description":"RabbitHide field","name":"RabbitHide","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ArmorStand field","description":"ArmorStand field","name":"ArmorStand","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"IronHorseArmor field","description":"IronHorseArmor field","name":"IronHorseArmor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldHorseArmor field","description":"GoldHorseArmor field","name":"GoldHorseArmor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DiamondHorseArmor field","description":"DiamondHorseArmor field","name":"DiamondHorseArmor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Lead field","description":"Lead field","name":"Lead","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"NameTag field","description":"NameTag field","name":"NameTag","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MinecartCommandBlock field","description":"MinecartCommandBlock field","name":"MinecartCommandBlock","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"RawMutton field","description":"RawMutton field","name":"RawMutton","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"CookedMutton field","description":"CookedMutton field","name":"CookedMutton","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"Banner field","description":"Banner field","name":"Banner","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"SpruceDoor field","description":"SpruceDoor field","name":"SpruceDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BirchDoor field","description":"BirchDoor field","name":"BirchDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"JungleDoor field","description":"JungleDoor field","name":"JungleDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"AcaciaDoor field","description":"AcaciaDoor field","name":"AcaciaDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"DarkOakDoor field","description":"DarkOakDoor field","name":"DarkOakDoor","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GoldRecord field","description":"GoldRecord field","name":"GoldRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"GreenRecord field","description":"GreenRecord field","name":"GreenRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"BlocksRecord field","description":"BlocksRecord field","name":"BlocksRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ChirpRecord field","description":"ChirpRecord field","name":"ChirpRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"FarRecord field","description":"FarRecord field","name":"FarRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MallRecord field","description":"MallRecord field","name":"MallRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"MellohiRecord field","description":"MellohiRecord field","name":"MellohiRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StalRecord field","description":"StalRecord field","name":"StalRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"StradRecord field","description":"StradRecord field","name":"StradRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WardRecord field","description":"WardRecord field","name":"WardRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"ElevenRecord field","description":"ElevenRecord field","name":"ElevenRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"},{"title":"WaitRecord field","description":"WaitRecord field","name":"WaitRecord","scope":"public","type":"io.wolfscript.api.inventory.ItemType","describe":"static final"}],"methods":[{"title":"Get the ID of this ItemType","description":"Get the ID of this ItemType","doc":{"return":["the id /\n    public int getId() {\n        return id;\n    }\n\n    /** Get the data of the ItemType","the data /\n    public int getData() {\n        return data;\n    }\n\n    /** Get a custom ItemType.","the ItemType if found; {@code null} if the requested ItemType does not exist. /\n    public static ItemType getCustomItemType(String name) {\n        return ItemType.getCustomItemType(name, 0);\n    }\n\n    /** Get a custom ItemType.","the ItemType if found; {@code null} if the requested ItemType does not exist. /\n    public static ItemType getCustomItemType(String name, int data) {\n        Entry<String, Integer> custom = new SimpleImmutableEntry<String, Integer>(name, data);\n        if (itemTypes.containsKey(custom)) {\n            return itemTypes.get(custom);\n        }\n\n        for (ItemType t : itemTypes.values()) {\n            if (t.data == data && t.machineName.equalsIgnoreCase(name)) {\n                return t;\n            }\n        }\n        return null;\n    }\n\n    /** Returns an ItemType according to its name. This returns null if there is no ItemType with this name.","the ItemType if found; {@code null} if not /\n    public static ItemType fromString(String name) {\n        for (ItemType t : itemTypes.values()) {\n            if (t.machineName.equalsIgnoreCase(name)) {\n                return t;\n            }\n        }\n        return null;\n    }\n\n    /** Get the ItemType according to the given ID. This will return null if there is no ItemType with this id.","the ItemType if found; {@code null} if not /\n    public static ItemType fromId(int id) {\n        for (ItemType type : itemTypes.values()) {\n            if (type.id == id) {\n                return type;\n            }\n        }\n        return null;\n    }\n\n    /** Gets an ItemType according to the given ID and Data values. This will return null if there is no ItemType with this id.","the ItemType if found; {@code null} if not /\n    public static ItemType fromIdAndData(int id, int data) {\n        for (ItemType type : itemTypes.values()) {\n            if (type.id == id && type.data == data) {\n                return type;\n            }\n        }\n        return fromId(id);\n    }\n\n    /** Gets an ItemType according to the given machine name and data value. This will return null if there is no ItemType with this id.","the ItemType if found; {@code null} if not /\n    public static ItemType fromStringAndData(String machineName, int data) {\n        Entry<String, Integer> needle = new SimpleImmutableEntry<String, Integer>(machineName, data);\n        if (itemTypes.containsKey(needle)) {\n            return itemTypes.get(needle);\n        }\n\n        for (ItemType type : itemTypes.values()) {\n            if (type.data == data && type.machineName.equalsIgnoreCase(machineName)) {\n                return type;\n            }\n        }\n        return fromString(machineName);\n    }\n\n    /** Returns a \"machine readable\" name. That is: a representation of the Item Type name in lowercase letters without whitespaces.","the machine name /\n    public String getMachineName() {\n        return machineName;\n    }\n\n    /** Checks the Item ID if it is an Item that creates a Block","{@code true} if creates blocks; {@code false} if not /\n    public static boolean isBlockCreating(int itemId) {\n        return fromId(itemId).blockCreating;\n    }\n\n    public boolean isBlockCreating() {\n        return blockCreating;\n    }\n\n    /** Gets an array of all ItemTypes","all ItemTypes"],"param":["name the machine name or the display name of the block type in question","name the machine name of the block type in question","data the data of the block type in question","name The machine name or the display name","id the id to get type from","id the id to get type from","data the data (damage) to get type from","machineName the machine name to get type from","data the data (damage) to get type from","itemId the Item ID to check"]},"scope":"public","describe":"static","return":"ItemType[]","name":"values","args":[]}],"imports":["java.util.AbstractMap.SimpleImmutableEntry","java.util.HashMap","java.util.Map.Entry"],"properties":[]},"io.wolfscript.api.inventory.ItemTypeException":{"namespace":"io.wolfscript.api.inventory","title":"Thrown when trying to create an invalid ItemType","description":"Thrown when trying to create an invalid ItemType","doc":{"author":["Chris (damagefilter)"]},"name":"ItemTypeException","qualifiedname":"io.wolfscript.api.inventory.ItemTypeException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"ItemTypeException constructor","description":"ItemTypeException constructor","scope":"public","name":"ItemTypeException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.MapData":{"namespace":"io.wolfscript.api.inventory","title":"Map Data API","description":"Map Data API","doc":{"author":["Jason (darkdiplomat)"]},"name":"MapData","qualifiedname":"io.wolfscript.api.inventory.MapData","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.api.inventory.PlayerCraftingMatrix":{"namespace":"io.wolfscript.api.inventory","title":"The Player's crafting space","description":"The Player's crafting space","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerCraftingMatrix","qualifiedname":"io.wolfscript.api.inventory.PlayerCraftingMatrix","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.CraftingMatrix"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.PlayerInventory":{"namespace":"io.wolfscript.api.inventory","title":"Player and NPC Inventory wrapper interface","description":"Player and NPC Inventory wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerInventory","qualifiedname":"io.wolfscript.api.inventory.PlayerInventory","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.inventory.VillagerInventory":{"namespace":"io.wolfscript.api.inventory","title":"Villager inventory interface","description":"Villager inventory interface","doc":{"author":["Almog (Swift)"]},"name":"VillagerInventory","qualifiedname":"io.wolfscript.api.inventory.VillagerInventory","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.Inventory"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.VillagerTrade","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.entity.living.humanoid.Villager"],"properties":[]},"io.wolfscript.api.inventory.helper.0":{"namespace":"io.wolfscript.api.inventory","title":"Classes and interfaces for namespace io.wolfscript.api.inventory.helper","description":"Classes and interfaces for namespace io.wolfscript.api.inventory.helper","name":"helper","qualifiedname":"io.wolfscript.api.inventory.helper.0","packagename":"io.wolfscript.api.inventory.helper","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.inventory.helper.BannerPattern","io.wolfscript.api.inventory.helper.BookHelper","io.wolfscript.api.inventory.helper.FireworkHelper","io.wolfscript.api.inventory.helper.LeatherArmorHelper","io.wolfscript.api.inventory.helper.PotionItemHelper","io.wolfscript.api.inventory.helper.SkullHelper"],"interfaces":[],"enums":["io.wolfscript.api.inventory.helper.BannerPatterns"],"namespaces":[],"properties":[]},"io.wolfscript.api.inventory.helper.BannerPattern":{"namespace":"io.wolfscript.api.inventory.helper","title":"Container helper for Banner pattern shape and colors","description":"Container helper for Banner pattern shape and colors","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BannerPattern","qualifiedname":"io.wolfscript.api.inventory.helper.BannerPattern","type":"class","scope":"public","describe":"final","constructors":[{"title":"BannerPattern constructor","description":"BannerPattern constructor","scope":"public","name":"BannerPattern","args":[{"name":"color","type":"io.wolfscript.api.DyeColor","description":"color argument"},{"name":"pattern","type":"io.wolfscript.api.inventory.helper.BannerPatterns","description":"pattern argument"}]}],"methods":[{"title":"asCompoundTag method","description":"asCompoundTag method","scope":"public","return":"io.wolfscript.api.nbt.CompoundTag","name":"asCompoundTag","args":[]},{"title":"equals method","description":"equals method","scope":"public","describe":"final","return":"boolean","name":"equals","args":[{"name":"obj","type":"Object","description":"obj argument"}]},{"title":"Creates a BannerPattern from a {@link io.wolfscript.api.nbt.CompoundTag}","description":"Creates a BannerPattern from a {@link io.wolfscript.api.nbt.CompoundTag}","doc":{"return":["a new BannerPattern"],"throws":["java.lang.IllegalArgumentException if the tag given does not contain the proper Banner data"]},"scope":"public","describe":"static","return":"io.wolfscript.api.inventory.helper.BannerPattern","name":"fromCompoundTag","args":[{"name":"tag","type":"io.wolfscript.api.nbt.CompoundTag","description":"the tag to grab data from, the tag should be the one from within the Patterns list tag"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.DyeColor","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.NBTTagType"],"properties":[{"name":"Color","modifier":"readonly","args":[],"description":"Color property","return":"io.wolfscript.api.DyeColor","scope":"public","title":"Color property"},{"name":"Pattern","modifier":"readonly","args":[],"description":"Pattern property","return":"io.wolfscript.api.inventory.helper.BannerPatterns","scope":"public","title":"Pattern property"}]},"io.wolfscript.api.inventory.helper.BannerPatterns":{"namespace":"io.wolfscript.api.inventory.helper","title":"Banner Patterns","description":"Banner Patterns","doc":{"author":["Jason Jones"]},"name":"BannerPatterns","qualifiedname":"io.wolfscript.api.inventory.helper.BannerPatterns","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets a BannerPatterns from a String","description":"Gets a BannerPatterns from a String","doc":{"return":["the BannerPatterns if found; {@code null} if not found"]},"scope":"public","describe":"static","return":"io.wolfscript.api.inventory.helper.BannerPatterns","name":"fromString","args":[{"name":"pattern","type":"String","description":"the pattern to get"}]}],"imports":[],"enum":[{"code":"BASE","value":"","title":"BASE BannerPatterns","description":"BASE BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"SQUARE_BOTTOM_LEFT","value":"","title":"SQUARE_BOTTOM_LEFT BannerPatterns","description":"SQUARE_BOTTOM_LEFT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"SQUARE_BOTTOM_RIGHT","value":"","title":"SQUARE_BOTTOM_RIGHT BannerPatterns","description":"SQUARE_BOTTOM_RIGHT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"SQUARE_TOP_LEFT","value":"","title":"SQUARE_TOP_LEFT BannerPatterns","description":"SQUARE_TOP_LEFT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"SQUARE_TOP_RIGHT","value":"","title":"SQUARE_TOP_RIGHT BannerPatterns","description":"SQUARE_TOP_RIGHT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_BOTTOM","value":"","title":"STRIPE_BOTTOM BannerPatterns","description":"STRIPE_BOTTOM BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_TOP","value":"","title":"STRIPE_TOP BannerPatterns","description":"STRIPE_TOP BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_LEFT","value":"","title":"STRIPE_LEFT BannerPatterns","description":"STRIPE_LEFT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_RIGHT","value":"","title":"STRIPE_RIGHT BannerPatterns","description":"STRIPE_RIGHT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_CENTER","value":"","title":"STRIPE_CENTER BannerPatterns","description":"STRIPE_CENTER BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_MIDDLE","value":"","title":"STRIPE_MIDDLE BannerPatterns","description":"STRIPE_MIDDLE BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_DOWNRIGHT","value":"","title":"STRIPE_DOWNRIGHT BannerPatterns","description":"STRIPE_DOWNRIGHT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_DOWNLEFT","value":"","title":"STRIPE_DOWNLEFT BannerPatterns","description":"STRIPE_DOWNLEFT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRIPE_SMALL","value":"","title":"STRIPE_SMALL BannerPatterns","description":"STRIPE_SMALL BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"CROSS","value":"","title":"CROSS BannerPatterns","description":"CROSS BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"STRAIGHT_CROSS","value":"","title":"STRAIGHT_CROSS BannerPatterns","description":"STRAIGHT_CROSS BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"TRIANGLE_BOTTOM","value":"","title":"TRIANGLE_BOTTOM BannerPatterns","description":"TRIANGLE_BOTTOM BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"TRIANGLE_TOP","value":"","title":"TRIANGLE_TOP BannerPatterns","description":"TRIANGLE_TOP BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"TRIANGLES_BOTTOM","value":"","title":"TRIANGLES_BOTTOM BannerPatterns","description":"TRIANGLES_BOTTOM BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"TRIANGLES_TOP","value":"","title":"TRIANGLES_TOP BannerPatterns","description":"TRIANGLES_TOP BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"DIAGONAL_LEFT","value":"","title":"DIAGONAL_LEFT BannerPatterns","description":"DIAGONAL_LEFT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"DIAGONAL_RIGHT","value":"","title":"DIAGONAL_RIGHT BannerPatterns","description":"DIAGONAL_RIGHT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"DIAGONAL_LEFT_MIRROR","value":"","title":"DIAGONAL_LEFT_MIRROR BannerPatterns","description":"DIAGONAL_LEFT_MIRROR BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"DIAGONAL_RIGHT_MIRROR","value":"","title":"DIAGONAL_RIGHT_MIRROR BannerPatterns","description":"DIAGONAL_RIGHT_MIRROR BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"CIRCLE_MIDDLE","value":"","title":"CIRCLE_MIDDLE BannerPatterns","description":"CIRCLE_MIDDLE BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"RHOMBUS_MIDDLE","value":"","title":"RHOMBUS_MIDDLE BannerPatterns","description":"RHOMBUS_MIDDLE BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"HALF_VERTICAL","value":"","title":"HALF_VERTICAL BannerPatterns","description":"HALF_VERTICAL BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"HALF_HORIZONTAL","value":"","title":"HALF_HORIZONTAL BannerPatterns","description":"HALF_HORIZONTAL BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"HALF_VERTICAL_MIRROR","value":"","title":"HALF_VERTICAL_MIRROR BannerPatterns","description":"HALF_VERTICAL_MIRROR BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"HALF_HORIZONTAL_MIRROR","value":"","title":"HALF_HORIZONTAL_MIRROR BannerPatterns","description":"HALF_HORIZONTAL_MIRROR BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"BORDER","value":"","title":"BORDER BannerPatterns","description":"BORDER BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"CURLY_BORDER","value":"","title":"CURLY_BORDER BannerPatterns","description":"CURLY_BORDER BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"CREEPER","value":"","title":"CREEPER BannerPatterns","description":"CREEPER BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"GRADIENT","value":"","title":"GRADIENT BannerPatterns","description":"GRADIENT BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"GRADIENT_UP","value":"","title":"GRADIENT_UP BannerPatterns","description":"GRADIENT_UP BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"BRICKS","value":"","title":"BRICKS BannerPatterns","description":"BRICKS BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"SKULL","value":"","title":"SKULL BannerPatterns","description":"SKULL BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"FLOWER","value":"","title":"FLOWER BannerPatterns","description":"FLOWER BannerPatterns","doc":{"author":["Jason Jones"]}},{"code":"MOJANG","value":"","title":"MOJANG BannerPatterns","description":"MOJANG BannerPatterns","doc":{"author":["Jason Jones"]}}],"properties":[]},"io.wolfscript.api.inventory.helper.BookHelper":{"namespace":"io.wolfscript.api.inventory.helper","title":"BOOK! HELPER!","description":"BOOK! HELPER!","doc":{"author":["Jason (darkdiplomat)"]},"name":"BookHelper","qualifiedname":"io.wolfscript.api.inventory.helper.BookHelper","type":"class","scope":"public","extends":["ItemHelper"],"constructors":[],"methods":[{"title":"Checks if the give book can take Meta data","description":"Checks if the give book can take Meta data","doc":{"return":["{@code true} if Book; {@code false} if not /\n    public static boolean isBook(Item book) {\n        if (book == null) {\n            return false;\n        }\n        switch (book.getId()) {\n            case 340:\n            case 386:\n            case 387:\n            case 403:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /** Checks if the given Book can still be written in by a player","{@code true} if can be written in; {@code false} if not /\n    public static boolean isWritable(Item book) {\n        return book != null && book.getType() == ItemType.BookAndQuill;\n    }\n\n    /** Checks if the given Book has been signed","{@code true} if signed; {@code false} if not /\n    public static boolean isSigned(Item book) {\n        return book != null && book.getType() == ItemType.WrittenBook;\n    }\n\n    /** | Checks if the given Book is enchanted","{@code true} if enchanted; {@code false} if not /\n    public static boolean isEnchanted(Item book) {\n        return book != null && book.getType() == ItemType.EnchantedBook;\n    }\n\n    /** Checks if the given Book has pages","{@code true} if has pages; {@code false} if not /\n    public static boolean hasPages(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, false)) {\n            return false;\n        }\n        return !book.getDataTag().getListTag(\"pages\").isEmpty();\n    }\n\n    /** Gets the specified page number of the Book","the text of the page or {@code null} if invalid /\n    public static String getPage(Item book, int page) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return null;\n        }\n        if (!verifyTags(book, \"pages\", LIST, false)) {\n            return null;\n        }\n        if (!isValidPage(page, getPageCount(book))) {\n            return null;\n        }\n        return ((StringTag)book.getDataTag().getListTag(\"pages\").get(page)).getValue();\n    }\n\n    /** Gets a String array of pages from the book","String array of pages or null if no pages/not a book /\n    public static String[] getPages(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return new String[0];\n        }\n        if (!verifyTags(book, \"pages\", LIST, false)) {\n            return new String[0];\n        }\n        if (book.getDataTag().getListTag(\"pages\").isEmpty()) {\n            return new String[0];\n        }\n        ListTag<StringTag> pages_tags = book.getDataTag().getListTag(\"pages\");\n        int size = pages_tags.size();\n        String[] pages = new String[size];\n        for (int index = 0; index < size; index++) {\n            try {\n                pages[index] = pages_tags.get(index).getValue();\n            }\n            catch (Exception ex) {\n                // Older book format\n                Wolf.log.debug(\"Error decompiling ChatComponent on Book Page\", ex);\n                pages[index] = pages_tags.get(index).getValue();\n            }\n        }\n        return pages;\n    }\n\n    /** Adds pages to a writable/written book","{@code true} if all pages successfully added; {@code false} if all or some pages could not be added /\n    public static boolean addPages(Item book, String... pages) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        book.getDataTag().put(\"resolved\", true);\n        boolean success = true;\n        for (String page : pages) {\n            if (page == null) {\n                continue;\n            }\n            StringTag toAdd = PAGE_TITLE_AUTHOR.copy();\n            toAdd.setValue(correctPage(page));\n            success &= book.getDataTag().getListTag(\"pages\").add(toAdd);\n        }\n        return success;\n    }\n\n    /** Adds pages to a writable/written book","{@code true} if all pages successfully added; {@code false} if all or some pages could not be added /\n    public static boolean addPages(Item book, ChatComponent... pages) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        book.getDataTag().put(\"resolved\", true);\n        boolean success = true;\n        for (ChatComponent page : pages) {\n            if (page == null) {\n                continue;\n            }\n            StringTag toAdd = PAGE_TITLE_AUTHOR.copy();\n            toAdd.setValue(page.serialize());\n            success &= book.getDataTag().getListTag(\"pages\").add(toAdd);\n        }\n        return success;\n    }\n\n    /** Sets a page at the specified index","{@code true} if success; {@code false} if not /\n    public static boolean setPage(Item book, int page_index, String page) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        if (!isValidPage(page_index, getPageCount(book))) {\n            return false;\n        }\n        StringTag toSet = PAGE_TITLE_AUTHOR.copy();\n        toSet.setValue(correctPage(page));\n        book.getDataTag().getListTag(\"pages\").set(page_index, toSet);\n        return true;\n    }\n\n    /** Sets a page at the specified index","{@code true} if success; {@code false} if not /\n    public static boolean setPage(Item book, int page_index, ChatComponent page) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        if (!isValidPage(page_index, getPageCount(book))) {\n            return false;\n        }\n        StringTag toSet = PAGE_TITLE_AUTHOR.copy();\n        toSet.setValue(page.serialize());\n        book.getDataTag().getListTag(\"pages\").set(page_index, toSet);\n        return true;\n    }\n\n    /** Sets the pages of the book","{@code true} if successful; {@code false} if all or some of the pages couldn't be added /\n    public static boolean setPages(Item book, String... pages) {\n        if (book == null || pages == null || pages.length == 0 || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        ListTag<StringTag> pages_to_set = PAGES_TAG.copy(); // Don't bother checking, we are overriding anyways\n        boolean success = true;\n        for (String page : pages) {\n            if (page == null) {\n                continue;\n            }\n            StringTag toAdd = PAGE_TITLE_AUTHOR.copy();\n            toAdd.setValue(correctPage(page));\n            success &= pages_to_set.add(toAdd);\n        }\n        book.getDataTag().put(\"pages\", pages_to_set);\n        return success;\n    }\n\n    /** Sets the pages of the book","{@code true} if successful; {@code false} if all or some of the pages couldn't be added /\n    public static boolean setPages(Item book, ChatComponent... pages) {\n        if (book == null || pages == null || pages.length == 0 || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"pages\", LIST, true)) {\n            return false;\n        }\n        ListTag<StringTag> pages_to_set = PAGES_TAG.copy(); // Don't bother checking, we are overriding anyways\n        boolean success = true;\n        for (ChatComponent page : pages) {\n            if (page == null) {\n                continue;\n            }\n            StringTag toAdd = PAGE_TITLE_AUTHOR.copy();\n            toAdd.setValue(page.serialize());\n            success &= pages_to_set.add(toAdd);\n        }\n        book.getDataTag().put(\"pages\", pages_to_set);\n        return success;\n    }\n\n    /** Gets the page count of the book","the number of pages or -1 if not a book or no proper tags found /\n    public static int getPageCount(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return -1;\n        }\n        if (!verifyTags(book, \"pages\", LIST, false)) {\n            return -1;\n        }\n        return book.getDataTag().getListTag(\"pages\").size();\n    }\n\n    /** Checks the book for an author","{@code true} if has author; {@code false} if not /\n    public static boolean hasAuthor(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"author\", STRING, false)) {\n            return false;\n        }\n        return !book.getDataTag().getString(\"author\").isEmpty();\n    }\n\n    /** Gets the Author of the book","the author or null /\n    public static String getAuthor(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return null;\n        }\n        if (!verifyTags(book, \"author\", STRING, false)) {\n            return null;\n        }\n        return book.getDataTag().getString(\"author\");\n    }\n\n    /** Sets the author of the book","true if successful /\n    public static boolean setAuthor(Item book, String author) {\n        if (book == null || author == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"author\", STRING, true)) {\n            return false;\n        }\n        ((StringTag)book.getDataTag().get(\"author\")).setValue(correctAuthor(author));\n        return true;\n    }\n\n    /** Checks if the book has a title","true if has title; false if not /\n    public static boolean hasTitle(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"title\", STRING, false)) {\n            return false;\n        }\n        return !book.getDataTag().getString(\"title\").isEmpty();\n    }\n\n    /** Gets the title of a book","the title or null /\n    public static String getTitle(Item book) {\n        if (book == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return null;\n        }\n        if (!verifyTags(book, \"title\", STRING, false)) {\n            return null;\n        }\n        return book.getDataTag().getString(\"title\");\n    }\n\n    /** Sets the title of a book","true if successful or false if not /\n    public static boolean setTitle(Item book, String title) {\n        if (book == null || title == null || (book.getType() != ItemType.BookAndQuill && book.getType() != ItemType.WrittenBook)) {\n            return false;\n        }\n        if (!verifyTags(book, \"title\", STRING, true)) {\n            return false;\n        }\n        ((StringTag)book.getDataTag().get(\"title\")).setValue(correctTitle(title));\n        return true;\n    }\n\n    /** Converts a Book&Quill into a Written Book","the new book or original item if it wasn't a book /\n    public static Item lockBook(Item book) {\n        if (book != null && book.getType() == ItemType.BookAndQuill) {\n            book.setId(ItemType.WrittenBook.getId());\n        }\n        return book;\n    }\n\n    /** Converts a WrittenBook back into a Book&Quill","the new Book or original item if it wasn't a book /\n    public static Item unlockBook(Item book) {\n        if (book != null && book.getType() == ItemType.WrittenBook) {\n            book.setId(ItemType.BookAndQuill.getId());\n        }\n        return book;\n    }\n\n    /** Checks the book for stored enchantments","true if contains enchantments; false if not /\n    public static boolean containsEnchantments(Item book) {\n        if (book == null || book.getType() != ItemType.EnchantedBook) {\n            return false;\n        }\n        return verifyTags(book, \"StoredEnchantments\", LIST, false);\n    }\n\n    /** Gets the enchantments of the Book","array of Enchantments or null if the Book has none /\n    public static Enchantment[] getEnchantments(Item book) {\n        if (book == null || book.getType() != ItemType.EnchantedBook) {\n            return null;\n        }\n        if (!verifyTags(book, \"StoredEnchantments\", LIST, false)) {\n            return null;\n        }\n        ListTag<CompoundTag> stored_enchantments = book.getDataTag().getListTag(\"StoredEnchantments\");\n        Enchantment[] enchantments = new Enchantment[stored_enchantments.size()];\n        for (int index = 0; index < stored_enchantments.size(); index++) {\n            CompoundTag stored_enchantment = stored_enchantments.get(index);\n            enchantments[index] = Wolf.factory().getItemFactory().newEnchantment(stored_enchantment.getShort(\"id\"), stored_enchantment.getShort(\"lvl\"));\n        }\n        return enchantments;\n    }\n\n    /** Sets the enchantments of the book","true if successful; false if not /\n    public static boolean setEnchantments(Item book, Enchantment... enchantments) {\n        if (book == null || enchantments == null || enchantments.length == 0) {\n            return false;\n        }\n        if (book.getType() != ItemType.EnchantedBook) {\n            if (book.getType() != ItemType.Book) {\n                return false;\n            }\n            book.setId(ItemType.EnchantedBook.getId());\n        }\n        if (!verifyTags(book, \"StoredEnchantments\", LIST, true)) {\n            return false;\n        }\n        boolean success = true;\n        ListTag<CompoundTag> sto_ench = STORED_ENCH_TAG.copy();\n        for (Enchantment ench : enchantments) {\n            if (ench == null) {\n                continue;\n            }\n            CompoundTag ench_tag = ENCH_TAG.copy();\n            ench_tag.put(\"lvl\", ench.getLevel());\n            ench_tag.put(\"id\", ench.getType().getId());\n            success &= sto_ench.add(ench_tag);\n        }\n        book.getDataTag().put(\"StoredEnchantments\", sto_ench);\n        return success;\n    }\n\n    /**","true if successful; false if not /\n    public static boolean addEnchantments(Item book, Enchantment... enchantments) {\n        if (book == null || enchantments == null || enchantments.length == 0) {\n            return false;\n        }\n        if (book.getType() != ItemType.EnchantedBook) {\n            if (book.getType() != ItemType.Book) {\n                return false;\n            }\n            return setEnchantments(book, enchantments);\n        }\n        if (!verifyTags(book, \"StoredEnchantments\", LIST, true)) {\n            return false;\n        }\n        boolean success = true;\n        ListTag<CompoundTag> sto_ench = book.getDataTag().getListTag(\"StoredEnchantments\");\n        for (Enchantment ench : enchantments) {\n            if (ench == null) {\n                continue;\n            }\n            CompoundTag ench_tag = ENCH_TAG.copy();\n            ench_tag.put(\"lvl\", ench.getLevel());\n            ench_tag.put(\"id\", (short)ench.getType().getId());\n            success &= sto_ench.add(ench_tag);\n        }\n        return success;\n    }\n\n    /** Removes the give enchantments from the book","true if successful; false if not /\n    public static boolean removeEnchantments(Item book, Enchantment... enchantments) {\n        if (book == null || enchantments == null || enchantments.length == 0 || book.getType() != ItemType.EnchantedBook) {\n            return false;\n        }\n        if (!verifyTags(book, \"StoredEnchantments\", LIST, false)) {\n            return false;\n        }\n        boolean success = true;\n        ListTag<CompoundTag> sto_enchs = book.getDataTag().getListTag(\"StoredEnchantments\");\n        Iterator<CompoundTag> tagItr = sto_enchs.iterator();\n        while (tagItr.hasNext()) {\n            CompoundTag sto_ench = tagItr.next();\n            boolean found = false;\n            for (Enchantment ench : enchantments) {\n                if (sto_ench.getShort(\"id\") == ench.getType().getId() && sto_ench.getShort(\"lvl\") == ench.getLevel()) {\n                    tagItr.remove();\n                    found = true;\n                }\n            }\n            success &= found;\n        }\n        return success;\n    }\n\n    /** Removes all enchantments from the book","true if successful; false if not"],"deprecated":["As of release WolfLib 1.2.0, replaced by {@link #addEnchantments(Item, Enchantment...)} /\n    @Deprecated\n    public static boolean addEncahntments(Item book, Enchantment... enchantments) {\n        return addEnchantments(book, enchantments);\n    }\n\n    /** Adds enchantments to the book"]},"scope":"public","describe":"static","return":"boolean","name":"removeAllEnchantments","args":[{"name":"book","type":"io.wolfscript.api.inventory.Item","description":"the book to check"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.factory.ChatComponentFactory","io.wolfscript.api.inventory.Enchantment","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.ListTag","io.wolfscript.api.nbt.StringTag","java.util.Iterator","io.wolfscript.api.nbt.NBTTagType.LIST","io.wolfscript.api.nbt.NBTTagType.STRING"],"properties":[]},"io.wolfscript.api.inventory.helper.FireworkHelper":{"namespace":"io.wolfscript.api.inventory.helper","title":"class FireworkHelper","description":"class FireworkHelper","name":"FireworkHelper","qualifiedname":"io.wolfscript.api.inventory.helper.FireworkHelper","type":"class","scope":"public","describe":"final","extends":["ItemHelper"],"constructors":[],"methods":[{"title":"The FireworkStar Explosion Types","description":"The FireworkStar Explosion Types","doc":{"author":["Jason (darkdiplomat) /\n    public enum ExplosionType {\n        /** No explosion data set /\n        NONE(-1),\n        //\n        /** Unknown Explosion (possible a new explosion) /\n        UNKNOWN(-1),\n        //\n        /** Small Explosion /\n        SMALL(0),\n        //\n        /** Large Explosion /\n        LARGE(1),\n        //\n        /** Star-Shaped Explosion /\n        STAR(2),\n        //\n        /** Creeper-Face Explosion /\n        CREEPER(3),\n        //\n        /** Burst Explosion /\n        BURST(4),\n        //\n        ;\n\n        private final byte id;\n\n        private ExplosionType(int id) {\n            this.id = (byte)id;\n        }\n\n        /** Gets the Explosion ID"],"return":["the Explosion ID /\n        public byte explosionId() {\n            return id;\n        }\n\n        /** Gets an ExplosionType from the Type ID","the ExplosionType /\n        public static ExplosionType fromId(byte id) {\n            switch (id) {\n                case 0:\n                    return ExplosionType.SMALL;\n                case 1:\n                    return ExplosionType.LARGE;\n                case 2:\n                    return ExplosionType.STAR;\n                case 3:\n                    return ExplosionType.CREEPER;\n                case 4:\n                    return ExplosionType.BURST;\n                default:\n                    return ExplosionType.UNKNOWN;\n            }\n        }\n    }\n\n    /** Sets the {@link ExplosionType} type of the FireworkStar","the {@link ExplosionType} of the FireworkStar /\n    public static ExplosionType getStarExplosionType(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return null;\n        }\n        if (!verifyTags(fireworkStar, \"Explosion\", COMPOUND, false)) {\n            return ExplosionType.NONE;\n        }\n        if (getExplosionTag(fireworkStar).containsKey(\"Type\")) {\n            return ExplosionType.fromId(getExplosionTag(fireworkStar).getByte(\"Type\"));\n        }\n        return ExplosionType.NONE;\n    }\n\n    /** Gets whether the FireworkStar leaves a trail","{@code true} if trails; {@code false} if not /\n    public static boolean doesTrail(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return false;\n        }\n        if (!verifyTags(fireworkStar, \"Explosion\", COMPOUND, false)) {\n            return false;\n        }\n        if (getExplosionTag(fireworkStar).containsKey(\"Trail\")) { // Test for tag\n            return getExplosionTag(fireworkStar).getBoolean(\"Trail\"); // Get value\n        }\n        getExplosionTag(fireworkStar).put(\"Trail\", false); // Initialize tag for later use\n        return false;\n    }\n\n    /** Sets whether the FireworkStar leaves a trail","{@code true} if does flicker; {@code false} if not /\n    public static boolean doesFlicker(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return false;\n        }\n        if (!verifyTags(fireworkStar, \"Explosion\", COMPOUND, false)) {\n            return false;\n        }\n        if (getExplosionTag(fireworkStar).containsKey(\"Flicker\")) { // Test for tag\n            return getExplosionTag(fireworkStar).getBoolean(\"Flicker\"); // Get value\n        }\n        getExplosionTag(fireworkStar).put(\"Flicker\", false); // Initialize tag for later use\n        return false;\n    }\n\n    /** Sets whether the FireworkStar does flicker","a {@link io.wolfscript.api.DyeColor} array if there are colors; {@code null} if no colors /\n    public static DyeColor[] getStarColors(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return null;\n        }\n        int[] colors = getStarColorsRaw(fireworkStar);\n        if (colors != null) {\n            DyeColor[] dyeColors = new DyeColor[colors.length];\n            for (int index = 0; index < colors.length; index++) {\n                dyeColors[index] = DyeColor.fromDecimalCode(colors[index]);\n            }\n            return dyeColors;\n        }\n        return null;\n    }\n\n    /** Gets the raw decimal colors of the FireworkStar","a {@code int[]} of colors or empty /\n    public static int[] getStarColorsRaw(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return new int[0];\n        }\n        if (!verifyTags(fireworkStar, \"Explosion\", COMPOUND, false)) {\n            return new int[0];\n        }\n        if (getExplosionTag(fireworkStar).containsKey(\"Colors\")) {\n            return getExplosionTag(fireworkStar).getIntArray(\"Colors\");\n        }\n        return new int[0];\n    }\n\n    /** Sets the colors of the FireworkStar based on the given {@link io.wolfscript.api.DyeColor}s<br> Giving {@link DyeColor#CUSTOM} will result it the color being ignored.<br> For custom colors use {@link #setStarColorsRaw}","a {@link io.wolfscript.api.DyeColor} array if there are colors; {@code null} if no colors /\n    public static DyeColor[] getStarFadeColors(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return null;\n        }\n        int[] colors = getStarFadeColorsRaw(fireworkStar);\n        if (colors != null) {\n            DyeColor[] dyeColors = new DyeColor[colors.length];\n            for (int index = 0; index < colors.length; index++) {\n                dyeColors[index] = DyeColor.fromDecimalCode(colors[index]);\n            }\n            return dyeColors;\n        }\n        return null;\n    }\n\n    /** Gets the raw decimal fade colors of the FireworkStar","a {@code int[]} if there are colors; {@code null} if no colors /\n    public static int[] getStarFadeColorsRaw(Item fireworkStar) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return null;\n        }\n        if (!verifyTags(fireworkStar, \"Explosion\", COMPOUND, false)) {\n            return null;\n        }\n        if (getExplosionTag(fireworkStar).containsKey(\"FadeColors\")) {\n            return getExplosionTag(fireworkStar).getIntArray(\"FadeColors\");\n        }\n        return null;\n    }\n\n    /** Sets the fade color(s) of the FireworkStar based on the given {@link io.wolfscript.api.DyeColor}s<br> Giving {@link DyeColor#CUSTOM} will result it the color being ignored.<br> For custom colors use {@link #setStarFadeColorsRaw}","{@code true} if has data; {@code false} if not /\n    public static boolean hasFlightData(Item fireworkRocket) {\n        if (fireworkRocket == null || fireworkRocket.getType() != ItemType.FireworkRocket) {\n            return false;\n        }\n        if (!verifyTags(fireworkRocket, \"Fireworks\", COMPOUND, false)) {\n            return false;\n        }\n        return fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").containsKey(\"Flight\");\n    }\n\n    /** Gets the Flight Duration of the FireworkRocket<br> Flight Duration is normally a byte between 1 and 3","flight duration byte or {@code 0} if flight duration was not initialized /\n    public static byte getFlightDuration(Item fireworkRocket) {\n        if (fireworkRocket == null || fireworkRocket.getType() != ItemType.FireworkRocket) {\n            return -1;\n        }\n        if (hasFlightData(fireworkRocket)) {\n            return fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").getByte(\"Flight\");\n        }\n        return 0;\n    }\n\n    /** Gets the Flight Duration of the FireworkRocket<br> Flight Duration is normally a byte between 1 and 3<br>","the FireworkStar {@link io.wolfscript.api.inventory.Item} array /\n    public static Item[] getAttachedFireworkStars(Item fireworkRocket) {\n        if (fireworkRocket == null || fireworkRocket.getType() != ItemType.FireworkRocket) {\n            return null;\n        }\n        if (!verifyTags(fireworkRocket, \"Fireworks\", COMPOUND, false)) {\n            return null;\n        }\n        if (!fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").containsKey(\"Explosions\")) {\n            return null;\n        }\n        ListTag<BaseTag> explosions = fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").getListTag(\"Explosions\");\n        if (!explosions.isEmpty()) {\n            ArrayList<Item> stars = new ArrayList<Item>();\n            for (BaseTag explosion : explosions) {\n                if (explosion instanceof CompoundTag) {\n                    Item fireworkStar = fireworkStarBase.clone();\n                    fireworkStar.getDataTag().put(\"Explosion\", explosion);\n                    stars.add(fireworkStar);\n                }\n            }\n            return stars.toArray(new Item[stars.size()]);\n        }\n        return null;\n    }\n\n    /** Attaches the Explosion tag from the FireworkStar {@link io.wolfscript.api.inventory.Item}(s)<br> The Explosion Tag is copied from the FireworkStar.<br> Further manipulation on the explosion tag in the FireworkStar will have no effect on the rocket.","{@code true} if successfully removed all FireworkStars; {@code false} if one or more FireworkStars weren't removed /\n    public static boolean removeFireworkStars(Item fireworkRocket, Item... fireworkStars) {\n        if (fireworkRocket == null || fireworkRocket.getType() != ItemType.FireworkRocket) {\n            return false;\n        }\n        if (!verifyTags(fireworkRocket, \"Fireworks\", COMPOUND, false)) {\n            return false;\n        }\n        if (!fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").containsKey(\"Explosions\")) {\n            return false;\n        }\n        boolean toRet = true;\n        for (Item fireworkStar : fireworkStars) {\n            if (!fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").getListTag(\"Explosions\").remove(fireworkStar.getDataTag().getCompoundTag(\"Explosion\"))) {\n                // We need to do some magic\n                ListTag<CompoundTag> explosions = fireworkRocket.getDataTag().getCompoundTag(\"Fireworks\").getListTag(\"Explosions\");\n                Iterator<CompoundTag> expItr = explosions.iterator();\n                boolean found = false;\n                while (expItr.hasNext()) {\n                    if (fireworkStar.getDataTag().getCompoundTag(\"Explosion\").equals(expItr.next())) {\n                        expItr.remove();\n                        found = true;\n                        break;\n                    }\n                }\n                toRet &= found;\n            }\n        }\n        return toRet;\n    }\n\n    /** Gets the Explosion tag of a Firework Star","the {@link io.wolfscript.api.nbt.CompoundTag} named Explosion"],"see":["<a href=\"http://www.mathsisfun.com/hexadecimal-decimal-colors.html\">http://www.mathsisfun.com/hexadecimal-decimal-colors.html</a> /\n    public static void setStarColorsRaw(Item fireworkStar, int... colors) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return;\n        }\n        if (colors == null || colors.length < 1) {\n            return;\n        }\n        if (verifyTags(fireworkStar, \"Explosion\", COMPOUND, true)) {\n            for (int index = 0; index < colors.length; index++) {\n                colors[index] = MathHelp.setInRange(colors[index], 0, 0xFFFFFF); // if the color is greater than hex:FFFFFF (dec: 16777215) or less than 0, its invalid and needs adjusted\n            }\n            getExplosionTag(fireworkStar).put(\"Colors\", colors);\n        }\n    }\n\n    /** Adds a color to the FireworkStar based on {@link DyeColor}<br> NOTE: If the {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken","<a href=\"http://www.mathsisfun.com/hexadecimal-decimal-colors.html\">http://www.mathsisfun.com/hexadecimal-decimal-colors.html</a> /\n    public static void addStarColorsRaw(Item fireworkStar, int... colors) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return;\n        }\n        if (colors == null || colors.length < 1) {\n            return;\n        }\n        if (verifyTags(fireworkStar, \"Explosion\", COMPOUND, true)) {\n            for (int index = 0; index < colors.length; index++) {\n                colors[index] = MathHelp.setInRange(colors[index], 0, 0xFFFFFF); // if the color is greater than hex:FFFFFF (dec: 16777215) or less than 0, its invalid and needs adjusted\n            }\n            int[] rawColors = getExplosionTag(fireworkStar).containsKey(\"Colors\") ? getExplosionTag(fireworkStar).getIntArray(\"Colors\") : null;\n            if (rawColors != null) {\n                getExplosionTag(fireworkStar).put(\"Colors\", ToolBox.arrayMerge(rawColors, colors));\n            }\n            else {\n                getExplosionTag(fireworkStar).put(\"Colors\", colors);\n            }\n        }\n    }\n\n    /** Removes a color from the FireworkStar<br> NOTE: if the {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed","<a href=\"http://www.mathsisfun.com/hexadecimal-decimal-colors.html\">http://www.mathsisfun.com/hexadecimal-decimal-colors.html</a> /\n    public static void setStarFadeColorsRaw(Item fireworkStar, int... colors) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return;\n        }\n        if (colors == null || colors.length < 1) {\n            return;\n        }\n        if (verifyTags(fireworkStar, \"Explosion\", COMPOUND, true)) {\n            for (int index = 0; index < colors.length; index++) {\n                colors[index] = MathHelp.setInRange(colors[index], 0, 0xFFFFFF); // if the color is greater than hex:FFFFFF (dec: 16777215) or less than 0, its invalid and needs adjusted\n            }\n            getExplosionTag(fireworkStar).put(\"FadeColors\", colors);\n        }\n    }\n\n    /** Adds a color to the FireworkStar based on {@link DyeColor}<br> NOTE: If the {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken","<a href=\"http://www.mathsisfun.com/hexadecimal-decimal-colors.html\">http://www.mathsisfun.com/hexadecimal-decimal-colors.html</a> /\n    public static void addStarFadeColorsRaw(Item fireworkStar, int... colors) {\n        if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {\n            return;\n        }\n        if (colors == null || colors.length < 1) {\n            return;\n        }\n        if (verifyTags(fireworkStar, \"Explosion\", COMPOUND, true)) {\n            for (int index = 0; index < colors.length; index++) {\n                colors[index] = MathHelp.setInRange(colors[index], 0, 0xFFFFFF); // if the color is greater than hex:FFFFFF (dec: 16777215) or less than 0, its invalid and needs adjusted\n            }\n            int[] rawColors = getExplosionTag(fireworkStar).containsKey(\"FadeColors\") ? getExplosionTag(fireworkStar).getIntArray(\"FadeColors\") : null;\n            if (rawColors != null) {\n                getExplosionTag(fireworkStar).put(\"FadeColors\", ToolBox.arrayMerge(rawColors, colors));\n            }\n            else {\n                getExplosionTag(fireworkStar).put(\"FadeColors\", colors);\n            }\n        }\n    }\n\n    /** Removes fade color(s) from the FireworkStar<br> NOTE: if the {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed"]},"scope":"public","describe":"static","return":"io.wolfscript.api.nbt.CompoundTag","name":"getExplosionTag","args":[{"name":"fireworkStar","type":"io.wolfscript.api.inventory.Item","description":"the FireworkStar {@link io.wolfscript.api.inventory.Item}"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.MathHelp","io.wolfscript.ToolBox","io.wolfscript.api.DyeColor","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType","io.wolfscript.api.nbt.BaseTag","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.ListTag","java.util.ArrayList","java.util.Iterator","io.wolfscript.api.nbt.NBTTagType.COMPOUND"],"properties":[]},"io.wolfscript.api.inventory.helper.LeatherArmorHelper":{"namespace":"io.wolfscript.api.inventory.helper","title":"Leather Armor Helper","description":"Leather Armor Helper","doc":{"author":["Jason (darkdiplomat)"]},"name":"LeatherArmorHelper","qualifiedname":"io.wolfscript.api.inventory.helper.LeatherArmorHelper","type":"class","scope":"public","constructors":[],"methods":[{"title":"Checks if the specified {@link io.wolfscript.api.inventory.Item} is Leather armor","description":"Checks if the specified {@link io.wolfscript.api.inventory.Item} is Leather armor","doc":{"return":["{@code true} if leather armor; {@code false} if not /\n    public static boolean isLeatherArmor(Item leather_armor) {\n        if (leather_armor == null) {\n            return false;\n        }\n        switch (leather_armor.getId()) {\n            case 298:\n            case 299:\n            case 300:\n            case 301:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /** Checks if the Leather Armor has color","{@code true} if colored; {@code false} if not /\n    public static boolean isColored(Item leather_armor) {\n        if (!isLeatherArmor(leather_armor)) {\n            return false;\n        }\n        return ColoredItemHelper.isColored(leather_armor);\n    }\n\n    /** Gets the color of the Leather armor","the color of the armor or -1 if there is no color /\n    public static int getColor(Item leather_armor) {\n        if (!isLeatherArmor(leather_armor)) {\n            return -1;\n        }\n        return ColoredItemHelper.getColor(leather_armor);\n    }\n\n    /** Sets the color of the armor based on an RGB value"]},"scope":"public","describe":"static","return":"void","name":"setColor","args":[{"name":"leather_armor","type":"io.wolfscript.api.inventory.Item","description":"the {@link io.wolfscript.api.inventory.Item} to be checked"},{"name":"red","type":"int","description":"the red color value"},{"name":"green","type":"int","description":"the green color value"},{"name":"blue","type":"int","description":"the blue color value"}]}],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.inventory.helper.PotionItemHelper":{"namespace":"io.wolfscript.api.inventory.helper","title":"Potion Item Helper!","description":"Potion Item Helper!","doc":{"author":["Jason (darkdiplomat)"]},"name":"PotionItemHelper","qualifiedname":"io.wolfscript.api.inventory.helper.PotionItemHelper","type":"class","scope":"public","extends":["ItemHelper"],"constructors":[],"methods":[{"title":"Checks a Item for being a Potion","description":"Checks a Item for being a Potion","doc":{"return":["{@code true} if Potion; {@code false} if not /\n    public static boolean isPotion(Item potion) {\n        return potion != null && potion.getType() == Potion;\n    }\n\n    /** Checks a Potion for custom {@link io.wolfscript.api.potion.PotionEffect}(s)","{@code true} if have custom effect; {@code false} if not /\n    public static boolean hasCustomPotionEffects(Item potion) {\n        if (!isPotion(potion)) {\n            return false;\n        }\n        if (!verifyTags(potion, \"CustomPotionEffects\", LIST, false)) {\n            return false;\n        }\n        return !potion.getDataTag().getListTag(\"CustomPotionEffects\").isEmpty();\n    }\n\n    /** Gets an array of {@link io.wolfscript.api.potion.PotionEffect} attached to the Potion if any","the {@link io.wolfscript.api.potion.PotionEffect} array or {@code null} if no effects /\n    public static PotionEffect[] getCustomPotionEffects(Item potion) {\n        if (!isPotion(potion)) {\n            return null;\n        }\n        if (!verifyTags(potion, \"CustomPotionEffects\", LIST, false)) {\n            return null;\n        }\n        if (potion.getDataTag().getListTag(\"CustomPotionEffects\").isEmpty()) {\n            return null;\n        }\n        ListTag<CompoundTag> effects = potion.getDataTag().getListTag(\"CustomPotionEffects\");\n        PotionEffect[] potion_effects = new PotionEffect[effects.size()];\n        for (int index = 0; index < effects.size(); index++) {\n            CompoundTag effect = effects.get(index);\n            potion_effects[index] = Wolf.factory().getPotionFactory().newPotionEffect(effect.getByte(\"Id\"), effect.getInt(\"Duration\"), effect.getByte(\"Amplifier\"), effect.getBoolean(\"Ambient\"));\n        }\n        return potion_effects;\n    }\n\n    /** Adds custom {@link io.wolfscript.api.potion.PotionEffect}(s) to the Potion {@link io.wolfscript.api.inventory.Item}","{@code true} if successful; {@code false} if not /\n    public static boolean addCustomPotionEffects(Item potion, PotionEffect... effects) {\n        if (!isPotion(potion) || effects == null || effects.length <= 0) {\n            return false;\n        }\n        if (!verifyTags(potion, \"CustomPotionEffects\", LIST, true)) {\n            return false;\n        }\n        ListTag<CompoundTag> potion_effects = potion.getDataTag().getListTag(\"CustomPotionEffects\");\n        boolean success = true;\n        for (PotionEffect effect : effects) {\n            if (effect == null) {\n                continue;\n            }\n            CompoundTag potion_effect = TAG.copy();\n            potion_effect.put(\"Id\", (byte)effect.getPotionID());\n            potion_effect.put(\"Duration\", effect.getDuration());\n            potion_effect.put(\"Amplifier\", (byte)effect.getAmplifier());\n            potion_effect.put(\"Ambient\", effect.isAmbient());\n            success &= potion_effects.add(potion_effect);\n        }\n        return success;\n    }\n\n    /** Sets custom {@link io.wolfscript.api.potion.PotionEffect}(s) to the Potion {@link io.wolfscript.api.inventory.Item}","{@code true} if successful; {@code false} if not /\n    public static boolean setCustomPotionEffects(Item potion, PotionEffect... effects) {\n        if (!isPotion(potion) || effects == null || effects.length <= 0) {\n            return false;\n        }\n        if (!verifyTags(potion, \"CustomPotionEffects\", LIST, true)) {\n            return false;\n        }\n        ListTag<CompoundTag> potion_effects = potion.getDataTag().getListTag(\"CustomPotionEffects\");\n        potion_effects.clear();\n        boolean success = true;\n        for (PotionEffect effect : effects) {\n            if (effect == null) {\n                continue;\n            }\n            CompoundTag potion_effect = TAG.copy();\n            potion_effect.put(\"Id\", (byte)effect.getPotionID());\n            potion_effect.put(\"Duration\", effect.getDuration());\n            potion_effect.put(\"Amplifier\", (byte)effect.getAmplifier());\n            potion_effect.put(\"Ambient\", effect.isAmbient());\n            success &= potion_effects.add(potion_effect);\n        }\n        return success;\n    }\n\n    /** Removes specified custom {@link io.wolfscript.api.potion.PotionEffect}(s) from the Potion","{@code true} if successful; {@code false} if not /\n    public static boolean removeCustomPotionEffects(Item potion, PotionEffect... effects) {\n        if (!isPotion(potion) || effects == null || effects.length <= 0) {\n            return false;\n        }\n        if (!verifyTags(potion, \"CustomPotionEffects\", LIST, false)) {\n            return false;\n        }\n        ListTag<CompoundTag> custom_effects = potion.getDataTag().getListTag(\"CustomPotionEffects\");\n        Iterator<CompoundTag> tagItr = custom_effects.iterator();\n        boolean success = true;\n        while (tagItr.hasNext()) {\n            CompoundTag custom_effect = tagItr.next();\n            boolean found = false;\n            for (PotionEffect effect : effects) {\n                if (custom_effect.getByte(\"Id\") == effect.getPotionID() && custom_effect.getInt(\"Duration\") == effect.getDuration() &&\n                        custom_effect.getByte(\"Amplifier\") == effect.getPotionID() && custom_effect.getBoolean(\"Ambient\") == effect.isAmbient()) {\n                    tagItr.remove();\n                    found = true;\n                }\n            }\n            success &= found;\n        }\n        return success;\n    }\n\n    /** Removes all custom {@link io.wolfscript.api.potion.PotionEffect}(s) from the Potion","{@code true} if successful; {@code false} if not"]},"scope":"public","describe":"static","return":"boolean","name":"removeAllCustomPotionEffects","args":[{"name":"potion","type":"io.wolfscript.api.inventory.Item","description":"the {@link io.wolfscript.api.inventory.Item} to check"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.inventory.Item","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.ListTag","io.wolfscript.api.potion.PotionEffect","java.util.Iterator","io.wolfscript.api.inventory.ItemType.Potion","io.wolfscript.api.nbt.NBTTagType.LIST"],"properties":[]},"io.wolfscript.api.inventory.helper.SkullHelper":{"namespace":"io.wolfscript.api.inventory.helper","title":"Skull helper","description":"Skull helper","doc":{"author":["Jason (darkdiplomat)"]},"name":"SkullHelper","qualifiedname":"io.wolfscript.api.inventory.helper.SkullHelper","type":"class","scope":"public","extends":["ItemHelper"],"constructors":[],"methods":[{"title":"Skeleton Skull","description":"Skeleton Skull /\n        SKELETON,\n        //\n        /** Wither Skull /\n        WITHER,\n        //\n        /** Zombie Skull /\n        ZOMBIE,\n        //\n        /** Player Skull /\n        PLAYER,\n        //\n        /** Creeper Skull /\n        CREEPER,\n        //\n        ;\n    }\n\n    /** Checks if the Skull has a owner","doc":{"return":["{@code true} if has owner; {@code false} if not /\n    public static boolean hasOwner(Item skull) {\n        if (skull == null || !validSkull(skull.getType()) || getSkullType(skull) != SkullType.PLAYER) {\n            return false;\n        }\n        if (!verifyTags(skull, \"SkullOwner\", COMPOUND, false)) {\n            if (!verifyTags(skull, \"SkullOwner\", STRING, false)) {\n                String owner = skull.getDataTag().getString(\"SkullOwner\");\n                return !owner.isEmpty();\n            }\n            return false;\n        }\n        return skull.getDataTag().getCompoundTag(\"SkullOwner\").containsKey(\"Name\", STRING);\n    }\n\n    /** Gets the name of the owner if present","the owner's name or {@code null} if no owner /\n    public static String getOwner(Item skull) {\n        if (skull == null || !validSkull(skull.getType()) || getSkullType(skull) != SkullType.PLAYER) {\n            return null;\n        }\n        if (!verifyTags(skull, \"SkullOwner\", COMPOUND, false)) {\n            if (!verifyTags(skull, \"SkullOwner\", STRING, false)) {\n                return skull.getDataTag().getString(\"SkullOwner\");\n            }\n            return null;\n        }\n        return skull.getDataTag().getCompoundTag(\"SkullOwner\").containsKey(\"Name\", STRING) ? skull.getDataTag().getCompoundTag(\"SkullOwner\").getString(\"Name\") : null;\n    }\n\n    /** Gets the profile of the owner if present","the owner's {@link com.mojang.authlib.GameProfile} or {@code null} if no owner /\n    public static GameProfile getOwnerProfile(Item skull) {\n        if (skull == null || !validSkull(skull.getType()) || getSkullType(skull) != SkullType.PLAYER) {\n            return null;\n        }\n        if (!verifyTags(skull, \"SkullOwner\", COMPOUND, false)) {\n            return null;\n        }\n        return Wolf.jsonNBT().gameProfileFromNBT(skull.getDataTag().getCompoundTag(\"SkullOwner\"));\n    }\n\n    /** Sets the owner of the skull.<br> Providing a null owner will remove the current owner","the SkullType"]},"scope":"public","describe":"static","return":"SkullType","name":"getSkullType","args":[{"name":"skull","type":"io.wolfscript.api.inventory.Item","description":"the skull {@link io.wolfscript.api.inventory.Item}"}]}],"imports":["com.mojang.authlib.GameProfile","io.wolfscript.Wolf","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType","java.util.UUID","io.wolfscript.api.nbt.NBTTagType.COMPOUND","io.wolfscript.api.nbt.NBTTagType.STRING"],"properties":[]},"io.wolfscript.api.inventory.recipes.0":{"namespace":"io.wolfscript.api.inventory","title":"Classes and interfaces for namespace io.wolfscript.api.inventory.recipes","description":"Classes and interfaces for namespace io.wolfscript.api.inventory.recipes","name":"recipes","qualifiedname":"io.wolfscript.api.inventory.recipes.0","packagename":"io.wolfscript.api.inventory.recipes","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.inventory.recipes.CraftingRecipe","io.wolfscript.api.inventory.recipes.RecipeRow","io.wolfscript.api.inventory.recipes.SmeltRecipe"],"interfaces":["io.wolfscript.api.inventory.recipes.Recipe","io.wolfscript.api.inventory.recipes.ShapedRecipe","io.wolfscript.api.inventory.recipes.ShapelessRecipe"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.inventory.recipes.CraftingRecipe":{"namespace":"io.wolfscript.api.inventory.recipes","title":"Crafting recipe helper","description":"Crafting recipe helper","doc":{"author":["Jason (darkdiplomat)"]},"name":"CraftingRecipe","qualifiedname":"io.wolfscript.api.inventory.recipes.CraftingRecipe","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"equals method","description":"equals method","scope":"public","describe":"final","return":"boolean","name":"equals","args":[{"name":"obj","type":"Object","description":"obj argument"}]}],"imports":["io.wolfscript.api.inventory.Item"],"properties":[{"name":"Items","modifier":"readonly","args":[],"description":"Get: Constructs a new SHAPED CraftingRecipe","doc":{"param":["result the {@link Item} result of the recipe","rows the {@link RecipeRow}s that make up the recipe /\n    public CraftingRecipe(Item result, RecipeRow... rows) {\n        this.result = result;\n        this.rows = rows;\n        this.hasShape = true;\n    }\n\n    /** Constructs a new SHAPELESS CraftingRecipe","result the {@link Item} result of the recipe","items the {@link Item}s that are needed to make the result /\n    public CraftingRecipe(Item result, Item... items) {\n        this.result = result;\n        this.items = items;\n    }\n\n    /** Constructs a new SHAPED CraftingRecipe. Provided for use by non-Java languages.","result the {@link Item} result of the recipe","rows the {@link RecipeRow}s that make up the recipe /\n    public static CraftingRecipe createShapedRecipe(Item result, RecipeRow... rows) {\n        return new CraftingRecipe(result, rows);\n    }\n\n    /** Constructs a new SHAPELESS CraftingRecipe. Provided for use by non-Java languages.","result the {@link Item} result of the recipe","items the {@link Item}s that are needed to make the result /\n    public static CraftingRecipe createShapelessRecipe(Item result, Item... items) {\n        return new CraftingRecipe(result, items);\n    }\n\n    /** Checks if this recipe has a shape"],"return":["{@code true} if shaped; {@code false} if not /\n    public boolean hasShape() {\n        return hasShape;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} result","the {@link io.wolfscript.api.inventory.Item} result /\n    public Item getResult() {\n        return result;\n    }\n\n    /** If this is a shaped recipe, gets the {@link io.wolfscript.api.inventory.recipes.RecipeRow} array that makes up the shape","the rows /\n    public RecipeRow[] getRows() {\n        return rows;\n    }\n\n    /** If this is a shapeless recipe, get the {@link io.wolfscript.api.inventory.Item} array that makes up the recipe","the items"]},"return":"Item[]","scope":"public","title":"Get: Constructs a new SHAPED CraftingRecipe"}]},"io.wolfscript.api.inventory.recipes.Recipe":{"namespace":"io.wolfscript.api.inventory.recipes","title":"IRecipe wrapper interface","description":"IRecipe wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"Recipe","qualifiedname":"io.wolfscript.api.inventory.recipes.Recipe","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.CraftingMatrix","io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.inventory.recipes.RecipeRow":{"namespace":"io.wolfscript.api.inventory.recipes","title":"Recipe row helper for Shaped Recipes","description":"Recipe row helper for Shaped Recipes","doc":{"author":["Jason (darkdiplomat)"]},"name":"RecipeRow","qualifiedname":"io.wolfscript.api.inventory.recipes.RecipeRow","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"equals method","description":"equals method","scope":"public","describe":"final","return":"boolean","name":"equals","args":[{"name":"obj","type":"Object","description":"obj argument"}]}],"imports":["io.wolfscript.api.inventory.Item"],"properties":[{"name":"Items","modifier":"readonly","args":[],"description":"Get: Constructs a new RecipeRow","doc":{"param":["shape the shape of the recipe, use spaces for empty slots, maximum of 3 characters.","items the {@link Item}s in the row, item index should match the character's first appearance index ignoring spaces.<br> Example: (underscore used to show spaces clearer)<br> shape = \"X_Y\", items = new Item[]{ itemA, itemB }, itemA = X and itemB = Y<br> or shape = \"__X\", items = new Item[]{ itemA }, itemA = X <br> or shape = \"YYY\", items = new Item[]{ itemA }, since its all Y only 1 item needed /\n    public RecipeRow(String shape, Item[] items) {\n        this.items = items;\n        this.shape = verifyShape(shape);\n        this.identifiers = getIdentifiersFromShape(this.shape);\n    }\n\n    /* Verifies the shape is at max 3 characters /\n    private String verifyShape(String shape) {\n        if (shape.length() < 3) {\n            return shape;\n        }\n        else {\n            return shape.substring(0, 3);\n        }\n    }\n\n    /* Pulls the chars from the shape eliminating matching chars /\n    private char[] getIdentifiersFromShape(String shape) {\n        if (shape.length() < 3) {\n            if (shape.length() == 1 || shape.charAt(0) == shape.charAt(1)) {\n                return new char[]{ shape.charAt(0) };\n            }\n            return new char[]{ shape.charAt(0), shape.charAt(1) };\n        }\n        char[] chars = new char[3];\n        shape.getChars(0, 3, chars, 0);\n        if (chars[0] == chars[1] && chars[0] == chars[2]) {\n            return new char[]{ chars[0] };\n        }\n        else if (chars[0] == chars[1]) {\n            return new char[]{ chars[0], chars[2] };\n        }\n        else if (chars[0] == chars[2] || chars[1] == chars[2]) {\n            return new char[]{ chars[0], chars[1] };\n        }\n        return chars;\n    }\n\n    /** Gets the shape of the Row"],"return":["the shape /\n    public String getShape() {\n        return shape;\n    }\n\n    /** Gets the character identifiers","the char array /\n    public char[] getIdentifiers() {\n        return identifiers;\n    }\n\n    /** Gets the items matching chars","the items"]},"return":"Item[]","scope":"public","title":"Get: Constructs a new RecipeRow"}]},"io.wolfscript.api.inventory.recipes.ShapedRecipe":{"namespace":"io.wolfscript.api.inventory.recipes","title":"ShapedRecipes wrapper interface","description":"ShapedRecipes wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"ShapedRecipe","qualifiedname":"io.wolfscript.api.inventory.recipes.ShapedRecipe","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.recipes.Recipe"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.inventory.recipes.ShapelessRecipe":{"namespace":"io.wolfscript.api.inventory.recipes","title":"ShapelessRecipes wrapper interface","description":"ShapelessRecipes wrapper interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"ShapelessRecipe","qualifiedname":"io.wolfscript.api.inventory.recipes.ShapelessRecipe","type":"interface","scope":"public","extends":["io.wolfscript.api.inventory.recipes.Recipe"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item","java.util.List"],"properties":[]},"io.wolfscript.api.inventory.recipes.SmeltRecipe":{"namespace":"io.wolfscript.api.inventory.recipes","title":"Smelting recipe helper","description":"Smelting recipe helper","doc":{"author":["Jason (darkdiplomat)"]},"name":"SmeltRecipe","qualifiedname":"io.wolfscript.api.inventory.recipes.SmeltRecipe","type":"class","scope":"public","describe":"final","constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType"],"properties":[{"name":"XP","modifier":"readonly","args":[],"description":"Get: Constructs a new SmeltRecipe with no xp gain","doc":{"param":["from the {@link Item} to smelt","result the {@link Item} result /\n    public SmeltRecipe(Item from, Item result) {\n        this(from, result, 0.0F);\n    }\n\n    /** Constructs a new SmeltRecipe with no xp gain","from the {@link ItemType} to smelt","result the {@link Item} result /\n    public SmeltRecipe(ItemType from, Item result) {\n        this(from.getId(), result, 0.0F);\n    }\n\n    /** Constructs a new SmeltRecipe with no xp gain","from the Item ID to smelt","result the {@link Item} result /\n    public SmeltRecipe(int from, Item result) {\n        this(from, result, 0.0F);\n    }\n\n    /** Constructs a new SmeltRecipe","from the {@link Item} to smelt","result the {@link Item} result","xp the xp to give for smelting /\n    public SmeltRecipe(Item from, Item result, float xp) {\n        this(from.getId(), result, xp);\n    }\n\n    /** Constructs a new SmeltRecipe","from the {@link ItemType} to smelt","result the {@link Item} result","xp the xp to give for smelting /\n    public SmeltRecipe(ItemType from, Item result, float xp) {\n        this(from.getId(), result, xp);\n    }\n\n    /** Constructs a new SmeltRecipe","id the Item ID to smelt","result the {@link Item} result","xp the xp to give for smelting /\n    public SmeltRecipe(int id, Item result, float xp) {\n        this.from = id;\n        this.result = result;\n        this.xp = xp;\n    }\n\n    /** Gets the Item ID to smelt"],"return":["the Item ID to smelt /\n    public int getItemIDFrom() {\n        return from;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} result","the {@link io.wolfscript.api.inventory.Item} result /\n    public Item getResult() {\n        return result;\n    }\n\n    /** Gets the XP given for smelting","the xp"]},"return":"float","scope":"public","title":"Get: Constructs a new SmeltRecipe with no xp gain"}]},"io.wolfscript.api.inventory.slot.0":{"namespace":"io.wolfscript.api.inventory","title":"Classes and interfaces for namespace io.wolfscript.api.inventory.slot","description":"Classes and interfaces for namespace io.wolfscript.api.inventory.slot","name":"slot","qualifiedname":"io.wolfscript.api.inventory.slot.0","packagename":"io.wolfscript.api.inventory.slot","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":[],"enums":["io.wolfscript.api.inventory.slot.ButtonPress","io.wolfscript.api.inventory.slot.GrabMode","io.wolfscript.api.inventory.slot.SecondarySlotType","io.wolfscript.api.inventory.slot.SlotType"],"namespaces":[],"properties":[]},"io.wolfscript.api.inventory.slot.ButtonPress":{"namespace":"io.wolfscript.api.inventory.slot","title":"Button press enum for SlotClick","description":"Button press enum for SlotClick","doc":{"author":["Jason (darkdiplomat)"]},"name":"ButtonPress","qualifiedname":"io.wolfscript.api.inventory.slot.ButtonPress","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Left Mouse Button","description":"Left Mouse Button /\n    LEFT,\n    //\n    /** Right Mouse Button /\n    RIGHT,\n    //\n    /** Middle Mouse Button /\n    MIDDLE,\n    //\n    /** Hotbar 1 /\n    KEY_1,\n    //\n    /** Hotbar 2 /\n    KEY_2,\n    //\n    /** Hotbar 3 /\n    KEY_3,\n    //\n    /** Hotbar 4 /\n    KEY_4,\n    //\n    /** Hotbar 5 /\n    KEY_5,\n    //\n    /** Hotbar 6 /\n    KEY_6,\n    //\n    /** Hotbar 7 /\n    KEY_7,\n    //\n    /** Hotbar 8 /\n    KEY_8,\n    //\n    /** Hotbar 9 /\n    KEY_9,\n    //\n    /** Drop Key /\n    KEY_DROP,\n    //\n    /** Control + Drop key /\n    CTRL_DROP,\n    //\n    /** Starting Painting with Left Click (or Middle Click) /\n    LEFT_PAINT_START,\n    //\n    /** Slot passed with Left Click Paint (or Middle Click) /\n    LEFT_PAINT_PROGRESS,\n    //\n    /** Left Click Paint end (or Middle Click) /\n    LEFT_PAINT_END,\n    //\n    /** Starting Painting with Right Click /\n    RIGHT_PAINT_START,\n    //\n    /** Slot passed with Right Click Paint /\n    RIGHT_PAINT_PROGRESS,\n    //\n    /** Right Click Paint end /\n    RIGHT_PAINT_END,\n    //\n    /** Unknown button pressed /\n    UNKNOWN,\n    //\n    ;\n\n    /** Gets the ButtonPress as defined with {@link io.wolfscript.api.inventory.slot.GrabMode}, the button id, and the slot id","doc":{"return":["the ButtonPress constant that matches with the arguments"]},"scope":"public","describe":"static","return":"io.wolfscript.api.inventory.slot.ButtonPress","name":"matchButton","args":[{"name":"mode","type":"io.wolfscript.api.inventory.slot.GrabMode","description":"the {@link io.wolfscript.api.inventory.slot.GrabMode} to use with matching"},{"name":"pressed","type":"int","description":"the button id from the packet"},{"name":"slot","type":"int","description":"the slot id"}]}],"imports":[],"enum":[{"code":"UNKNOWN","value":"","title":"Left Mouse Button","description":"Left Mouse Button /\n    LEFT,\n    //\n    /** Right Mouse Button /\n    RIGHT,\n    //\n    /** Middle Mouse Button /\n    MIDDLE,\n    //\n    /** Hotbar 1 /\n    KEY_1,\n    //\n    /** Hotbar 2 /\n    KEY_2,\n    //\n    /** Hotbar 3 /\n    KEY_3,\n    //\n    /** Hotbar 4 /\n    KEY_4,\n    //\n    /** Hotbar 5 /\n    KEY_5,\n    //\n    /** Hotbar 6 /\n    KEY_6,\n    //\n    /** Hotbar 7 /\n    KEY_7,\n    //\n    /** Hotbar 8 /\n    KEY_8,\n    //\n    /** Hotbar 9 /\n    KEY_9,\n    //\n    /** Drop Key /\n    KEY_DROP,\n    //\n    /** Control + Drop key /\n    CTRL_DROP,\n    //\n    /** Starting Painting with Left Click (or Middle Click) /\n    LEFT_PAINT_START,\n    //\n    /** Slot passed with Left Click Paint (or Middle Click) /\n    LEFT_PAINT_PROGRESS,\n    //\n    /** Left Click Paint end (or Middle Click) /\n    LEFT_PAINT_END,\n    //\n    /** Starting Painting with Right Click /\n    RIGHT_PAINT_START,\n    //\n    /** Slot passed with Right Click Paint /\n    RIGHT_PAINT_PROGRESS,\n    //\n    /** Right Click Paint end /\n    RIGHT_PAINT_END,\n    //\n    /** Unknown button pressed","doc":{}}],"properties":[]},"io.wolfscript.api.inventory.slot.GrabMode":{"namespace":"io.wolfscript.api.inventory.slot","title":"The Grab mode used with SlotClick","description":"The Grab mode used with SlotClick","doc":{"author":["Jason (darkdiplomat)"]},"name":"GrabMode","qualifiedname":"io.wolfscript.api.inventory.slot.GrabMode","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Default slot clicking","description":"Default slot clicking /\n    DEFAULT,\n    //\n\n    /** Holding shift while clicking /\n    SHIFT_CLICK,\n    //\n\n    /** Center mouse button click /\n    PICK_BLOCK,\n    //\n\n    /** Hovering over an Item and hitting a HotBar key (0-9) /\n    HOVER_SWAP,\n    //\n\n    /** Drop key press while hovering over an Item or clicking outside window without an item /\n    DROP,\n    //\n\n    /** Clicking outside with an Item stack and dragging it over the window /\n    PAINT,\n    //\n\n    /** Double (left) clicking a slot /\n    DOUBLE_CLICK,\n    //\n\n    /** Unknown mode /\n    UNKNOWN,\n    //\n    ;\n\n    /** Gets the grab mode based on the integer from the packet","doc":{"return":["the GrabMode for the mode id"]},"scope":"public","describe":"static","return":"io.wolfscript.api.inventory.slot.GrabMode","name":"fromInt","args":[{"name":"opt","type":"int","description":"the mode id"}]}],"imports":[],"enum":[{"code":"UNKNOWN","value":"","title":"Default slot clicking","description":"Default slot clicking /\n    DEFAULT,\n    //\n\n    /** Holding shift while clicking /\n    SHIFT_CLICK,\n    //\n\n    /** Center mouse button click /\n    PICK_BLOCK,\n    //\n\n    /** Hovering over an Item and hitting a HotBar key (0-9) /\n    HOVER_SWAP,\n    //\n\n    /** Drop key press while hovering over an Item or clicking outside window without an item /\n    DROP,\n    //\n\n    /** Clicking outside with an Item stack and dragging it over the window /\n    PAINT,\n    //\n\n    /** Double (left) clicking a slot /\n    DOUBLE_CLICK,\n    //\n\n    /** Unknown mode","doc":{}}],"properties":[]},"io.wolfscript.api.inventory.slot.SecondarySlotType":{"namespace":"io.wolfscript.api.inventory.slot","title":"Secondary Slot Type","description":"Secondary Slot Type <p/> A more specific typing for Slots","doc":{"author":["Jason (darkdiplomat)"]},"name":"SecondarySlotType","qualifiedname":"io.wolfscript.api.inventory.slot.SecondarySlotType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"SADDLE","value":"","title":"Null Slot","description":"Null Slot /\n    NULL,\n    //\n    /** Outside the Inventory Window /\n    OUTSIDE,\n    //\n    /** Armor Slot /\n    ARMOR,\n    //\n    /** Container slot /\n    CONTAINER,\n    //\n    /** Crafting slot (ie: Workbench/Player crafting matrix) /\n    CRAFT,\n    //\n    /** Enchantment slot /\n    ENCHANT,\n    //\n    /** Fuel slot /\n    FUEL,\n    //\n    /** Inventory slot /\n    INVENTORY,\n    //\n    /** Result slot /\n    RESULT,\n    //\n    /** Payment slot /\n    PAYMENT,\n    //\n    /** Potion Slot (BrewingStand) /\n    POTION,\n    //\n    /** Ingredient Slot (BrewingStand) /\n    INGREDIENT,\n    //\n    /** Quick bar slot /\n    QUICKBAR,\n    //\n    /** Trade slot /\n    TRADE,\n    //\n    /** Horse Armor /\n    HORSE_ARMOR,\n    //\n    /** Horse Saddle","doc":{}}],"properties":[]},"io.wolfscript.api.inventory.slot.SlotType":{"namespace":"io.wolfscript.api.inventory.slot","title":"Slot type enum","description":"Slot type enum","doc":{"author":["Jason (darkdiplomat)"]},"name":"SlotType","qualifiedname":"io.wolfscript.api.inventory.slot.SlotType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"SADDLE","value":"","title":"Either a new Slot type or completely unknown","description":"Either a new Slot type or completely unknown /\n    UNKNOWN,\n    //\n    /** Normal slot /\n    DEFAULT,\n    //\n    /** Null slot /\n    NULL,\n    //\n    /** Outside the window /\n    OUTSIDE,\n    //\n    /** Armor slot /\n    ARMOR,\n    //\n    /** Beacon slots /\n    BEACON,\n    //\n    /** Brewing slots /\n    BREWING,\n    //\n    /** Crafting Slot /\n    CRAFTING,\n    //\n    /** Enchantment Slot /\n    ENCHANTMENT,\n    //\n    /** Furnace Slot /\n    FURNACE,\n    //\n    /** Merchant Slot /\n    MERCHANT,\n    //\n    /** Anvil Slot /\n    REPAIR,\n    //\n    /** Horse Saddle Slot","doc":{}}],"properties":[]},"io.wolfscript.api.nbt.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.nbt","description":"Classes and interfaces for namespace io.wolfscript.api.nbt","name":"nbt","qualifiedname":"io.wolfscript.api.nbt.0","packagename":"io.wolfscript.api.nbt","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.nbt.BaseTag","io.wolfscript.api.nbt.ByteArrayTag","io.wolfscript.api.nbt.ByteTag","io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.nbt.DoubleTag","io.wolfscript.api.nbt.FloatTag","io.wolfscript.api.nbt.IntArrayTag","io.wolfscript.api.nbt.IntTag","io.wolfscript.api.nbt.LongTag","io.wolfscript.api.nbt.PrimitiveTag","io.wolfscript.api.nbt.ShortTag","io.wolfscript.api.nbt.StringTag"],"enums":["io.wolfscript.api.nbt.NBTTagType"],"namespaces":[],"properties":[]},"io.wolfscript.api.nbt.BaseTag":{"namespace":"io.wolfscript.api.nbt","title":"Base for all NBT storage tags.","description":"Base for all NBT storage tags.","doc":{"author":["gregthegeek"]},"name":"BaseTag","qualifiedname":"io.wolfscript.api.nbt.BaseTag","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.ByteArrayTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores an array of bytes.","description":"An NBT tag that stores an array of bytes.","doc":{"author":["gregthegeek"]},"name":"ByteArrayTag","qualifiedname":"io.wolfscript.api.nbt.ByteArrayTag","type":"interface","scope":"public","extends":["BaseTag<ByteArrayTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.ByteTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a byte.","description":"An NBT tag that stores a byte.","doc":{"author":["gregthegeek"]},"name":"ByteTag","qualifiedname":"io.wolfscript.api.nbt.ByteTag","type":"interface","scope":"public","extends":["PrimitiveTag<ByteTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.CompoundTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a collection of NBT tags associated with strings.","description":"An NBT tag that stores a collection of NBT tags associated with strings.","doc":{"author":["gregthegeek"]},"name":"CompoundTag","qualifiedname":"io.wolfscript.api.nbt.CompoundTag","type":"interface","scope":"public","extends":["BaseTag<CompoundTag"],"constructors":[],"methods":[],"imports":["java.util.Collection","java.util.Set"],"properties":[]},"io.wolfscript.api.nbt.DoubleTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a double.","description":"An NBT tag that stores a double.","doc":{"author":["gregthegeek"]},"name":"DoubleTag","qualifiedname":"io.wolfscript.api.nbt.DoubleTag","type":"interface","scope":"public","extends":["PrimitiveTag<DoubleTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.FloatTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a float.","description":"An NBT tag that stores a float.","doc":{"author":["gregthegeek"]},"name":"FloatTag","qualifiedname":"io.wolfscript.api.nbt.FloatTag","type":"interface","scope":"public","extends":["PrimitiveTag<FloatTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.IntArrayTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores an array of integers.","description":"An NBT tag that stores an array of integers.","doc":{"author":["gregthegeek"]},"name":"IntArrayTag","qualifiedname":"io.wolfscript.api.nbt.IntArrayTag","type":"interface","scope":"public","extends":["BaseTag<IntArrayTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.IntTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores an integer.","description":"An NBT tag that stores an integer.","doc":{"author":["gregthegeek"]},"name":"IntTag","qualifiedname":"io.wolfscript.api.nbt.IntTag","type":"interface","scope":"public","extends":["PrimitiveTag<IntTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.LongTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a long.","description":"An NBT tag that stores a long.","doc":{"author":["gregthegeek"]},"name":"LongTag","qualifiedname":"io.wolfscript.api.nbt.LongTag","type":"interface","scope":"public","extends":["PrimitiveTag<LongTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.NBTTagType":{"namespace":"io.wolfscript.api.nbt","title":"NBTTag Types enum","description":"NBTTag Types enum","doc":{"author":["Jason (darkdiplomat)"]},"name":"NBTTagType","qualifiedname":"io.wolfscript.api.nbt.NBTTagType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"getTypeFromId method","description":"getTypeFromId method","scope":"public","describe":"static","return":"io.wolfscript.api.nbt.NBTTagType","name":"getTypeFromId","args":[{"name":"id","type":"byte","description":"id argument"}]}],"imports":[],"enum":[{"code":"UNKNOWN","value":"","title":"UNKNOWN NBTTagType","description":"UNKNOWN NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BYTE","value":"","title":"BYTE NBTTagType","description":"BYTE NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SHORT","value":"","title":"SHORT NBTTagType","description":"SHORT NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INT","value":"","title":"INT NBTTagType","description":"INT NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LONG","value":"","title":"LONG NBTTagType","description":"LONG NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FLOAT","value":"","title":"FLOAT NBTTagType","description":"FLOAT NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DOUBLE","value":"","title":"DOUBLE NBTTagType","description":"DOUBLE NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BYTE_ARRAY","value":"","title":"BYTE_ARRAY NBTTagType","description":"BYTE_ARRAY NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRING","value":"","title":"STRING NBTTagType","description":"STRING NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIST","value":"","title":"LIST NBTTagType","description":"LIST NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"COMPOUND","value":"","title":"COMPOUND NBTTagType","description":"COMPOUND NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INT_ARRAY","value":"","title":"INT_ARRAY NBTTagType","description":"INT_ARRAY NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ANY_NUMERIC","value":"","title":"ANY_NUMERIC NBTTagType","description":"ANY_NUMERIC NBTTagType","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.nbt.PrimitiveTag":{"namespace":"io.wolfscript.api.nbt","title":"interface PrimitiveTag","description":"interface PrimitiveTag","doc":{"author":["Jason (darkdiplomat)"]},"name":"PrimitiveTag","qualifiedname":"io.wolfscript.api.nbt.PrimitiveTag","type":"interface","scope":"public","extends":["BaseTag<T"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.ShortTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a short.","description":"An NBT tag that stores a short.","doc":{"author":["gregthegeek"]},"name":"ShortTag","qualifiedname":"io.wolfscript.api.nbt.ShortTag","type":"interface","scope":"public","extends":["PrimitiveTag<ShortTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.nbt.StringTag":{"namespace":"io.wolfscript.api.nbt","title":"An NBT tag that stores a string.","description":"An NBT tag that stores a string.","doc":{"author":["gregthegeek"]},"name":"StringTag","qualifiedname":"io.wolfscript.api.nbt.StringTag","type":"interface","scope":"public","extends":["BaseTag<StringTag"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.packet.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.packet","description":"Classes and interfaces for namespace io.wolfscript.api.packet","name":"packet","qualifiedname":"io.wolfscript.api.packet.0","packagename":"io.wolfscript.api.packet","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.packet.InvalidPacketConstructionException"],"interfaces":["io.wolfscript.api.packet.BlockChangePacket","io.wolfscript.api.packet.Packet"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.api.packet.BlockChangePacket":{"namespace":"io.wolfscript.api.packet","title":"Packet #53 BlockChange","description":"Packet #53 BlockChange","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockChangePacket","qualifiedname":"io.wolfscript.api.packet.BlockChangePacket","type":"interface","scope":"public","extends":["io.wolfscript.api.packet.Packet"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.position.Position"],"properties":[]},"io.wolfscript.api.packet.InvalidPacketConstructionException":{"namespace":"io.wolfscript.api.packet","title":"Called when a Packet that cannot be constructed is attempted to be constructed","description":"Called when a Packet that cannot be constructed is attempted to be constructed","doc":{"author":["Jason (darkdiplomat)"]},"name":"InvalidPacketConstructionException","qualifiedname":"io.wolfscript.api.packet.InvalidPacketConstructionException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"InvalidPacketConstructionException constructor","description":"InvalidPacketConstructionException constructor","scope":"public","name":"InvalidPacketConstructionException","args":[{"name":"packetID","type":"int","description":"packetID argument"},{"name":"name","type":"String","description":"name argument"},{"name":"extra","type":"String","description":"extra argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.packet.Packet":{"namespace":"io.wolfscript.api.packet","title":"Packet interface.","description":"Packet interface. This interface is not automatically applied to packets, for performance reason packets should be wrapped on demand only!","doc":{"author":["Chris (damagefilter)"]},"name":"Packet","qualifiedname":"io.wolfscript.api.packet.Packet","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.potion.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.potion","description":"Classes and interfaces for namespace io.wolfscript.api.potion","name":"potion","qualifiedname":"io.wolfscript.api.potion.0","packagename":"io.wolfscript.api.potion","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.potion.Potion","io.wolfscript.api.potion.PotionEffect"],"enums":["io.wolfscript.api.potion.PotionEffectType","io.wolfscript.api.potion.PotionType"],"namespaces":[],"properties":[]},"io.wolfscript.api.potion.Potion":{"namespace":"io.wolfscript.api.potion","title":"A potion, can give various {@link io.wolfscript.api.potion.PotionEffect}s","description":"A potion, can give various {@link io.wolfscript.api.potion.PotionEffect}s","doc":{"author":["Brian (WWOL)"]},"name":"Potion","qualifiedname":"io.wolfscript.api.potion.Potion","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.potion.PotionEffect":{"namespace":"io.wolfscript.api.potion","title":"An effect from a {@link io.wolfscript.api.potion.Potion}","description":"An effect from a {@link io.wolfscript.api.potion.Potion}","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]},"name":"PotionEffect","qualifiedname":"io.wolfscript.api.potion.PotionEffect","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.LivingBase"],"properties":[]},"io.wolfscript.api.potion.PotionEffectType":{"namespace":"io.wolfscript.api.potion","title":"Enum of all possible potion types.","description":"Enum of all possible potion types.","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]},"name":"PotionEffectType","qualifiedname":"io.wolfscript.api.potion.PotionEffectType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"MOVESPEED","value":"1","title":"MOVESPEED PotionEffectType","description":"MOVESPEED PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"MOVESLOWDOWN","value":"2","title":"MOVESLOWDOWN PotionEffectType","description":"MOVESLOWDOWN PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"DIGSPEED","value":"3","title":"DIGSPEED PotionEffectType","description":"DIGSPEED PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"DIGSLOWDOWN","value":"4","title":"DIGSLOWDOWN PotionEffectType","description":"DIGSLOWDOWN PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"DAMAGEBOOST","value":"5","title":"DAMAGEBOOST PotionEffectType","description":"DAMAGEBOOST PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"HEAL","value":"6","title":"HEAL PotionEffectType","description":"HEAL PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"HARM","value":"7","title":"HARM PotionEffectType","description":"HARM PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"JUMP","value":"8","title":"JUMP PotionEffectType","description":"JUMP PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"CONFUSION","value":"9","title":"CONFUSION PotionEffectType","description":"CONFUSION PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"REGENERATION","value":"10","title":"REGENERATION PotionEffectType","description":"REGENERATION PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"RESISTANCE","value":"11","title":"RESISTANCE PotionEffectType","description":"RESISTANCE PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"FIRERESISTANCE","value":"12","title":"FIRERESISTANCE PotionEffectType","description":"FIRERESISTANCE PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"WATERBREATHING","value":"13","title":"WATERBREATHING PotionEffectType","description":"WATERBREATHING PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"INVISIBILITY","value":"14","title":"INVISIBILITY PotionEffectType","description":"INVISIBILITY PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"BLINDNESS","value":"15","title":"BLINDNESS PotionEffectType","description":"BLINDNESS PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"NIGHTVISION","value":"16","title":"NIGHTVISION PotionEffectType","description":"NIGHTVISION PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"HUNGER","value":"17","title":"HUNGER PotionEffectType","description":"HUNGER PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"WEAKNESS","value":"18","title":"WEAKNESS PotionEffectType","description":"WEAKNESS PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"POISON","value":"19","title":"POISON PotionEffectType","description":"POISON PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"WITHER","value":"20","title":"WITHER PotionEffectType","description":"WITHER PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"HEALTHBOOST","value":"21","title":"HEALTHBOOST PotionEffectType","description":"HEALTHBOOST PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"ABSORPTION","value":"22","title":"ABSORPTION PotionEffectType","description":"ABSORPTION PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}},{"code":"SATURATION","value":"23","title":"SATURATION PotionEffectType","description":"SATURATION PotionEffectType","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat)"]}}],"properties":[{"name":"ID","modifier":"readonly","args":[],"description":"Get: Get a {@link io.wolfscript.api.potion.PotionEffectType} from a name","doc":{"param":["name the name of the PotionEffect","id the ID to get effect type for"],"return":["PotionType or null if not valid name /\n    public static PotionEffectType fromName(String name) {\n        if (name.contains(\".\")) {\n            name = name.substring(name.indexOf(\".\") + 1);\n        }\n        name = name.toUpperCase();\n\n        try {\n            return valueOf(name);\n        }\n        catch (IllegalArgumentException iaex) {\n            return null;\n        }\n    }\n\n    /** Gets a PotionEffectType from an ID","the PotionEffectType /\n    public static PotionEffectType fromId(final int id) {\n        for (PotionEffectType type : values()) {\n            if (type.getID() == id) {\n                return type;\n            }\n        }\n        return null;\n    }\n\n    /** Gets the PotionEffect ID","the id"]},"return":"int","scope":"public","title":"Get: Get a {@link io.wolfscript.api.potion.PotionEffectType} from a name"}]},"io.wolfscript.api.potion.PotionType":{"namespace":"io.wolfscript.api.potion","title":"Potion Types","description":"Potion Types<br> EX = Extended, SP = Splash, II = 2, R = Reverted","doc":{"author":["Jason (darkdiplomat)"]},"name":"PotionType","qualifiedname":"io.wolfscript.api.potion.PotionType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets the TypeId","description":"Gets the TypeId","doc":{"return":["typeId /\n    public short getTypeId() {\n        return typeId;\n    }\n\n    /** Gets the associated PotionType for the given name","the associated PotionType if found; WATER_BOTTLE otherwise /\n    public static PotionType fromName(String name) {\n        try {\n            return valueOf(name.toUpperCase());\n        }\n        catch (IllegalArgumentException iaex) {\n            return WATER_BOTTLE;\n        }\n    }\n\n    /** Gets the associated PotionType for the given typeId","the associated PotionType if found; WATER_BOTTLE otherwise"]},"scope":"public","describe":"static","return":"io.wolfscript.api.potion.PotionType","name":"fromTypeID","args":[{"name":"typeId","type":"short","description":"the typeId of the PotionType to get. (Item damage value)"}]}],"imports":[],"enum":[{"code":"WATER_BOTTLE","value":"0","title":"WATER_BOTTLE PotionType","description":"WATER_BOTTLE PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"AWKWARD","value":"16","title":"AWKWARD PotionType","description":"AWKWARD PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THICK","value":"32","title":"THICK PotionType","description":"THICK PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MUNDANE_EX","value":"64","title":"MUNDANE_EX PotionType","description":"MUNDANE_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MUNDANE","value":"8192","title":"MUNDANE PotionType","description":"MUNDANE PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION","value":"8193","title":"REGENERATION PotionType","description":"REGENERATION PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION_II","value":"8225","title":"REGENERATION_II PotionType","description":"REGENERATION_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION_EX","value":"8257","title":"REGENERATION_EX PotionType","description":"REGENERATION_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION_SP","value":"16385","title":"REGENERATION_SP PotionType","description":"REGENERATION_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION_SP_II","value":"16417","title":"REGENERATION_SP_II PotionType","description":"REGENERATION_SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REGENERATION_SP_EX","value":"16449","title":"REGENERATION_SP_EX PotionType","description":"REGENERATION_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS","value":"8194","title":"SWIFTNESS PotionType","description":"SWIFTNESS PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS_II","value":"8226","title":"SWIFTNESS_II PotionType","description":"SWIFTNESS_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS_EX","value":"8258","title":"SWIFTNESS_EX PotionType","description":"SWIFTNESS_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS_SP","value":"16386","title":"SWIFTNESS_SP PotionType","description":"SWIFTNESS_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS_SP_II","value":"16418","title":"SWIFTNESS_SP_II PotionType","description":"SWIFTNESS_SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIFTNESS_SP_EX","value":"16450","title":"SWIFTNESS_SP_EX PotionType","description":"SWIFTNESS_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE","value":"8195","title":"FIRE_RESISTANCE PotionType","description":"FIRE_RESISTANCE PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE_R","value":"8227","title":"FIRE_RESISTANCE_R PotionType","description":"FIRE_RESISTANCE_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE_EX","value":"8259","title":"FIRE_RESISTANCE_EX PotionType","description":"FIRE_RESISTANCE_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE_SP","value":"16387","title":"FIRE_RESISTANCE_SP PotionType","description":"FIRE_RESISTANCE_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE_SP_R","value":"16419","title":"FIRE_RESISTANCE_SP_R PotionType","description":"FIRE_RESISTANCE_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FIRE_RESISTANCE_SP_EX","value":"16451","title":"FIRE_RESISTANCE_SP_EX PotionType","description":"FIRE_RESISTANCE_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON","value":"8196","title":"POISON PotionType","description":"POISON PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON_II","value":"8228","title":"POISON_II PotionType","description":"POISON_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON_EX","value":"8260","title":"POISON_EX PotionType","description":"POISON_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON_SP","value":"16388","title":"POISON_SP PotionType","description":"POISON_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON_SP_II","value":"16420","title":"POISON_SP_II PotionType","description":"POISON_SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POISON_SP_EX","value":"16452","title":"POISON_SP_EX PotionType","description":"POISON_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH","value":"8197","title":"INSTANT_HEALTH PotionType","description":"INSTANT_HEALTH PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH_II","value":"8229","title":"INSTANT_HEALTH_II PotionType","description":"INSTANT_HEALTH_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH_R","value":"8261","title":"INSTANT_HEALTH_R PotionType","description":"INSTANT_HEALTH_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH_SP","value":"16389","title":"INSTANT_HEALTH_SP PotionType","description":"INSTANT_HEALTH_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH__SP_II","value":"16421","title":"INSTANT_HEALTH__SP_II PotionType","description":"INSTANT_HEALTH__SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INSTANT_HEALTH_SP_R","value":"16453","title":"INSTANT_HEALTH_SP_R PotionType","description":"INSTANT_HEALTH_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION","value":"8198","title":"NIGHT_VISION PotionType","description":"NIGHT_VISION PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION_R","value":"8230","title":"NIGHT_VISION_R PotionType","description":"NIGHT_VISION_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION_EX","value":"8262","title":"NIGHT_VISION_EX PotionType","description":"NIGHT_VISION_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION_SP","value":"16390","title":"NIGHT_VISION_SP PotionType","description":"NIGHT_VISION_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION_SP_R","value":"16422","title":"NIGHT_VISION_SP_R PotionType","description":"NIGHT_VISION_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NIGHT_VISION_SP_EX","value":"16454","title":"NIGHT_VISION_SP_EX PotionType","description":"NIGHT_VISION_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS","value":"8200","title":"WEAKNESS PotionType","description":"WEAKNESS PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS_R","value":"8232","title":"WEAKNESS_R PotionType","description":"WEAKNESS_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS_EX","value":"8264","title":"WEAKNESS_EX PotionType","description":"WEAKNESS_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS_SP","value":"16392","title":"WEAKNESS_SP PotionType","description":"WEAKNESS_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS_SP_R","value":"16424","title":"WEAKNESS_SP_R PotionType","description":"WEAKNESS_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WEAKNESS_SP_EX","value":"16456","title":"WEAKNESS_SP_EX PotionType","description":"WEAKNESS_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH","value":"8201","title":"STRENGTH PotionType","description":"STRENGTH PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH_II","value":"8233","title":"STRENGTH_II PotionType","description":"STRENGTH_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH_EX","value":"8265","title":"STRENGTH_EX PotionType","description":"STRENGTH_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH_SP","value":"16393","title":"STRENGTH_SP PotionType","description":"STRENGTH_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH_SP_II","value":"16425","title":"STRENGTH_SP_II PotionType","description":"STRENGTH_SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STRENGTH_SP_EX","value":"16457","title":"STRENGTH_SP_EX PotionType","description":"STRENGTH_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS","value":"8202","title":"SLOWNESS PotionType","description":"SLOWNESS PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS_R","value":"8234","title":"SLOWNESS_R PotionType","description":"SLOWNESS_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS_EX","value":"8266","title":"SLOWNESS_EX PotionType","description":"SLOWNESS_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS_SP","value":"16394","title":"SLOWNESS_SP PotionType","description":"SLOWNESS_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS_SP_R","value":"16426","title":"SLOWNESS_SP_R PotionType","description":"SLOWNESS_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SLOWNESS_SP_EX","value":"16458","title":"SLOWNESS_SP_EX PotionType","description":"SLOWNESS_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING","value":"8204","title":"HARMING PotionType","description":"HARMING PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING_II","value":"8236","title":"HARMING_II PotionType","description":"HARMING_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING_R","value":"8268","title":"HARMING_R PotionType","description":"HARMING_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING_SP","value":"16396","title":"HARMING_SP PotionType","description":"HARMING_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING_SP_II","value":"16428","title":"HARMING_SP_II PotionType","description":"HARMING_SP_II PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HARMING_SP_R","value":"16460","title":"HARMING_SP_R PotionType","description":"HARMING_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY","value":"8206","title":"INVISIBILITY PotionType","description":"INVISIBILITY PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY_R","value":"8238","title":"INVISIBILITY_R PotionType","description":"INVISIBILITY_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY_EX","value":"8270","title":"INVISIBILITY_EX PotionType","description":"INVISIBILITY_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY_SP","value":"16398","title":"INVISIBILITY_SP PotionType","description":"INVISIBILITY_SP PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY_SP_R","value":"16430","title":"INVISIBILITY_SP_R PotionType","description":"INVISIBILITY_SP_R PotionType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INVISIBILITY_SP_EX","value":"16462","title":"INVISIBILITY_SP_EX PotionType","description":"INVISIBILITY_SP_EX PotionType","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.scoreboard.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.scoreboard","description":"Classes and interfaces for namespace io.wolfscript.api.scoreboard","name":"scoreboard","qualifiedname":"io.wolfscript.api.scoreboard.0","packagename":"io.wolfscript.api.scoreboard","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.scoreboard.Score","io.wolfscript.api.scoreboard.ScoreDummyCriteria","io.wolfscript.api.scoreboard.ScoreHealthCriteria","io.wolfscript.api.scoreboard.ScoreObjective","io.wolfscript.api.scoreboard.ScoreObjectiveCriteria","io.wolfscript.api.scoreboard.Scoreboard","io.wolfscript.api.scoreboard.ScoreboardManager","io.wolfscript.api.scoreboard.Team"],"enums":["io.wolfscript.api.scoreboard.CriteriaType","io.wolfscript.api.scoreboard.ScorePosition"],"namespaces":[],"properties":[]},"io.wolfscript.api.scoreboard.CriteriaType":{"namespace":"io.wolfscript.api.scoreboard","title":"Scoreboard criteria type","description":"Scoreboard criteria type","doc":{"author":["Somners"]},"name":"CriteriaType","qualifiedname":"io.wolfscript.api.scoreboard.CriteriaType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets the Minecraft protocol name for this criteria.","description":"Gets the Minecraft protocol name for this criteria.","doc":{"return":["protocol name /\n    public String getProtocolName() {\n        return this.protocol;\n    }\n\n    /** Gets the Criteria Type from the Minecraft protocol name.<br> This is not case sensitive.","the criteria type. null if it doesn't exist."]},"scope":"public","describe":"static","return":"io.wolfscript.api.scoreboard.CriteriaType","name":"fromProtocolName","args":[{"name":"protocol","type":"String","description":"protocol name you wish to get."}]}],"imports":[],"enum":[{"code":"DUMMY","value":"\"dummy\"","title":"DUMMY CriteriaType","description":"DUMMY CriteriaType","doc":{"author":["Somners"]}},{"code":"DEATH_COUNT","value":"\"deathCount\"","title":"DEATH_COUNT CriteriaType","description":"DEATH_COUNT CriteriaType","doc":{"author":["Somners"]}},{"code":"PLAYER_KILL_COUNT","value":"\"playerKillCount\"","title":"PLAYER_KILL_COUNT CriteriaType","description":"PLAYER_KILL_COUNT CriteriaType","doc":{"author":["Somners"]}},{"code":"TOTAL_KILL_COUNT","value":"\"totalKillCount\"","title":"TOTAL_KILL_COUNT CriteriaType","description":"TOTAL_KILL_COUNT CriteriaType","doc":{"author":["Somners"]}},{"code":"HEALTH","value":"\"health\"","title":"HEALTH CriteriaType","description":"HEALTH CriteriaType","doc":{"author":["Somners"]}}],"properties":[]},"io.wolfscript.api.scoreboard.Score":{"namespace":"io.wolfscript.api.scoreboard","title":"Scoreboard score","description":"Scoreboard score","doc":{"author":["Aaron (somners)"]},"name":"Score","qualifiedname":"io.wolfscript.api.scoreboard.Score","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["java.util.List"],"properties":[]},"io.wolfscript.api.scoreboard.ScoreDummyCriteria":{"namespace":"io.wolfscript.api.scoreboard","title":"interface ScoreDummyCriteria","description":"interface ScoreDummyCriteria","doc":{"author":["Somners"]},"name":"ScoreDummyCriteria","qualifiedname":"io.wolfscript.api.scoreboard.ScoreDummyCriteria","type":"interface","scope":"public","extends":["io.wolfscript.api.scoreboard.ScoreObjectiveCriteria"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.scoreboard.ScoreHealthCriteria":{"namespace":"io.wolfscript.api.scoreboard","title":"Wrapper Interface for Health Score Criteria","description":"Wrapper Interface for Health Score Criteria","doc":{"author":["Somners"]},"name":"ScoreHealthCriteria","qualifiedname":"io.wolfscript.api.scoreboard.ScoreHealthCriteria","type":"interface","scope":"public","extends":["io.wolfscript.api.scoreboard.ScoreDummyCriteria"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.scoreboard.ScoreObjective":{"namespace":"io.wolfscript.api.scoreboard","title":"ScoreObjective wrapper","description":"ScoreObjective wrapper","doc":{"author":["Somners"]},"name":"ScoreObjective","qualifiedname":"io.wolfscript.api.scoreboard.ScoreObjective","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.World"],"properties":[]},"io.wolfscript.api.scoreboard.ScoreObjectiveCriteria":{"namespace":"io.wolfscript.api.scoreboard","title":"ScoreObjectiveCriteria wrapper","description":"ScoreObjectiveCriteria wrapper","doc":{"author":["Somners"]},"name":"ScoreObjectiveCriteria","qualifiedname":"io.wolfscript.api.scoreboard.ScoreObjectiveCriteria","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["java.util.List"],"properties":[]},"io.wolfscript.api.scoreboard.ScorePosition":{"namespace":"io.wolfscript.api.scoreboard","title":"Convenience enum for handle minecraft id protocol values for scoreboard positions.","description":"Convenience enum for handle minecraft id protocol values for scoreboard positions.","doc":{"author":["Somners"]},"name":"ScorePosition","qualifiedname":"io.wolfscript.api.scoreboard.ScorePosition","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Shows next to the players name in the player list when pressing the TAB key.","description":"Shows next to the players name in the player list when pressing the TAB key. /\n    PLAYER_LIST(0),\n    /** shows in a sidebar that pops up on the side of the players screen. /\n    SIDEBAR(1),\n    /** Shows below the name above a players head. /\n    BELOW_NAME(2);\n\n    /** Minecraft protocol ID value for the scoreboard position. /\n    private int id;\n\n    ScorePosition(int id) {\n        this.id = id;\n    }\n\n    /** Get the id for this Position.","doc":{"return":["id value /\n    public int getId() {\n        return this.id;\n    }\n\n    /** Gets a {@link io.wolfscript.api.scoreboard.ScorePosition} for the given id value.","the {@link io.wolfscript.api.scoreboard.ScorePosition} or null if it doesn't exist."]},"scope":"public","describe":"static","return":"io.wolfscript.api.scoreboard.ScorePosition","name":"fromId","args":[{"name":"id","type":"int","description":"id value to get the {@link io.wolfscript.api.scoreboard.ScorePosition} for."}]}],"imports":[],"enum":[{"code":"BELOW_NAME","value":"2","title":"Shows next to the players name in the player list when pressing the TAB key.","description":"Shows next to the players name in the player list when pressing the TAB key. /\n    PLAYER_LIST(0),\n    /** shows in a sidebar that pops up on the side of the players screen. /\n    SIDEBAR(1),\n    /** Shows below the name above a players head.","doc":{}}],"properties":[]},"io.wolfscript.api.scoreboard.Scoreboard":{"namespace":"io.wolfscript.api.scoreboard","title":"Scoreboard wrapper interface","description":"Scoreboard wrapper interface","doc":{"author":["Aaron (somners)"]},"name":"Scoreboard","qualifiedname":"io.wolfscript.api.scoreboard.Scoreboard","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.World","java.util.List"],"properties":[]},"io.wolfscript.api.scoreboard.ScoreboardManager":{"namespace":"io.wolfscript.api.scoreboard","title":"interface ScoreboardManager","description":"interface ScoreboardManager","doc":{"author":["Somners"]},"name":"ScoreboardManager","qualifiedname":"io.wolfscript.api.scoreboard.ScoreboardManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.scoreboard.Team":{"namespace":"io.wolfscript.api.scoreboard","title":"Scoreboard team wrapper","description":"Scoreboard team wrapper","doc":{"author":["Somners"]},"name":"Team","qualifiedname":"io.wolfscript.api.scoreboard.Team","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","java.util.List"],"properties":[]},"io.wolfscript.api.statistics.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.statistics","description":"Classes and interfaces for namespace io.wolfscript.api.statistics","name":"statistics","qualifiedname":"io.wolfscript.api.statistics.0","packagename":"io.wolfscript.api.statistics","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.statistics.Achievement","io.wolfscript.api.statistics.Stat"],"enums":["io.wolfscript.api.statistics.Achievements","io.wolfscript.api.statistics.Statistics"],"namespaces":[],"properties":[]},"io.wolfscript.api.statistics.Achievement":{"namespace":"io.wolfscript.api.statistics","title":"Achievement","description":"Achievement","doc":{"author":["Jason (darkdiplomat)"]},"name":"Achievement","qualifiedname":"io.wolfscript.api.statistics.Achievement","type":"interface","scope":"public","extends":["io.wolfscript.api.statistics.Stat"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.statistics.Achievements":{"namespace":"io.wolfscript.api.statistics","title":"Achievements list","description":"Achievements list","doc":{"author":["Jason (darkdiplomat)"]},"name":"Achievements","qualifiedname":"io.wolfscript.api.statistics.Achievements","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets the full native name of the {@code Achievements}","description":"Gets the full native name of the {@code Achievements}","doc":{"return":["full native name /\n    public final String getNativeName() {\n        return nmsName;\n    }\n\n    /** Gets the {@link io.wolfscript.api.statistics.Achievement} instance for the given {@code Achievements}","{@link io.wolfscript.api.statistics.Achievement} instance /\n    public final Achievement getInstance() {\n        return Wolf.factory().getStatisticsFactory().getAchievement(nmsName);\n    }\n\n    /** Gets an {@code Achievements} for the native name","{@code Achievements} matching the name or {@code null} if not match found"]},"scope":"public","describe":"static","return":"io.wolfscript.api.statistics.Achievements","name":"forNMSName","args":[{"name":"String","type":"final","description":"String argument"}]}],"imports":["com.google.common.collect.Maps","io.wolfscript.Wolf","java.util.HashMap"],"enum":[{"code":"OPENINVENTORY","value":"\"openInventory\"","title":"OPENINVENTORY Achievements","description":"OPENINVENTORY Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GETTINGWOOD","value":"\"mineWood\"","title":"GETTINGWOOD Achievements","description":"GETTINGWOOD Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BENCHMARKING","value":"\"buildWorkBench\"","title":"BENCHMARKING Achievements","description":"BENCHMARKING Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TIMETOMINE","value":"\"buildPickaxe\"","title":"TIMETOMINE Achievements","description":"TIMETOMINE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HOTTOPIC","value":"\"buildFurnace\"","title":"HOTTOPIC Achievements","description":"HOTTOPIC Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ACQUIREHARDWARE","value":"\"acquireIron\"","title":"ACQUIREHARDWARE Achievements","description":"ACQUIREHARDWARE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TIMETOFARM","value":"\"buildHoe\"","title":"TIMETOFARM Achievements","description":"TIMETOFARM Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BAKEBREAD","value":"\"makeBread\"","title":"BAKEBREAD Achievements","description":"BAKEBREAD Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THELIE","value":"\"bakeCake\"","title":"THELIE Achievements","description":"THELIE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GETTINGAUPGRADE","value":"\"buildBetterPickaxe\"","title":"GETTINGAUPGRADE Achievements","description":"GETTINGAUPGRADE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DELICIOUSFISH","value":"\"cookFish\"","title":"DELICIOUSFISH Achievements","description":"DELICIOUSFISH Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ONARAIL","value":"\"onARail\"","title":"ONARAIL Achievements","description":"ONARAIL Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TIMETOSTRIKE","value":"\"buildSword\"","title":"TIMETOSTRIKE Achievements","description":"TIMETOSTRIKE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MONSTERHUNTER","value":"\"killEnemy\"","title":"MONSTERHUNTER Achievements","description":"MONSTERHUNTER Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"COWTIPPER","value":"\"killCow\"","title":"COWTIPPER Achievements","description":"COWTIPPER Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WHENPIGFLY","value":"\"flyPig\"","title":"WHENPIGFLY Achievements","description":"WHENPIGFLY Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SNIPERDUEL","value":"\"snipeSkeleton\"","title":"SNIPERDUEL Achievements","description":"SNIPERDUEL Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DIAMONDS","value":"\"diamonds\"","title":"DIAMONDS Achievements","description":"DIAMONDS Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DIAMONDSTOYOU","value":"\"diamondsToYou\"","title":"DIAMONDSTOYOU Achievements","description":"DIAMONDSTOYOU Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WENEEDTOGODEEPER","value":"\"portal\"","title":"WENEEDTOGODEEPER Achievements","description":"WENEEDTOGODEEPER Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"RETURNTOSENDER","value":"\"ghast\"","title":"RETURNTOSENDER Achievements","description":"RETURNTOSENDER Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"INTOFIRE","value":"\"blazeRod\"","title":"INTOFIRE Achievements","description":"INTOFIRE Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"POTION","value":"\"potion\"","title":"POTION Achievements","description":"POTION Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THEEND","value":"\"theEnd\"","title":"THEEND Achievements","description":"THEEND Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THEEND2","value":"\"theEnd2\"","title":"THEEND2 Achievements","description":"THEEND2 Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ENCHANTER","value":"\"enchantments\"","title":"ENCHANTER Achievements","description":"ENCHANTER Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OVERKILL","value":"\"overkill\"","title":"OVERKILL Achievements","description":"OVERKILL Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIBRARIAN","value":"\"bookcase\"","title":"LIBRARIAN Achievements","description":"LIBRARIAN Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"REPOPULATION","value":"\"breedCow\"","title":"REPOPULATION Achievements","description":"REPOPULATION Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THEBEGINNING","value":"\"spawnWither\"","title":"THEBEGINNING Achievements","description":"THEBEGINNING Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"THEBEGINNING2","value":"\"killWither\"","title":"THEBEGINNING2 Achievements","description":"THEBEGINNING2 Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BEACONATOR","value":"\"fullBeacon\"","title":"BEACONATOR Achievements","description":"BEACONATOR Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ADVENTURINGTIME","value":"\"exploreAllBiomes\"","title":"ADVENTURINGTIME Achievements","description":"ADVENTURINGTIME Achievements","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OVERPOWERED","value":"\"overpowered\"","title":"OVERPOWERED Achievements","description":"OVERPOWERED Achievements","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.statistics.Stat":{"namespace":"io.wolfscript.api.statistics","title":"Stat wrapper","description":"Stat wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Stat","qualifiedname":"io.wolfscript.api.statistics.Stat","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.statistics.Statistics":{"namespace":"io.wolfscript.api.statistics","title":"Statistics Tracker","description":"Statistics Tracker","doc":{"author":["Jason (darkdiplomat)"]},"name":"Statistics","qualifiedname":"io.wolfscript.api.statistics.Statistics","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Gets the full native name of the {@code Statistics}","description":"Gets the full native name of the {@code Statistics}","doc":{"return":["full native name /\n    public final String getNativeName() {\n        return nmsName;\n    }\n\n    /** Gets the {@link io.wolfscript.api.statistics.Stat} instance for the given {@code Statistics}","{@link io.wolfscript.api.statistics.Stat} instance /\n    public final Stat getInstance() {\n        return Wolf.factory().getStatisticsFactory().getStat(nmsName);\n    }\n\n    /** Gets an {@code Statistics} for the native name","{@code Statistics} matching the name or {@code null} if not match found"]},"scope":"public","describe":"static","return":"io.wolfscript.api.statistics.Statistics","name":"forNMSName","args":[{"name":"String","type":"final","description":"String argument"}]}],"imports":["com.google.common.collect.Maps","io.wolfscript.Wolf","java.util.HashMap"],"enum":[{"code":"LEAVEGAME","value":"\"leaveGame\"","title":"LEAVEGAME Statistics","description":"LEAVEGAME Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLAYONEMINUTE","value":"\"playOneMinute\"","title":"PLAYONEMINUTE Statistics","description":"PLAYONEMINUTE Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TIMESINCEDEATH","value":"\"timeSinceDeath\"","title":"TIMESINCEDEATH Statistics","description":"TIMESINCEDEATH Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WALKONECM","value":"\"walkOneCm\"","title":"WALKONECM Statistics","description":"WALKONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CROUCHONECM","value":"\"crouchOneCm\"","title":"CROUCHONECM Statistics","description":"CROUCHONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SPRINTONECM","value":"\"sprintOneCm\"","title":"SPRINTONECM Statistics","description":"SPRINTONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWIMONECM","value":"\"swimOneCm\"","title":"SWIMONECM Statistics","description":"SWIMONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FALLONECM","value":"\"fallOneCm\"","title":"FALLONECM Statistics","description":"FALLONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CLIMBONECM","value":"\"climbOneCm\"","title":"CLIMBONECM Statistics","description":"CLIMBONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FLYONECM","value":"\"flyOneCm\"","title":"FLYONECM Statistics","description":"FLYONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DRIVEONECM","value":"\"diveOneCm\"","title":"DRIVEONECM Statistics","description":"DRIVEONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MINECARTONECM","value":"\"minecartOneCm\"","title":"MINECARTONECM Statistics","description":"MINECARTONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BOATONECM","value":"\"boatOneCm\"","title":"BOATONECM Statistics","description":"BOATONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PIGONECM","value":"\"pigOneCm\"","title":"PIGONECM Statistics","description":"PIGONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HORSEONECM","value":"\"horseOneCm\"","title":"HORSEONECM Statistics","description":"HORSEONECM Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"JUMP","value":"\"jump\"","title":"JUMP Statistics","description":"JUMP Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DROP","value":"\"drop\"","title":"DROP Statistics","description":"DROP Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DAMAGEDEALT","value":"\"damageDealt\"","title":"DAMAGEDEALT Statistics","description":"DAMAGEDEALT Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DAMAGETAKEN","value":"\"damageTaken\"","title":"DAMAGETAKEN Statistics","description":"DAMAGETAKEN Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DEATHS","value":"\"deaths\"","title":"DEATHS Statistics","description":"DEATHS Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MOBKILLS","value":"\"mobKills\"","title":"MOBKILLS Statistics","description":"MOBKILLS Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ANIMALSBRED","value":"\"animalsBred\"","title":"ANIMALSBRED Statistics","description":"ANIMALSBRED Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLAYERKILLS","value":"\"playerKills\"","title":"PLAYERKILLS Statistics","description":"PLAYERKILLS Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FISHCAUGHT","value":"\"fishCaught\"","title":"FISHCAUGHT Statistics","description":"FISHCAUGHT Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"JUNKFISHED","value":"\"junkFished\"","title":"JUNKFISHED Statistics","description":"JUNKFISHED Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TREASUREFISHED","value":"\"treasureFished\"","title":"TREASUREFISHED Statistics","description":"TREASUREFISHED Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TALKEDTOVILLAGER","value":"\"talkedToVillager\"","title":"TALKEDTOVILLAGER Statistics","description":"TALKEDTOVILLAGER Statistics","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TRADEDWITHVILLAGER","value":"\"tradedWithVillager\"","title":"TRADEDWITHVILLAGER Statistics","description":"TRADEDWITHVILLAGER Statistics","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.0":{"namespace":"io.wolfscript.api","title":"Classes and interfaces for namespace io.wolfscript.api.world","description":"Classes and interfaces for namespace io.wolfscript.api.world","name":"world","qualifiedname":"io.wolfscript.api.world.0","packagename":"io.wolfscript.api.world","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.world.ChunkProviderCustom","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.UnknownWorldException","io.wolfscript.api.world.WorldType"],"interfaces":["io.wolfscript.api.world.Biome","io.wolfscript.api.world.Chunk","io.wolfscript.api.world.ChunkProvider","io.wolfscript.api.world.Village","io.wolfscript.api.world.World","io.wolfscript.api.world.WorldManager"],"enums":["io.wolfscript.api.world.BiomeType","io.wolfscript.api.world.TreeType"],"namespaces":["io.wolfscript.api.world.blocks.0","io.wolfscript.api.world.effects.0","io.wolfscript.api.world.position.0"],"properties":[]},"io.wolfscript.api.world.Biome":{"namespace":"io.wolfscript.api.world","title":"Biome contains data about a certain {@link io.wolfscript.api.world.BiomeType}","description":"Biome contains data about a certain {@link io.wolfscript.api.world.BiomeType}","doc":{"author":["Chris (damagefilter)"]},"name":"Biome","qualifiedname":"io.wolfscript.api.world.Biome","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["java.util.Random"],"properties":[]},"io.wolfscript.api.world.BiomeType":{"namespace":"io.wolfscript.api.world","title":"Biome types enumeration","description":"Biome types enumeration","doc":{"author":["Jason (darkdiplomat)"]},"name":"BiomeType","qualifiedname":"io.wolfscript.api.world.BiomeType","type":"enum","scope":"public","constructors":[],"methods":[{"title":"count method","description":"count method","scope":"public","describe":"static","return":"int","name":"count","args":[]},{"title":"Gets the byte for the BiomeType","description":"Gets the byte for the BiomeType","doc":{"return":["id the BiomeType id /\n    public byte getId() {\n        return id;\n    }\n\n    /** Gets the BiomeType from the byte id","the BiomeType /\n    public static BiomeType fromId(byte id) {\n        return map.get(id);\n    }\n\n    /** Gets an array of BiomeTypes based on a byte array","a BiomeType array /\n    public static BiomeType[] fromIdArray(byte[] ids) {\n        BiomeType[] types = new BiomeType[ids.length];\n        for (int index = 0; index < ids.length; index++) {\n            byte id;\n            if ((id = ids[index]) < 0 || id > count()) {\n                id = -1;\n            }\n            types[index] = fromId(id);\n        }\n        return types;\n    }\n\n    /** Gets an array of bytes based on a BiomeType array","a byte array of Biome ids"]},"scope":"public","describe":"static","return":"byte[]","name":"fromTypeArray","args":[]}],"imports":["java.util.HashMap","java.util.Map"],"enum":[{"code":"UNDEFINED","value":"-1","title":"UNDEFINED BiomeType","description":"UNDEFINED BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OCEAN","value":"0","title":"OCEAN BiomeType","description":"OCEAN BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLAINS","value":"1","title":"PLAINS BiomeType","description":"PLAINS BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DESERT","value":"2","title":"DESERT BiomeType","description":"DESERT BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_EXTREME","value":"3","title":"HILLS_EXTREME BiomeType","description":"HILLS_EXTREME BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FOREST","value":"4","title":"FOREST BiomeType","description":"FOREST BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TAIGA","value":"5","title":"TAIGA BiomeType","description":"TAIGA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SWAMPLAND","value":"6","title":"SWAMPLAND BiomeType","description":"SWAMPLAND BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"RIVER","value":"7","title":"RIVER BiomeType","description":"RIVER BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HELL","value":"8","title":"HELL BiomeType","description":"HELL BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SKY","value":"9","title":"SKY BiomeType","description":"SKY BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OCEAN_FROZEN","value":"10","title":"OCEAN_FROZEN BiomeType","description":"OCEAN_FROZEN BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"RIVER_FROZEN","value":"11","title":"RIVER_FROZEN BiomeType","description":"RIVER_FROZEN BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLAINS_ICE","value":"12","title":"PLAINS_ICE BiomeType","description":"PLAINS_ICE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MOUNTAINS_ICE","value":"13","title":"MOUNTAINS_ICE BiomeType","description":"MOUNTAINS_ICE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MUSHROOM_ISLAND","value":"14","title":"MUSHROOM_ISLAND BiomeType","description":"MUSHROOM_ISLAND BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MUSHROOM_ISLAND_SHORE","value":"15","title":"MUSHROOM_ISLAND_SHORE BiomeType","description":"MUSHROOM_ISLAND_SHORE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BEACH","value":"16","title":"BEACH BiomeType","description":"BEACH BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_DESERT","value":"17","title":"HILLS_DESERT BiomeType","description":"HILLS_DESERT BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_FOREST","value":"18","title":"HILLS_FOREST BiomeType","description":"HILLS_FOREST BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_TAIGA","value":"19","title":"HILLS_TAIGA BiomeType","description":"HILLS_TAIGA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_EXTREME_EDGE","value":"20","title":"HILLS_EXTREME_EDGE BiomeType","description":"HILLS_EXTREME_EDGE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"JUNGLE","value":"21","title":"JUNGLE BiomeType","description":"JUNGLE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_JUNGLE","value":"22","title":"HILLS_JUNGLE BiomeType","description":"HILLS_JUNGLE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"JUNGLE_EDGE","value":"23","title":"JUNGLE_EDGE BiomeType","description":"JUNGLE_EDGE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OCEAN_DEEP","value":"24","title":"OCEAN_DEEP BiomeType","description":"OCEAN_DEEP BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BEACH_STONE","value":"25","title":"BEACH_STONE BiomeType","description":"BEACH_STONE BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BEACH_COLD","value":"26","title":"BEACH_COLD BiomeType","description":"BEACH_COLD BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FOREST_BIRCH","value":"27","title":"FOREST_BIRCH BiomeType","description":"FOREST_BIRCH BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_FOREST_BIRCH","value":"28","title":"HILLS_FOREST_BIRCH BiomeType","description":"HILLS_FOREST_BIRCH BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FOREST_ROOFED","value":"29","title":"FOREST_ROOFED BiomeType","description":"FOREST_ROOFED BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TAIGA_COLD","value":"30","title":"TAIGA_COLD BiomeType","description":"TAIGA_COLD BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_TAIGA_COLD","value":"31","title":"HILLS_TAIGA_COLD BiomeType","description":"HILLS_TAIGA_COLD BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TAIGA_MEGA","value":"32","title":"TAIGA_MEGA BiomeType","description":"TAIGA_MEGA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_TAIGA_MEGA","value":"33","title":"HILLS_TAIGA_MEGA BiomeType","description":"HILLS_TAIGA_MEGA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"HILLS_EXTREME_PLUS","value":"34","title":"HILLS_EXTREME_PLUS BiomeType","description":"HILLS_EXTREME_PLUS BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SAVANNA","value":"35","title":"SAVANNA BiomeType","description":"SAVANNA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLATEAU_SAVANNA","value":"36","title":"PLATEAU_SAVANNA BiomeType","description":"PLATEAU_SAVANNA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MESA","value":"37","title":"MESA BiomeType","description":"MESA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLATEAU_MESA_F","value":"38","title":"PLATEAU_MESA_F BiomeType","description":"PLATEAU_MESA_F BiomeType","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PLATEAU_MESA","value":"39","title":"PLATEAU_MESA BiomeType","description":"PLATEAU_MESA BiomeType","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.Chunk":{"namespace":"io.wolfscript.api.world","title":"Handles Chunks","description":"Handles Chunks","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","Jos Kuijpers"]},"name":"Chunk","qualifiedname":"io.wolfscript.api.world.Chunk","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.world.blocks.TileEntity","io.wolfscript.api.world.position.Position","java.util.List","java.util.Map"],"properties":[]},"io.wolfscript.api.world.ChunkProvider":{"namespace":"io.wolfscript.api.world","title":"Chunk Provider interface. This has two purposes.","description":"Chunk Provider interface. This has two purposes.<br> One is to wrap the ChunkProviderServer in the NMS implementation. <br> The other, much more interesting purpose is to be implemented by Plugins, then mapped to dimension types - in order to provide custom world generation.<br> <h4>Custom World Generation</h4> This is the interface everything related to world generation boils down to. A world will use this to create its terrain and call the provideChunk methid.","doc":{"author":["Chris (damagefilter)"]},"name":"ChunkProvider","qualifiedname":"io.wolfscript.api.world.ChunkProvider","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["java.util.List"],"properties":[]},"io.wolfscript.api.world.ChunkProviderCustom":{"namespace":"io.wolfscript.api.world","title":"A ChunkProvider that is used to implement custom world generation.","description":"A ChunkProvider that is used to implement custom world generation. Note that implementations of this class must not have constructors with arguments.","doc":{"author":["Chris(damagefilter)"]},"name":"ChunkProviderCustom","qualifiedname":"io.wolfscript.api.world.ChunkProviderCustom","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[],"imports":[],"properties":[{"name":"World","modifier":"writeonly","args":[{"name":"world","type":"io.wolfscript.api.world.World","description":"the {@link io.wolfscript.api.world.World} used for the Generator"}],"description":"Set: Will be called when a new chunk needs to be generated. The x/z are Chunk coordinates. (right-shifted by 4)","doc":{"return":["the provided {@link io.wolfscript.api.world.Chunk} /\n    public abstract Chunk provideChunk(int x, int z);\n\n    /** Is called after the large-scale generation is done to populate the world with details. For instance glowstone blocks The x/z are chunk coordinates, that means right-shifted by 4"]},"return":"void","scope":"public","title":"Set: Will be called when a new chunk needs to be generated."}]},"io.wolfscript.api.world.DimensionType":{"namespace":"io.wolfscript.api.world","title":"Dynamic worldType list","description":"Dynamic worldType list","doc":{"author":["Chris (damagefilter)"]},"name":"DimensionType","qualifiedname":"io.wolfscript.api.world.DimensionType","type":"class","scope":"public","constructors":[],"fields":[{"title":"NETHER field","description":"NETHER field","name":"NETHER","scope":"public","type":"io.wolfscript.api.world.DimensionType","describe":"static final"},{"title":"NORMAL field","description":"NORMAL field","name":"NORMAL","scope":"public","type":"io.wolfscript.api.world.DimensionType","describe":"static final"},{"title":"END field","description":"END field","name":"END","scope":"public","type":"io.wolfscript.api.world.DimensionType","describe":"static final"}],"methods":[{"title":"equals method","description":"equals method","scope":"public","return":"boolean","name":"equals","args":[{"name":"ob","type":"Object","description":"ob argument"}]},{"title":"hashCode method","description":"hashCode method","scope":"public","return":"int","name":"hashCode","args":[]},{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["java.util.HashMap","io.wolfscript.Wolf.log"],"properties":[{"name":"ChunkProvider","modifier":"readonly","args":[],"description":"Get: Registers a shallow {@link io.wolfscript.api.world.DimensionType} (only the name without attached Generator) to the system. using a DimensionType like this will not have any effect on the world generation. A default generator, based on the ID will be used. If there is none, the default Minecraft world generator is used.","doc":{"param":["name The name of the dimension","id The id. If the ID is already taken, a unique one is auto-generated /\n    public static DimensionType registerType(String name, int id) {\n        if (typeList.containsKey(name.toLowerCase())) {\n            log.warn(\"Tried to add existing dimension type, aborting! DimensionType: \" + name);\n            return fromName(name);\n        }\n        if (validateId(id)) {\n            typeList.put(name.toLowerCase(), new DimensionType(name, id));\n            return fromName(name);\n        }\n        else {\n            log.warn(\"DimensionType ID is not unique! Id: \" + id + \", Type: \" + name + \" - Creating unique ID from hashCode!\");\n            typeList.put(name.toLowerCase(), new DimensionType(name, name.hashCode()));\n            return fromName(name);\n        }\n    }\n\n    /** Registers a {@link DimensionType} with an attached world generator. If a DimensionType like this is used, WolfScript will substitute the default Minecraft World Generator with the one that has been registered with this DimensionType.","name The name of the dimension","id The id. If the ID is already taken, a unique one is auto-generated","cpc The Class instance of the custom world generator /\n    public static DimensionType registerType(String name, int id, Class<? extends ChunkProviderCustom> cpc) {\n        if (typeList.containsKey(name.toLowerCase())) {\n            log.warn(\"Tried to add existing dimension type, aborting! DimensionType: \" + name);\n            return fromName(name);\n        }\n        if (validateId(id)) {\n            typeList.put(name.toLowerCase(), new DimensionType(name, id, cpc));\n            return fromName(name);\n        }\n        else {\n            log.warn(\"WorldType ID is not unique! Id: \" + id + \", Type: \" + name + \" - Creating unique ID from hashCode!\");\n            typeList.put(name.toLowerCase(), new DimensionType(name, name.hashCode(), cpc));\n            return fromName(name);\n        }\n    }\n\n    /** Get a {@link DimensionType} from a given name. May return null if there is no DimensionType with the given name.","name The name. It's case insensitive.","id the Dimension ID","id the id to check","name the name of the DimensionType"],"return":["DimensionType based on the given name /\n    public static DimensionType fromName(String name) {\n        return typeList.get(name.toLowerCase());\n    }\n\n    /** Get a {@link io.wolfscript.api.world.DimensionType} from a given ID. May return null if there is no DimensionType with this ID","{@link io.wolfscript.api.world.DimensionType} based on the given ID /\n    public static DimensionType fromId(int id) {\n        for (String name : typeList.keySet()) {\n            String tmpname = name.toLowerCase();\n            if (typeList.get(tmpname).getId() == id) {\n                return typeList.get(tmpname);\n            }\n        }\n        return null;\n    }\n\n    /** Gets a {@link String[]} of known Dimension names","{@link String[]} of known Dimension names /\n    public static String[] knownDimensionNames() {\n        return typeList.keySet().toArray(new String[typeList.size()]);\n    }\n\n    /** Gets a {@link io.wolfscript.api.world.DimensionType[]} of known Dimensions","{@link io.wolfscript.api.world.DimensionType[]} of known Dimensions /\n    public static DimensionType[] knownDimensions() {\n        return typeList.values().toArray(new DimensionType[typeList.size()]);\n    }\n\n    /** Validates uniqueness of an ID","{@code true} if ID is unique, false otherwise /\n    private static boolean validateId(int id) {\n        for (String n : typeList.keySet()) {\n            if (typeList.get(n.toLowerCase()).getId() == id) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /** Check if a type with the given name exists. This is case sensitive","{@code true} if exists; {@code false} otherwise /\n    public static boolean typeExists(String name) {\n        return typeList.containsKey(name.toLowerCase());\n    }\n\n    // * END STATIC STUFF *\n\n    private int id;\n    private String name;\n    private Class<? extends ChunkProviderCustom> cpc = null;\n\n    // Make sure no-one can just instantiate a new world type\n    private DimensionType(String name, int id) {\n        this.id = id;\n        this.name = name;\n    }\n\n    private DimensionType(String name, int id, Class<? extends ChunkProviderCustom> cpc) {\n        this.id = id;\n        this.name = name;\n        this.cpc = cpc;\n    }\n\n    /** Get the ID of this dimension type. With this ID the DimensionType can be identified.","the id /\n    public int getId() {\n        return id;\n    }\n\n    /** Get the name of this dimension type","the name /\n    public String getName() {\n        return name;\n    }\n\n    /** Checks if this dimension type has a custom chunk provider attached","{@code true} if has provider; {@code false} if not /\n    public boolean hasChunkProvider() {\n        return cpc != null;\n    }\n\n    /** Get the ChunkProviderCustom that is attached to this Dimensiontype. Note that this returns null if the DimensionType has no provider attached","a new {@link io.wolfscript.api.world.ChunkProviderCustom}"]},"return":"io.wolfscript.api.world.ChunkProviderCustom","scope":"public","title":"Get: Registers a shallow {@link io.wolfscript.api.world.DimensionType} (only the name without attached Generator) to the system."}]},"io.wolfscript.api.world.TreeType":{"namespace":"io.wolfscript.api.world","title":"Tree Types","description":"Tree Types","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TreeType","qualifiedname":"io.wolfscript.api.world.TreeType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"BIGOAK","value":"","title":"BIGOAK TreeType","description":"BIGOAK TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SWAMPOAK","value":"","title":"SWAMPOAK TreeType","description":"SWAMPOAK TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAK","value":"","title":"DARKOAK TreeType","description":"DARKOAK TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCH","value":"","title":"BIRCH TreeType","description":"BIRCH TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TALLBIRCH","value":"","title":"TALLBIRCH TreeType","description":"TALLBIRCH TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCE","value":"","title":"SPRUCE TreeType","description":"SPRUCE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TALLSPRUCE","value":"","title":"TALLSPRUCE TreeType","description":"TALLSPRUCE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MEGASPRUCE","value":"","title":"MEGASPRUCE TreeType","description":"MEGASPRUCE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLE","value":"","title":"JUNGLE TreeType","description":"JUNGLE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TALLJUNGLE","value":"","title":"TALLJUNGLE TreeType","description":"TALLJUNGLE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEBUSH","value":"","title":"JUNGLEBUSH TreeType","description":"JUNGLEBUSH TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MEGAJUNGLE","value":"","title":"MEGAJUNGLE TreeType","description":"MEGAJUNGLE TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIA","value":"","title":"ACACIA TreeType","description":"ACACIA TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"know","value":"","title":"know TreeType","description":"know TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"trees","value":"","title":"trees TreeType","description":"trees TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDMUSHROOM","value":"","title":"REDMUSHROOM TreeType","description":"REDMUSHROOM TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNMUSHROOM","value":"","title":"BROWNMUSHROOM TreeType","description":"BROWNMUSHROOM TreeType","doc":{"author":["Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.UnknownWorldException":{"namespace":"io.wolfscript.api.world","title":"Thrown when a needed world is non-existent or not loaded","description":"Thrown when a needed world is non-existent or not loaded","doc":{"author":["Chris (damagefilter)"]},"name":"UnknownWorldException","qualifiedname":"io.wolfscript.api.world.UnknownWorldException","type":"class","scope":"public","extends":["IllegalArgumentException"],"constructors":[{"title":"UnknownWorldException constructor","description":"UnknownWorldException constructor","scope":"public","name":"UnknownWorldException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.Village":{"namespace":"io.wolfscript.api.world","title":"Village wrapper","description":"Village wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Village","qualifiedname":"io.wolfscript.api.world.Village","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location"],"properties":[]},"io.wolfscript.api.world.World":{"namespace":"io.wolfscript.api.world","title":"This is a container for all of the dimensions containing a world","description":"This is a container for all of the dimensions containing a world","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)","Jos Kuijpers"]},"name":"World","qualifiedname":"io.wolfscript.api.world.World","type":"interface","scope":"public","constructors":[],"methods":[{"title":"fromId method","description":"fromId method","scope":"public","describe":"static","return":"Difficulty","name":"fromId","args":[{"name":"id","type":"int","description":"id argument"}]}],"imports":["io.wolfscript.api.EntityTracker","io.wolfscript.api.GameMode","io.wolfscript.api.PlayerManager","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.living.animal.EntityAnimal","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.entity.living.monster.EntityMob","io.wolfscript.api.entity.vehicle.Boat","io.wolfscript.api.entity.vehicle.Minecart","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.blocks.TileEntity","io.wolfscript.api.world.effects.AuxiliarySoundEffect","io.wolfscript.api.world.effects.Particle","io.wolfscript.api.world.effects.SoundEffect","io.wolfscript.api.world.position.Location","io.wolfscript.api.world.position.Position","java.util.List"],"properties":[{"name":"Id","modifier":"readonly","args":[],"description":"Id property","return":"int","scope":"public","title":"Id property"}]},"io.wolfscript.api.world.WorldManager":{"namespace":"io.wolfscript.api.world","title":"This is a container for all of the worlds.","description":"This is a container for all of the worlds.","doc":{"author":["Jos Kuijpers","Jason (darkdiplomat)"]},"name":"WorldManager","qualifiedname":"io.wolfscript.api.world.WorldManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.config.WorldConfiguration","java.util.Collection","java.util.List"],"properties":[]},"io.wolfscript.api.world.WorldType":{"namespace":"io.wolfscript.api.world","title":"Static class of WorldTypes","description":"Static class of WorldTypes","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"WorldType","qualifiedname":"io.wolfscript.api.world.WorldType","type":"class","scope":"public","constructors":[],"fields":[{"title":"DEFAULT field","description":"DEFAULT field","name":"DEFAULT","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"SUPERFLAT field","description":"SUPERFLAT field","name":"SUPERFLAT","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"DEFAULT field","description":"DEFAULT field","name":"DEFAULT","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"LARGEBIOMES field","description":"LARGEBIOMES field","name":"LARGEBIOMES","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"AMPLIFIED field","description":"AMPLIFIED field","name":"AMPLIFIED","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"CUSTOMIZED field","description":"CUSTOMIZED field","name":"CUSTOMIZED","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"},{"title":"DEBUG field","description":"DEBUG field","name":"DEBUG","scope":"public","type":"io.wolfscript.api.world.WorldType","describe":"static final"}],"methods":[],"imports":["java.util.HashMap"],"properties":[{"name":"TypeNames","modifier":"readonly","args":[],"describe":"static","description":"Get: Register a new WorldType.","doc":{"param":["name","string"],"retur":["n /\n    public static boolean registerWorldType(String name) {\n        if (types.containsKey(name)) {\n            return false;\n        }\n        types.put(name, new WorldType(name));\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return string;\n    }\n\n    /** get a worldType from string. This may return null if the requested WorldType does not exist!","n /\n    public static WorldType fromString(String string) {\n        for (String n : types.keySet()) {\n            if (n.equals(string.toUpperCase())) {\n                return types.get(n);\n            }\n        }\n        if (string.toUpperCase().equals(\"DEBUG\")) { // That one weird one...\n            return DEBUG;\n        }\n        return null;\n    }\n\n    /** Gets an array of WorldType names"],"return":["WorldType names"]},"return":"String[]","scope":"public","title":"Get: Register a new WorldType."}]},"io.wolfscript.api.world.blocks.0":{"namespace":"io.wolfscript.api.world","title":"Classes and interfaces for namespace io.wolfscript.api.world.blocks","description":"Classes and interfaces for namespace io.wolfscript.api.world.blocks","name":"blocks","qualifiedname":"io.wolfscript.api.world.blocks.0","packagename":"io.wolfscript.api.world.blocks","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.blocks.CustomBlockTypeException"],"interfaces":["io.wolfscript.api.world.blocks.Banner","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockBase","io.wolfscript.api.world.blocks.BlockMaterial","io.wolfscript.api.world.blocks.BrewingStand","io.wolfscript.api.world.blocks.Comparator","io.wolfscript.api.world.blocks.DaylightDetector","io.wolfscript.api.world.blocks.Dispenser","io.wolfscript.api.world.blocks.DoubleChest","io.wolfscript.api.world.blocks.Dropper","io.wolfscript.api.world.blocks.EnderChest","io.wolfscript.api.world.blocks.Furnace","io.wolfscript.api.world.blocks.Jukebox","io.wolfscript.api.world.blocks.MapColor","io.wolfscript.api.world.blocks.MobSpawner","io.wolfscript.api.world.blocks.NoteBlock","io.wolfscript.api.world.blocks.Sign","io.wolfscript.api.world.blocks.Skull","io.wolfscript.api.world.blocks.TileEntity"],"enums":["io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.MapColorList","io.wolfscript.api.world.blocks.VanillaBlock"],"namespaces":["io.wolfscript.api.world.blocks.properties.0"],"properties":[]},"io.wolfscript.api.world.blocks.Banner":{"namespace":"io.wolfscript.api.world.blocks","title":"Banner TileEntity wrapper","description":"Banner TileEntity wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Banner","qualifiedname":"io.wolfscript.api.world.blocks.Banner","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.DyeColor","io.wolfscript.api.inventory.helper.BannerPattern","java.util.List"],"properties":[]},"io.wolfscript.api.world.blocks.Block":{"namespace":"io.wolfscript.api.world.blocks","title":"IBlockAccess wrapper with added position and world information.","description":"IBlockAccess wrapper with added position and world information.","doc":{"author":["Chris (damagefitler)","Jason (darkdiplomat)"]},"name":"Block","qualifiedname":"io.wolfscript.api.world.blocks.Block","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.collect.ImmutableMap","io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.api.packet.BlockChangePacket","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.properties.BlockProperty","io.wolfscript.api.world.position.Location","io.wolfscript.api.world.position.Position","java.util.Collection"],"properties":[]},"io.wolfscript.api.world.blocks.BlockBase":{"namespace":"io.wolfscript.api.world.blocks","title":"Block wrapper","description":"Block wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockBase","qualifiedname":"io.wolfscript.api.world.blocks.BlockBase","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta","io.wolfscript.api.entity.Entity","io.wolfscript.api.world.World","io.wolfscript.api.world.position.Position","java.util.Random"],"properties":[]},"io.wolfscript.api.world.blocks.BlockFace":{"namespace":"io.wolfscript.api.world.blocks","title":"A BlockFace is a side of a block","description":"A BlockFace is a side of a block","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"BlockFace","qualifiedname":"io.wolfscript.api.world.blocks.BlockFace","type":"enum","scope":"public","constructors":[],"methods":[{"title":"Return this faces normal direction (The byte value to this face)","description":"Return this faces normal direction (The byte value to this face)","doc":{"return":["the face byte value /\n    public byte getByte() {\n        return (byte)ordinal();\n    }\n\n    public Axis getAxis() {\n        return axis;\n    }\n\n    public AxisDirection getDirection() {\n        return direction;\n    }\n\n    /** Get a BlockFace from byte","the {@link io.wolfscript.api.world.blocks.BlockFace}"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.BlockFace","name":"fromByte","args":[{"name":"normal","type":"byte","description":"the facing byte value"}]}],"imports":[],"enum":[{"code":"AxisDirection.NEGATIVE","value":"","title":"AxisDirection.NEGATIVE BlockFace","description":"AxisDirection.NEGATIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"AxisDirection.POSITIVE","value":"","title":"AxisDirection.POSITIVE BlockFace","description":"AxisDirection.POSITIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"AxisDirection.NEGATIVE","value":"","title":"AxisDirection.NEGATIVE BlockFace","description":"AxisDirection.NEGATIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"AxisDirection.POSITIVE","value":"","title":"AxisDirection.POSITIVE BlockFace","description":"AxisDirection.POSITIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"AxisDirection.NEGATIVE","value":"","title":"AxisDirection.NEGATIVE BlockFace","description":"AxisDirection.NEGATIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"AxisDirection.POSITIVE","value":"","title":"AxisDirection.POSITIVE BlockFace","description":"AxisDirection.POSITIVE BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}},{"code":"null","value":"","title":"null BlockFace","description":"null BlockFace","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]}}],"properties":[{"name":"Plane","modifier":"readonly","args":[],"description":"Plane property","return":"Plane","scope":"public","title":"Plane property"}]},"io.wolfscript.api.world.blocks.BlockMaterial":{"namespace":"io.wolfscript.api.world.blocks","title":"Block Material","description":"Block Material <p/> Contains technical information about a {@link io.wolfscript.api.world.blocks.Block}","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockMaterial","qualifiedname":"io.wolfscript.api.world.blocks.BlockMaterial","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.BlockType":{"namespace":"io.wolfscript.api.world.blocks","title":"Static class of BlockTypes","description":"Static class of BlockTypes","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","Todd (Rusli)"]},"name":"BlockType","qualifiedname":"io.wolfscript.api.world.blocks.BlockType","type":"class","scope":"public","describe":"final","constructors":[],"fields":[{"title":"Air field","description":"Air field","name":"Air","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Stone field","description":"Stone field","name":"Stone","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Granite field","description":"Granite field","name":"Granite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"PolishedGranite field","description":"PolishedGranite field","name":"PolishedGranite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Diorite field","description":"Diorite field","name":"Diorite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"PolishedDiorite field","description":"PolishedDiorite field","name":"PolishedDiorite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Andesite field","description":"Andesite field","name":"Andesite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"PolishedAndesite field","description":"PolishedAndesite field","name":"PolishedAndesite","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Grass field","description":"Grass field","name":"Grass","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Dirt field","description":"Dirt field","name":"Dirt","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"CoarseDirt field","description":"CoarseDirt field","name":"CoarseDirt","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Podzol field","description":"Podzol field","name":"Podzol","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"Cobble field","description":"Cobble field","name":"Cobble","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"OakPlanks field","description":"OakPlanks field","name":"OakPlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"SprucePlanks field","description":"SprucePlanks field","name":"SprucePlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"BirchPlanks field","description":"BirchPlanks field","name":"BirchPlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"JunglePlanks field","description":"JunglePlanks field","name":"JunglePlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"AcaciaPlanks field","description":"AcaciaPlanks field","name":"AcaciaPlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"DarkOakPlanks field","description":"DarkOakPlanks field","name":"DarkOakPlanks","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"RedSandstoneBlank field","description":"RedSandstoneBlank field","doc":{"deprecated":["Being replaced by {@link OakPlanks} /\n    @Deprecated\n    public static final BlockType OakWood = OakPlanks;\n    /**","Being replaced by {@link SprucePlanks} /\n    @Deprecated\n    public static final BlockType SpruceWood = SprucePlanks;\n    /**","Being replaced by {@link BirchPlanks} /\n    @Deprecated\n    public static final BlockType BirchWood = BirchPlanks;\n    /**","Being replaced by {@link JunglePlanks} /\n    @Deprecated\n    public static final BlockType JungleWood = JunglePlanks;\n    /**","Being replaced by {@link AcaciaPlanks} /\n    @Deprecated\n    public static final BlockType AcaciaWood = AcaciaPlanks;\n    /**","Being replaced by {@link DarkOakPlanks} /\n    @Deprecated\n    public static final BlockType DarkOakWood = DarkOakPlanks;\n    public static final BlockType OakSapling = new BlockType(6, 0, \"minecraft:sapling\");\n    public static final BlockType SpruceSapling = new BlockType(6, 1, \"minecraft:sapling\");\n    public static final BlockType BirchSapling = new BlockType(6, 2, \"minecraft:sapling\");\n    public static final BlockType JungleSapling = new BlockType(6, 3, \"minecraft:sapling\");\n    public static final BlockType AcaciaSapling = new BlockType(6, 4, \"minecraft:sapling\");\n    public static final BlockType DarkOakSapling = new BlockType(6, 5, \"minecraft:sapling\");\n    public static final BlockType Bedrock = new BlockType(7, 0, \"minecraft:bedrock\");\n    public static final BlockType WaterFlowing = new BlockType(8, 0, \"minecraft:flowing_water\");\n    public static final BlockType Water = new BlockType(9, 0, \"minecraft:water\");\n    public static final BlockType LavaFlowing = new BlockType(10, 0, \"minecraft:flowing_lava\");\n    public static final BlockType Lava = new BlockType(11, 0, \"minecraft:lava\");\n    public static final BlockType Sand = new BlockType(12, 0, \"minecraft:sand\");\n    public static final BlockType RedSand = new BlockType(12, 1, \"minecraft:sand\");\n    public static final BlockType Gravel = new BlockType(13, 0, \"minecraft:gravel\");\n    public static final BlockType GoldOre = new BlockType(14, 0, \"minecraft:gold_ore\");\n    public static final BlockType IronOre = new BlockType(15, 0, \"minecraft:iron_ore\");\n    public static final BlockType CoalOre = new BlockType(16, 0, \"minecraft:coal_ore\");\n    public static final BlockType OakLog = new BlockType(17, 0, \"minecraft:log\");\n    public static final BlockType SpruceLog = new BlockType(17, 1, \"minecraft:log\");\n    /**","Being replaced by {@link SpruceLog} /\n    @Deprecated\n    public static final BlockType PineLog = SpruceLog;\n    public static final BlockType BirchLog = new BlockType(17, 2, \"minecraft:log\");\n    public static final BlockType JungleLog = new BlockType(17, 3, \"minecraft:log\");\n    public static final BlockType OakLeaves = new BlockType(18, 0, \"minecraft:leaves\");\n    public static final BlockType SpruceLeaves = new BlockType(18, 1, \"minecraft:leaves\");\n    /**","Being replaced by {@link SpruceLeaves} /\n    @Deprecated\n    public static final BlockType PineLeaves = SpruceLeaves;\n    public static final BlockType BirchLeaves = new BlockType(18, 2, \"minecraft:leaves\");\n    public static final BlockType JungleLeaves = new BlockType(18, 3, \"minecraft:leaves\");\n    public static final BlockType Sponge = new BlockType(19, 0, \"minecraft:sponge\");\n    public static final BlockType Glass = new BlockType(20, 0, \"minecraft:glass\");\n    public static final BlockType LapisOre = new BlockType(21, 0, \"minecraft:lapis_ore\");\n    /**","Being replaced by {@link LapisOre} /\n    @Deprecated\n    public static final BlockType LapislazuliOre = LapisOre;\n    public static final BlockType LapisBlock = new BlockType(22, 0, \"minecraft:lapis_block\");\n    public static final BlockType Dispenser = new BlockType(23, 0, \"minecraft:dispenser\");\n    public static final BlockType Sandstone = new BlockType(24, 0, \"minecraft:sandstone\");\n    public static final BlockType SandstoneChiseled = new BlockType(24, 1, \"minecraft:sandstone\");\n    /**","Being replaced by {@link SandstoneChiseled} /\n    @Deprecated\n    public static final BlockType SandstoneOrnate = SandstoneChiseled;\n    public static final BlockType SandstoneSmooth = new BlockType(24, 2, \"minecraft:sandstone\");\n    /**","Being replaced by {@link SandstoneSmooth} /\n    @Deprecated\n    public static final BlockType SandstoneBlank = SandstoneSmooth;\n    public static final BlockType NoteBlock = new BlockType(25, 0, \"minecraft:noteblock\");\n    public static final BlockType Bed = new BlockType(26, 0, \"minecraft:bed\");\n    /**","Being replaced by {@link Bed} /\n    @Deprecated\n    public static final BlockType BedBlock = Bed;\n    public static final BlockType PoweredRail = new BlockType(27, 0, \"minecraft:golden_rail\");\n    public static final BlockType DetectorRail = new BlockType(28, 0, \"minecraft:detector_rail\");\n    public static final BlockType StickyPiston = new BlockType(29, 0, \"minecraft:sticky_piston\");\n    public static final BlockType Web = new BlockType(30, 0, \"minecraft:web\");\n    /**","Being replaced by {@link Web} /\n    @Deprecated\n    public static final BlockType SpiderWeb = Web;\n    public static final BlockType Shrub = new BlockType(31, 0, \"minecraft:tallgrass\");\n    public static final BlockType TallGrass = new BlockType(31, 1, \"minecraft:tallgrass\");\n    public static final BlockType Fern = new BlockType(31, 2, \"minecraft:tallgrass\");\n    public static final BlockType DeadBush = new BlockType(32, 0, \"minecraft:deadbush\");\n    public static final BlockType Piston = new BlockType(33, 0, \"minecraft:piston\");\n    public static final BlockType PistonHead = new BlockType(34, 0, \"minecraft:piston_head\");\n    public static final BlockType WhiteWool = new BlockType(35, 0, \"minecraft:wool\");\n    public static final BlockType OrangeWool = new BlockType(35, 1, \"minecraft:wool\");\n    public static final BlockType MagentaWool = new BlockType(35, 2, \"minecraft:wool\");\n    public static final BlockType LightBlueWool = new BlockType(35, 3, \"minecraft:wool\");\n    public static final BlockType YellowWool = new BlockType(35, 4, \"minecraft:wool\");\n    public static final BlockType LimeWool = new BlockType(35, 5, \"minecraft:wool\");\n    public static final BlockType PinkWool = new BlockType(35, 6, \"minecraft:wool\");\n    public static final BlockType GrayWool = new BlockType(35, 7, \"minecraft:wool\");\n    public static final BlockType LightGrayWool = new BlockType(35, 8, \"minecraft:wool\");\n    public static final BlockType CyanWool = new BlockType(35, 9, \"minecraft:wool\");\n    public static final BlockType PurpleWool = new BlockType(35, 10, \"minecraft:wool\");\n    public static final BlockType BlueWool = new BlockType(35, 11, \"minecraft:wool\");\n    public static final BlockType BrownWool = new BlockType(35, 12, \"minecraft:wool\");\n    public static final BlockType GreenWool = new BlockType(35, 13, \"minecraft:wool\");\n    public static final BlockType RedWool = new BlockType(35, 14, \"minecraft:wool\");\n    public static final BlockType BlackWool = new BlockType(35, 15, \"minecraft:wool\");\n    /**","Being replaced by {@link WhiteWool} /\n    @Deprecated\n    public static final BlockType WoolWhite = WhiteWool;\n    /**","Being replaced by {@link OrangeWool} /\n    @Deprecated\n    public static final BlockType WoolOrange = OrangeWool;\n    /**","Being replaced by {@link MagentaWool} /\n    @Deprecated\n    public static final BlockType WoolMagenta = MagentaWool;\n    /**","Being replaced by {@link LightBlueWool} /\n    @Deprecated\n    public static final BlockType WoolLightBlue = LightBlueWool;\n    /**","Being replaced by {@link YellowWool} /\n    @Deprecated\n    public static final BlockType WoolYellow = YellowWool;\n    /**","Being replaced by {@link LimeWool} /\n    @Deprecated\n    public static final BlockType WoolLightGreen = LimeWool;\n    /**","Being replaced by {@link LimeWool} /\n    @Deprecated\n    public static final BlockType WoolPink = PinkWool;\n    /**","Being replaced by {@link GrayWool} /\n    @Deprecated\n    public static final BlockType WoolGray = GrayWool;\n    /**","Being replaced by {@link LightGrayWool} /\n    @Deprecated\n    public static final BlockType WoolLightGray = LightGrayWool;\n    /**","Being replaced by {@link CyanWool} /\n    @Deprecated\n    public static final BlockType WoolCyan = CyanWool;\n    /**","Being replaced by {@link PurpleWool} /\n    @Deprecated\n    public static final BlockType WoolPurple = PurpleWool;\n    /**","Being replaced by {@link BlueWool} /\n    @Deprecated\n    public static final BlockType WoolBlue = BlueWool;\n    /**","Being replaced by {@link BrownWool} /\n    @Deprecated\n    public static final BlockType WoolBrown = BrownWool;\n    /**","Being replaced by {@link GreenWool} /\n    @Deprecated\n    public static final BlockType WoolDarkGreen = GreenWool;\n    /**","Being replaced by {@link RedWool} /\n    @Deprecated\n    public static final BlockType WoolRed = RedWool;\n    /**","Being replaced by {@link BlackWool} /\n    @Deprecated\n    public static final BlockType WoolBlack = BlackWool;\n    public static final BlockType PistonExtended = new BlockType(36, 0, \"minecraft:piston_extension\");\n    public static final BlockType Dandelion = new BlockType(37, 0, \"minecraft:yellow_flower\");\n    public static final BlockType Poppy = new BlockType(38, 0, \"minecraft:red_flower\");\n    public static final BlockType BlueOrchid = new BlockType(38, 1, \"minecraft:red_flower\");\n    public static final BlockType Allium = new BlockType(38, 2, \"minecraft:red_flower\");\n    public static final BlockType AzureBluet = new BlockType(38, 3, \"minecraft:red_flower\");\n    public static final BlockType RedTulip = new BlockType(38, 4, \"minecraft:red_flower\");\n    public static final BlockType OrangeTulip = new BlockType(38, 5, \"minecraft:red_flower\");\n    public static final BlockType WhiteTulip = new BlockType(38, 6, \"minecraft:red_flower\");\n    public static final BlockType PinkTulip = new BlockType(38, 7, \"minecraft:red_flower\");\n    public static final BlockType OxeyeDaisy = new BlockType(38, 8, \"minecraft:red_flower\");\n    public static final BlockType BrownMushroom = new BlockType(39, 0, \"minecraft:brown_mushroom\");\n    public static final BlockType RedMushroom = new BlockType(40, 0, \"minecraft:red_mushroom\");\n    public static final BlockType GoldBlock = new BlockType(41, 0, \"minecraft:gold_block\");\n    public static final BlockType IronBlock = new BlockType(42, 0, \"minecraft:iron_block\");\n    /** No longer seamless, see {@link io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties} /\n    public static final BlockType DoubleStoneSlab = new BlockType(43, 0, \"minecraft:double_stone_slab\");\n    /** No longer seamless, see {@link io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties} /\n    public static final BlockType DoubleSandStoneSlab = new BlockType(43, 1, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleWoodSlab = new BlockType(43, 2, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleCobbleSlab = new BlockType(43, 3, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleBrickSlab = new BlockType(43, 4, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleStoneBricksSlab = new BlockType(43, 5, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleNetherBrickSlab = new BlockType(43, 6, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleQuartzSlab = new BlockType(43, 7, \"minecraft:double_stone_slab\");\n    /**","Being replaced by {@link DoubleStoneSlab} /\n    @Deprecated\n    public static final BlockType DoubleOrnateStoneSlab = DoubleStoneSlab;\n    /**","Being replaced by {@link DoubleSandStoneSlab} /\n    @Deprecated\n    public static final BlockType DoubleSandStoneTrimSlab = DoubleSandStoneSlab;\n    /**","Being replaced by {@link DoubleBricksSlab} /\n    @Deprecated\n    public static final BlockType DoubleBrickBlockSlab = DoubleBrickSlab;\n    public static final BlockType StoneSlab = new BlockType(44, 0, \"minecraft:stone_slab\");\n    public static final BlockType SandStoneSlab = new BlockType(44, 1, \"minecraft:stone_slab\");\n    public static final BlockType WoodSlab = new BlockType(44, 2, \"minecraft:stone_slab\");\n    public static final BlockType CobbleSlab = new BlockType(44, 3, \"minecraft:stone_slab\");\n    public static final BlockType BrickSlab = new BlockType(44, 4, \"minecraft:stone_slab\");\n    public static final BlockType StoneBricksSlab = new BlockType(44, 5, \"minecraft:stone_slab\");\n    public static final BlockType NetherBricksSlab = new BlockType(44, 6, \"minecraft:stone_slab\");\n    public static final BlockType QuartzSlab = new BlockType(44, 7, \"minecraft:stone_slab\");\n    /**","Being replaced by {@link StoneSlab} /\n    @Deprecated\n    public static final BlockType OrnateStoneSlab = StoneSlab;\n    /**","Being replaced by {@link SandStoneSlab} /\n    @Deprecated\n    public static final BlockType SandStoneTrimSlab = SandStoneSlab;\n    /**","Being replaced by {@link BrickSlab} /\n    @Deprecated\n    public static final BlockType BrickBlockSlab = BrickSlab;\n    public static final BlockType Bricks = new BlockType(45, 0, \"minecraft:brick_block\");\n    public static final BlockType BrickBlock = Bricks;\n    public static final BlockType TNT = new BlockType(46, 0, \"minecraft:tnt\");\n    /**","Being replaced by {@link TNT} /\n    @Deprecated\n    public static final BlockType Tnt = TNT;\n    public static final BlockType Bookshelf = new BlockType(47, 0, \"minecraft:bookshelf\");\n    public static final BlockType MossyCobble = new BlockType(48, 0, \"minecraft:mossy_cobblestone\");\n    public static final BlockType Obsidian = new BlockType(49, 0, \"minecraft:obsidian\");\n    public static final BlockType Torch = new BlockType(50, 0, \"minecraft:torch\");\n    public static final BlockType FireBlock = new BlockType(51, 0, \"minecraft:fire\");\n    public static final BlockType MobSpawner = new BlockType(52, 0, \"minecraft:mob_spawner\");\n    public static final BlockType OakStairs = new BlockType(53, 0, \"minecraft:oak_stairs\");\n    /**","Being replaced by {@link OakStairs} /\n    @Deprecated\n    public static final BlockType WoodenStair = OakStairs;\n    public static final BlockType Chest = new BlockType(54, 0, \"minecraft:chest\");\n    public static final BlockType RedstoneWire = new BlockType(55, 0, \"minecraft:redstone_wire\");\n    public static final BlockType DiamondOre = new BlockType(56, 0, \"minecraft:diamond_ore\");\n    public static final BlockType DiamondBlock = new BlockType(57, 0, \"minecraft:diamond_block\");\n    public static final BlockType Workbench = new BlockType(58, 0, \"minecraft:crafting_table\");\n    public static final BlockType Wheat = new BlockType(59, 0, \"minecraft:wheat\");\n    /**","Being replaced by {@link Wheat} /\n    @Deprecated\n    public static final BlockType Crops = Wheat;\n    public static final BlockType Farmland = new BlockType(60, 0, \"minecraft:farmland\");\n    /**","Being replaced by {@link Farmland} /\n    @Deprecated\n    public static final BlockType Soil = Farmland;\n    public static final BlockType Furnace = new BlockType(61, 0, \"minecraft:furnace\");\n    public static final BlockType BurningFurnace = new BlockType(62, 0, \"minecraft:lit_furnace\");\n    public static final BlockType StandingSign = new BlockType(63, 0, \"minecraft:standing_sign\");\n    /**","Being replaced by {@link StandingSign} /\n    @Deprecated\n    public static final BlockType SignPost = StandingSign;\n    public static final BlockType WoodenDoor = new BlockType(64, 0, \"minecraft:wooden_door\");\n    public static final BlockType OakDoor = WoodenDoor; // Dual Mapping for simplicity\n    public static final BlockType Ladder = new BlockType(65, 0, \"minecraft:ladder\");\n    public static final BlockType Rail = new BlockType(66, 0, \"minecraft:rail\");\n    public static final BlockType StoneStairs = new BlockType(67, 0, \"minecraft:stone_stairs\");\n    /**","Being replaced by {@link StoneStairs} /\n    @Deprecated\n    public static final BlockType CobbleStair = StoneStairs;\n    public static final BlockType WallSign = new BlockType(68, 0, \"minecraft:wall_sign\");\n    public static final BlockType Lever = new BlockType(69, 0, \"minecraft:lever\");\n    public static final BlockType StonePressurePlate = new BlockType(70, 0, \"minecraft:stone_pressure_plate\");\n    /**","Being replaced by {@link StonePressurePlate} /\n    @Deprecated\n    public static final BlockType StonePlate = StonePressurePlate;\n    public static final BlockType IronDoor = new BlockType(71, 0, \"minecraft:iron_door\");\n    public static final BlockType WoodenPressurePlate = new BlockType(72, 0, \"minecraft:wooden_pressure_plate\");\n    /**","Being replaced by {@link WoodenPressurePlate} /\n    @Deprecated\n    public static final BlockType WoodPlate = WoodenPressurePlate;\n    public static final BlockType RedstoneOre = new BlockType(73, 0, \"minecraft:redstone_ore\");\n    public static final BlockType GlowingRedstoneOre = new BlockType(74, 0, \"minecraft:lit_redstone_ore\");\n    public static final BlockType RedstoneTorchOff = new BlockType(75, 0, \"minecraft:unlit_redstone_torch\");\n    public static final BlockType RedstoneTorchOn = new BlockType(76, 0, \"minecraft:redstone_torch\");\n    public static final BlockType StoneButton = new BlockType(77, 0, \"minecraft:stone_button\");\n    public static final BlockType Snow = new BlockType(78, 0, \"minecraft:snow_layer\");\n    public static final BlockType Ice = new BlockType(79, 0, \"minecraft:ice\");\n    public static final BlockType SnowBlock = new BlockType(80, 0, \"minecraft:snow\");\n    public static final BlockType Cactus = new BlockType(81, 0, \"minecraft:cactus\");\n    public static final BlockType Clay = new BlockType(82, 0, \"minecraft:clay\");\n    public static final BlockType Reed = new BlockType(83, 0, \"minecraft:reeds\");\n    public static final BlockType Jukebox = new BlockType(84, 0, \"minecraft:jukebox\");\n    public static final BlockType Fence = new BlockType(85, 0, \"minecraft:fence\");\n    public static final BlockType Pumpkin = new BlockType(86, 0, \"minecraft:pumpkin\");\n    public static final BlockType Netherrack = new BlockType(87, 0, \"minecraft:netherrack\");\n    public static final BlockType SoulSand = new BlockType(88, 0, \"minecraft:soul_sand\");\n    public static final BlockType GlowStone = new BlockType(89, 0, \"minecraft:glowstone\");\n    public static final BlockType Portal = new BlockType(90, 0, \"minecraft:portal\");\n    public static final BlockType JackOLantern = new BlockType(91, 0, \"minecraft:lit_pumpkin\");\n    public static final BlockType Cake = new BlockType(92, 0, \"minecraft:cake\");\n    public static final BlockType RedstoneRepeaterOff = new BlockType(93, 0, \"minecraft:unpowered_repeater\");\n    public static final BlockType RedstoneRepeaterOn = new BlockType(94, 0, \"minecraft:powered_repeater\");\n    public static final BlockType WhiteGlass = new BlockType(95, 0, \"minecraft:stained_glass\");\n    public static final BlockType OrangeGlass = new BlockType(95, 1, \"minecraft:stained_glass\");\n    public static final BlockType MagentaGlass = new BlockType(95, 2, \"minecraft:stained_glass\");\n    public static final BlockType LightBlueGlass = new BlockType(95, 3, \"minecraft:stained_glass\");\n    public static final BlockType YellowGlass = new BlockType(95, 4, \"minecraft:stained_glass\");\n    public static final BlockType LimeGlass = new BlockType(95, 5, \"minecraft:stained_glass\");\n    public static final BlockType PinkGlass = new BlockType(95, 6, \"minecraft:stained_glass\");\n    public static final BlockType GrayGlass = new BlockType(95, 7, \"minecraft:stained_glass\");\n    public static final BlockType LightGrayGlass = new BlockType(95, 8, \"minecraft:stained_glass\");\n    public static final BlockType CyanGlass = new BlockType(95, 9, \"minecraft:stained_glass\");\n    public static final BlockType PurpleGlass = new BlockType(95, 10, \"minecraft:stained_glass\");\n    public static final BlockType BlueGlass = new BlockType(95, 11, \"minecraft:stained_glass\");\n    public static final BlockType BrownGlass = new BlockType(95, 12, \"minecraft:stained_glass\");\n    public static final BlockType GreenGlass = new BlockType(95, 13, \"minecraft:stained_glass\");\n    public static final BlockType RedGlass = new BlockType(95, 14, \"minecraft:stained_glass\");\n    public static final BlockType BlackGlass = new BlockType(95, 15, \"minecraft:stained_glass\");\n    public static final BlockType Trapdoor = new BlockType(96, 0, \"minecraft:trapdoor\");\n    public static final BlockType StoneSilverFishBlock = new BlockType(97, 0, \"minecraft:monster_egg\");\n    public static final BlockType CobbleSilverFishBlock = new BlockType(97, 1, \"minecraft:monster_egg\");\n    public static final BlockType StoneBrickSilverFishBlock = new BlockType(97, 2, \"minecraft:monster_egg\");\n    public static final BlockType MossyBrickSilverFishBlock = new BlockType(97, 3, \"minecraft:monster_egg\");\n    public static final BlockType CrackedSilverFishBlock = new BlockType(97, 4, \"minecraft:monster_egg\");\n    public static final BlockType ChiseledSilverFishBlock = new BlockType(97, 5, \"minecraft:monster_egg\");\n    /**","Being replaced by {@link ChiseledSilverFishBlock} /\n    @Deprecated\n    public static final BlockType OrnateSilverFishBlock = ChiseledSilverFishBlock;\n    public static final BlockType StoneBrick = new BlockType(98, 0, \"minecraft:stonebrick\");\n    public static final BlockType MossyStoneBrick = new BlockType(98, 1, \"minecraft:stonebrick\");\n    public static final BlockType CrackedStoneBrick = new BlockType(98, 2, \"minecraft:stonebrick\");\n    public static final BlockType ChiseledStoneBrick = new BlockType(98, 3, \"minecraft:stonebrick\");\n    /**","Being replaced by {@link ChiseledStoneBrick} /\n    @Deprecated\n    public static final BlockType OrnateStoneBrick = ChiseledStoneBrick;\n    public static final BlockType HugeBrownMushroom = new BlockType(99, 0, \"minecraft:brown_mushroom_block\");\n    public static final BlockType HugeRedMushroom = new BlockType(100, 0, \"minecraft:red_mushroom_block\");\n    public static final BlockType IronBars = new BlockType(101, 0, \"minecraft:iron_bars\");\n    public static final BlockType GlassPane = new BlockType(102, 0, \"minecraft:glass_pane\");\n    public static final BlockType Melon = new BlockType(103, 0, \"minecraft:melon_block\");\n    public static final BlockType PumpkinStem = new BlockType(104, 0, \"minecraft:pumpkin_stem\");\n    public static final BlockType MelonStem = new BlockType(105, 0, \"minecraft:melon_stem\");\n    public static final BlockType Vines = new BlockType(106, 0, \"minecraft:vine\");\n    public static final BlockType FenceGate = new BlockType(107, 0, \"minecraft:fence_gate\");\n    public static final BlockType BrickStairs = new BlockType(108, 0, \"minecraft:brick_stairs\");\n    /**","Being replaced by {@link BrickStairs} /\n    @Deprecated\n    public static final BlockType BrickStair = BrickStairs;\n    public static final BlockType StoneBrickStairs = new BlockType(109, 0, \"minecraft:stone_brick_stairs\");\n    /**","Being replaced by {@link StoneBrickStairs} /\n    @Deprecated\n    public static final BlockType StoneBrickStair = StoneBrickStairs;\n    public static final BlockType Mycelium = new BlockType(110, 0, \"minecraft:mycelium\");\n    public static final BlockType Lilypad = new BlockType(111, 0, \"minecraft:waterlily\");\n    public static final BlockType NetherBrick = new BlockType(112, 0, \"minecraft:nether_brick\");\n    public static final BlockType NetherBrickFence = new BlockType(113, 0, \"minecraft:nether_brick_fence\");\n    public static final BlockType NetherBrickStairs = new BlockType(114, 0, \"minecraft:nether_brick_stairs\");\n    /**","Being replaced by {@link NetherBrickStairs} /\n    @Deprecated\n    public static final BlockType NetherBrickStair = NetherBrickStairs;\n    public static final BlockType NetherWart = new BlockType(115, 0, \"minecraft:nether_wart\");\n    public static final BlockType EnchantmentTable = new BlockType(116, 0, \"minecraft:enchanting_table\");\n    public static final BlockType BrewingStand = new BlockType(117, 0, \"minecraft:brewing_stand\");\n    public static final BlockType Cauldron = new BlockType(118, 0, \"minecraft:cauldron\");\n    public static final BlockType EndPortal = new BlockType(119, 0, \"minecraft:end_portal\");\n    public static final BlockType EndPortalFrame = new BlockType(120, 0, \"minecraft:end_portal_frame\");\n    public static final BlockType EndStone = new BlockType(121, 0, \"minecraft:end_stone\");\n    public static final BlockType EnderDragonEgg = new BlockType(122, 0, \"minecraft:dragon_egg\");\n    public static final BlockType RedstoneLampOff = new BlockType(123, 0, \"minecraft:redstone_lamp\");\n    public static final BlockType RedstoneLampOn = new BlockType(124, 0, \"minecraft:lit_redstone_lamp\");\n    public static final BlockType DoubleOakWoodSlab = new BlockType(125, 0, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleSpruceWoodSlab = new BlockType(125, 1, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleBirchWoodSlab = new BlockType(125, 2, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleJungleWoodSlab = new BlockType(125, 3, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleAcaciaWoodSlab = new BlockType(125, 4, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleDarkOakWoodSlab = new BlockType(125, 5, \"minecraft:double_wooden_slab\");\n    public static final BlockType OakWoodSlab = new BlockType(126, 0, \"minecraft:wooden_slab\");\n    public static final BlockType SpruceWoodSlab = new BlockType(126, 1, \"minecraft:wooden_slab\");\n    public static final BlockType BirchWoodSlab = new BlockType(126, 2, \"minecraft:wooden_slab\");\n    public static final BlockType JungleWoodSlab = new BlockType(126, 3, \"minecraft:wooden_slab\");\n    public static final BlockType AcaciaWoodSlab = new BlockType(126, 4, \"minecraft:wooden_slab\");\n    public static final BlockType DarkOakWoodSlab = new BlockType(126, 5, \"minecraft:wooden_slab\");\n    public static final BlockType CocoaPlant = new BlockType(127, 0, \"minecraft:cocoa\");\n    public static final BlockType SandstoneStairs = new BlockType(128, 0, \"minecraft:sandstone_stairs\");\n    /**","Being replaced by {@link SandstoneStairs} /\n    @Deprecated\n    public static final BlockType SandstoneStair = SandstoneStairs;\n    public static final BlockType EmeraldOre = new BlockType(129, 0, \"minecraft:emerald_ore\");\n    public static final BlockType EnderChest = new BlockType(130, 0, \"minecraft:ender_chest\");\n    public static final BlockType TripwireHook = new BlockType(131, 0, \"minecraft:tripwire_hook\");\n    public static final BlockType Tripwire = new BlockType(132, 0, \"minecraft:tripwire\");\n    public static final BlockType EmeraldBlock = new BlockType(133, 0, \"minecraft:emerald_block\");\n    public static final BlockType SpruceStairs = new BlockType(134, 0, \"minecraft:spruce_stairs\");\n    public static final BlockType BirchStairs = new BlockType(135, 0, \"minecraft:birch_stairs\");\n    public static final BlockType JungleStairs = new BlockType(136, 0, \"minecraft:jungle_stairs\");\n    /**","Being replaced by {@link SpruceStairs} /\n    @Deprecated\n    public static final BlockType PineWoodStair = SpruceStairs;\n    /**","Being replaced by {@link BirchStairs} /\n    @Deprecated\n    public static final BlockType BirchWoodStair = BirchStairs;\n    /**","Being replaced by {@link JungleStairs} /\n    @Deprecated\n    public static final BlockType JungleWoodStair = JungleStairs;\n    public static final BlockType CommandBlock = new BlockType(137, 0, \"minecraft:command_block\");\n    public static final BlockType Beacon = new BlockType(138, 0, \"minecraft:beacon\");\n    public static final BlockType CobblestoneWall = new BlockType(139, 0, \"minecraft:cobblestone_wall\");\n    public static final BlockType MossyCobbleWall = new BlockType(139, 1, \"minecraft:cobblestone_wall\");\n    public static final BlockType Flowerpot = new BlockType(140, 0, \"minecraft:flower_pot\");\n    public static final BlockType Carrots = new BlockType(141, 0, \"minecraft:carrots\");\n    public static final BlockType Potatoes = new BlockType(142, 0, \"minecraft:potatoes\");\n    public static final BlockType WoodenButton = new BlockType(143, 0, \"minecraft:wooden_button\");\n    public static final BlockType Skull = new BlockType(144, 0, \"minecraft:skull\");\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType SkeletonHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType WitherSkeletonHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType ZombieHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType HumanHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType CreeperHead = Skull;\n    public static final BlockType Anvil = new BlockType(145, 0, \"minecraft:anvil\");\n    public static final BlockType TrappedChest = new BlockType(146, 0, \"minecraft:trapped_chest\");\n    public static final BlockType LightWeightedPressurePlate = new BlockType(147, 0, \"minecraft:light_weighted_pressure_plate\");\n    public static final BlockType HeavyWeightedPressurePlate = new BlockType(148, 0, \"minecraft:heavy_weighted_pressure_plate\");\n    public static final BlockType RedstoneComparator = new BlockType(149, 0, \"minecraft:unpowered_comparator\");\n    public static final BlockType RedstoneComparatorPowered = new BlockType(150, 0, \"minecraft:powered_comparator\");\n    public static final BlockType DaylightSensor = new BlockType(151, 0, \"minecraft:daylight_detector\");\n    public static final BlockType RedstoneBlock = new BlockType(152, 0, \"minecraft:redstone_block\");\n    public static final BlockType QuartzOre = new BlockType(153, 0, \"minecraft:quartz_ore\");\n    /**","Being replaced by {@link QuartzOre} /\n    @Deprecated\n    public static final BlockType NetherQuartzOre = QuartzOre;\n    public static final BlockType Hopper = new BlockType(154, 0, \"minecraft:hopper\");\n    public static final BlockType QuartzBlock = new BlockType(155, 0, \"minecraft:quartz_block\");\n    public static final BlockType ChiseledQuartzBlock = new BlockType(155, 1, \"minecraft:quartz_block\");\n    /**","Being replaced by {@link ChiseledQuartzBlock} /\n    @Deprecated\n    public static final BlockType OrnateQuartzBlock = ChiseledQuartzBlock;\n    public static final BlockType QuartzPillarVertical = new BlockType(155, 2, \"minecraft:quartz_block\");\n    public static final BlockType QuartzPillarHorizontal = new BlockType(155, 3, \"minecraft:quartz_block\");\n    public static final BlockType QuartzPillarCap = new BlockType(155, 4, \"minecraft:quartz_block\");\n    public static final BlockType QuartzStairs = new BlockType(156, 0, \"minecraft:quartz_stairs\");\n    public static final BlockType ActivatorRail = new BlockType(157, 0, \"minecraft:activator_rail\");\n    public static final BlockType Dropper = new BlockType(158, 0, \"minecraft:dropper\");\n    public static final BlockType WhiteStainedClay = new BlockType(159, 0, \"minecraft:stained_hardened_clay\");\n    public static final BlockType OrangeStainedClay = new BlockType(159, 1, \"minecraft:stained_hardened_clay\");\n    public static final BlockType MagentaStainedClay = new BlockType(159, 2, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LightBlueStainedClay = new BlockType(159, 3, \"minecraft:stained_hardened_clay\");\n    public static final BlockType YellowStainedClay = new BlockType(159, 4, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LimeStainedClay = new BlockType(159, 5, \"minecraft:stained_hardened_clay\");\n    public static final BlockType PinkStainedClay = new BlockType(159, 6, \"minecraft:stained_hardened_clay\");\n    public static final BlockType GrayStainedClay = new BlockType(159, 7, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LightGrayStainedClay = new BlockType(159, 8, \"minecraft:stained_hardened_clay\");\n    public static final BlockType CyanStainedClay = new BlockType(159, 9, \"minecraft:stained_hardened_clay\");\n    public static final BlockType PurpleStainedClay = new BlockType(159, 10, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BlueStainedClay = new BlockType(159, 11, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BrownStainedClay = new BlockType(159, 12, \"minecraft:stained_hardened_clay\");\n    public static final BlockType GreenStainedClay = new BlockType(159, 13, \"minecraft:stained_hardened_clay\");\n    public static final BlockType RedStainedClay = new BlockType(159, 14, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BlackStainedClay = new BlockType(159, 15, \"minecraft:stained_hardened_clay\");\n    public static final BlockType WhiteGlassPane = new BlockType(160, 0, \"minecraft:stained_glass_pane\");\n    public static final BlockType OrangeGlassPane = new BlockType(160, 1, \"minecraft:stained_glass_pane\");\n    public static final BlockType MagentaGlassPane = new BlockType(160, 2, \"minecraft:stained_glass_pane\");\n    public static final BlockType LightBlueGlassPane = new BlockType(160, 3, \"minecraft:stained_glass_pane\");\n    public static final BlockType YellowGlassPane = new BlockType(160, 4, \"minecraft:stained_glass_pane\");\n    public static final BlockType LimeGlassPane = new BlockType(160, 5, \"minecraft:stained_glass_pane\");\n    public static final BlockType PinkGlassPane = new BlockType(160, 6, \"minecraft:stained_glass_pane\");\n    public static final BlockType GrayGlassPane = new BlockType(160, 7, \"minecraft:stained_glass_pane\");\n    public static final BlockType LightGrayGlassPane = new BlockType(160, 8, \"minecraft:stained_glass_pane\");\n    public static final BlockType CyanGlassPane = new BlockType(160, 9, \"minecraft:stained_glass_pane\");\n    public static final BlockType PurpleGlassPane = new BlockType(160, 10, \"minecraft:stained_glass_pane\");\n    public static final BlockType BlueGlassPane = new BlockType(160, 11, \"minecraft:stained_glass_pane\");\n    public static final BlockType BrownGlassPane = new BlockType(160, 12, \"minecraft:stained_glass_pane\");\n    public static final BlockType GreenGlassPane = new BlockType(160, 13, \"minecraft:stained_glass_pane\");\n    public static final BlockType RedGlassPane = new BlockType(160, 14, \"minecraft:stained_glass_pane\");\n    public static final BlockType BlackGlassPane = new BlockType(160, 15, \"minecraft:stained_glass_pane\");\n    public static final BlockType AcaciaLeaves = new BlockType(161, 0, \"minecraft:leaves2\");\n    public static final BlockType DarkOakLeaves = new BlockType(161, 1, \"minecraft:leaves2\");\n    public static final BlockType AcaciaLog = new BlockType(162, 0, \"minecraft:log2\");\n    public static final BlockType DarkOakLog = new BlockType(162, 1, \"minecraft:log2\");\n    public static final BlockType AcaciaStairs = new BlockType(163, 0, \"minecraft:acacia_stairs\");\n    public static final BlockType DarkOakStairs = new BlockType(164, 0, \"minecraft:dark_oak_stairs\");\n    public static final BlockType SlimeBlock = new BlockType(165, 0, \"minecraft:slime\");\n    public static final BlockType Barrier = new BlockType(166, 0, \"minecraft:barrier\");\n    public static final BlockType IronTrapDoor = new BlockType(167, 0, \"minecraft:iron_trapdoor\");\n    public static final BlockType Prismarine = new BlockType(168, 0, \"minecraft:prismarine\");\n    public static final BlockType PrismarineBricks = new BlockType(168, 1, \"minecraft:prismarine\");\n    public static final BlockType DarkPrismarine = new BlockType(168, 2, \"minecraft:prismarine\");\n    public static final BlockType SeaLantern = new BlockType(169, 0, \"minecraft:sea_lantern\");\n    public static final BlockType HayBale = new BlockType(170, 0, \"minecraft:hay_block\");\n    public static final BlockType WhiteCarpet = new BlockType(171, 0, \"minecraft:carpet\");\n    public static final BlockType OrangeCarpet = new BlockType(171, 1, \"minecraft:carpet\");\n    public static final BlockType MagentaCarpet = new BlockType(171, 2, \"minecraft:carpet\");\n    public static final BlockType LightBlueCarpet = new BlockType(171, 3, \"minecraft:carpet\");\n    public static final BlockType YellowCarpet = new BlockType(171, 4, \"minecraft:carpet\");\n    public static final BlockType LimeCarpet = new BlockType(171, 5, \"minecraft:carpet\");\n    public static final BlockType PinkCarpet = new BlockType(171, 6, \"minecraft:carpet\");\n    public static final BlockType GrayCarpet = new BlockType(171, 7, \"minecraft:carpet\");\n    public static final BlockType LightGrayCarpet = new BlockType(171, 8, \"minecraft:carpet\");\n    public static final BlockType CyanCarpet = new BlockType(171, 9, \"minecraft:carpet\");\n    public static final BlockType PurpleCarpet = new BlockType(171, 10, \"minecraft:carpet\");\n    public static final BlockType BlueCarpet = new BlockType(171, 11, \"minecraft:carpet\");\n    public static final BlockType BrownCarpet = new BlockType(171, 12, \"minecraft:carpet\");\n    public static final BlockType GreenCarpet = new BlockType(171, 13, \"minecraft:carpet\");\n    public static final BlockType RedCarpet = new BlockType(171, 14, \"minecraft:carpet\");\n    public static final BlockType BlackCarpet = new BlockType(171, 15, \"minecraft:carpet\");\n    public static final BlockType HardenedClay = new BlockType(172, 0, \"minecraft:hardened_clay\");\n    public static final BlockType CoalBlock = new BlockType(173, 0, \"minecraft:coal_block\");\n    public static final BlockType PackedIce = new BlockType(174, 0, \"minecraft:packed_ice\");\n    public static final BlockType Sunflower = new BlockType(175, 0, \"minecraft:double_plant\");\n    public static final BlockType Lilac = new BlockType(175, 1, \"minecraft:double_plant\");\n    public static final BlockType DoubleGrass = new BlockType(175, 2, \"minecraft:double_plant\");\n    public static final BlockType LargeFern = new BlockType(175, 3, \"minecraft:double_plant\");\n    public static final BlockType RoseBush = new BlockType(175, 4, \"minecraft:double_plant\");\n    public static final BlockType Peony = new BlockType(175, 5, \"minecraft:double_plant\");\n    public static final BlockType StandingBanner = new BlockType(176, 0, \"minecraft:standing_banner\");\n    public static final BlockType WallBanner = new BlockType(177, 0, \"minecraft:wall_banner\");\n    public static final BlockType DaylightSensorInverted = new BlockType(178, 0, \"minecraft:daylight_detector_inverted\");\n    public static final BlockType RedSandstone = new BlockType(179, 0, \"minecraft:red_sandstone\");\n    public static final BlockType RedSandstoneChiseled = new BlockType(179, 1, \"minecraft:red_sandstone\");\n    public static final BlockType RedSandstoneSmooth = new BlockType(179, 2, \"minecraft:red_sandstone\");\n    /**","Being replaced by {@link RedSandstoneChiseled} /\n    @Deprecated\n    public static final BlockType RedSandstoneOrnate = RedSandstoneChiseled;\n    /**","Being replaced by {@link RedSandstoneChiseled}"]},"name":"RedSandstoneBlank","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","deprecated":true,"describe":"static final"},{"title":"RedSandstoneStairs field","description":"RedSandstoneStairs field","name":"RedSandstoneStairs","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"DoubleRedSandstoneSlab field","description":"DoubleRedSandstoneSlab field","name":"DoubleRedSandstoneSlab","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"RedSandstoneSlab field","description":"RedSandstoneSlab field","name":"RedSandstoneSlab","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"SpruceFenceGate field","description":"SpruceFenceGate field","name":"SpruceFenceGate","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"BirchFenceGate field","description":"BirchFenceGate field","name":"BirchFenceGate","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"JungleFenceGate field","description":"JungleFenceGate field","name":"JungleFenceGate","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"DarkOakFenceGate field","description":"DarkOakFenceGate field","name":"DarkOakFenceGate","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"AcaciaFenceGate field","description":"AcaciaFenceGate field","name":"AcaciaFenceGate","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"SpruceFence field","description":"SpruceFence field","name":"SpruceFence","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"BirchFence field","description":"BirchFence field","name":"BirchFence","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"JungleFence field","description":"JungleFence field","name":"JungleFence","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"DarkOakFence field","description":"DarkOakFence field","name":"DarkOakFence","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"AcaciaFence field","description":"AcaciaFence field","name":"AcaciaFence","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"SpruceDoor field","description":"SpruceDoor field","name":"SpruceDoor","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"BirchDoor field","description":"BirchDoor field","name":"BirchDoor","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"JungleDoor field","description":"JungleDoor field","name":"JungleDoor","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"AcaciaDoor field","description":"AcaciaDoor field","name":"AcaciaDoor","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"},{"title":"DarkOakDoor field","description":"DarkOakDoor field","name":"DarkOakDoor","scope":"public","type":"io.wolfscript.api.world.blocks.BlockType","describe":"static final"}],"methods":[{"title":"equals method","description":"equals method","scope":"public","return":"boolean","name":"equals","args":[{"name":"o","type":"Object","description":"o argument"}]},{"title":"hashCode method","description":"hashCode method","scope":"public","return":"int","name":"hashCode","args":[]},{"title":"toString method","description":"toString method","doc":{"deprecated":["Being replaced by {@link OakPlanks} /\n    @Deprecated\n    public static final BlockType OakWood = OakPlanks;\n    /**","Being replaced by {@link SprucePlanks} /\n    @Deprecated\n    public static final BlockType SpruceWood = SprucePlanks;\n    /**","Being replaced by {@link BirchPlanks} /\n    @Deprecated\n    public static final BlockType BirchWood = BirchPlanks;\n    /**","Being replaced by {@link JunglePlanks} /\n    @Deprecated\n    public static final BlockType JungleWood = JunglePlanks;\n    /**","Being replaced by {@link AcaciaPlanks} /\n    @Deprecated\n    public static final BlockType AcaciaWood = AcaciaPlanks;\n    /**","Being replaced by {@link DarkOakPlanks} /\n    @Deprecated\n    public static final BlockType DarkOakWood = DarkOakPlanks;\n    public static final BlockType OakSapling = new BlockType(6, 0, \"minecraft:sapling\");\n    public static final BlockType SpruceSapling = new BlockType(6, 1, \"minecraft:sapling\");\n    public static final BlockType BirchSapling = new BlockType(6, 2, \"minecraft:sapling\");\n    public static final BlockType JungleSapling = new BlockType(6, 3, \"minecraft:sapling\");\n    public static final BlockType AcaciaSapling = new BlockType(6, 4, \"minecraft:sapling\");\n    public static final BlockType DarkOakSapling = new BlockType(6, 5, \"minecraft:sapling\");\n    public static final BlockType Bedrock = new BlockType(7, 0, \"minecraft:bedrock\");\n    public static final BlockType WaterFlowing = new BlockType(8, 0, \"minecraft:flowing_water\");\n    public static final BlockType Water = new BlockType(9, 0, \"minecraft:water\");\n    public static final BlockType LavaFlowing = new BlockType(10, 0, \"minecraft:flowing_lava\");\n    public static final BlockType Lava = new BlockType(11, 0, \"minecraft:lava\");\n    public static final BlockType Sand = new BlockType(12, 0, \"minecraft:sand\");\n    public static final BlockType RedSand = new BlockType(12, 1, \"minecraft:sand\");\n    public static final BlockType Gravel = new BlockType(13, 0, \"minecraft:gravel\");\n    public static final BlockType GoldOre = new BlockType(14, 0, \"minecraft:gold_ore\");\n    public static final BlockType IronOre = new BlockType(15, 0, \"minecraft:iron_ore\");\n    public static final BlockType CoalOre = new BlockType(16, 0, \"minecraft:coal_ore\");\n    public static final BlockType OakLog = new BlockType(17, 0, \"minecraft:log\");\n    public static final BlockType SpruceLog = new BlockType(17, 1, \"minecraft:log\");\n    /**","Being replaced by {@link SpruceLog} /\n    @Deprecated\n    public static final BlockType PineLog = SpruceLog;\n    public static final BlockType BirchLog = new BlockType(17, 2, \"minecraft:log\");\n    public static final BlockType JungleLog = new BlockType(17, 3, \"minecraft:log\");\n    public static final BlockType OakLeaves = new BlockType(18, 0, \"minecraft:leaves\");\n    public static final BlockType SpruceLeaves = new BlockType(18, 1, \"minecraft:leaves\");\n    /**","Being replaced by {@link SpruceLeaves} /\n    @Deprecated\n    public static final BlockType PineLeaves = SpruceLeaves;\n    public static final BlockType BirchLeaves = new BlockType(18, 2, \"minecraft:leaves\");\n    public static final BlockType JungleLeaves = new BlockType(18, 3, \"minecraft:leaves\");\n    public static final BlockType Sponge = new BlockType(19, 0, \"minecraft:sponge\");\n    public static final BlockType Glass = new BlockType(20, 0, \"minecraft:glass\");\n    public static final BlockType LapisOre = new BlockType(21, 0, \"minecraft:lapis_ore\");\n    /**","Being replaced by {@link LapisOre} /\n    @Deprecated\n    public static final BlockType LapislazuliOre = LapisOre;\n    public static final BlockType LapisBlock = new BlockType(22, 0, \"minecraft:lapis_block\");\n    public static final BlockType Dispenser = new BlockType(23, 0, \"minecraft:dispenser\");\n    public static final BlockType Sandstone = new BlockType(24, 0, \"minecraft:sandstone\");\n    public static final BlockType SandstoneChiseled = new BlockType(24, 1, \"minecraft:sandstone\");\n    /**","Being replaced by {@link SandstoneChiseled} /\n    @Deprecated\n    public static final BlockType SandstoneOrnate = SandstoneChiseled;\n    public static final BlockType SandstoneSmooth = new BlockType(24, 2, \"minecraft:sandstone\");\n    /**","Being replaced by {@link SandstoneSmooth} /\n    @Deprecated\n    public static final BlockType SandstoneBlank = SandstoneSmooth;\n    public static final BlockType NoteBlock = new BlockType(25, 0, \"minecraft:noteblock\");\n    public static final BlockType Bed = new BlockType(26, 0, \"minecraft:bed\");\n    /**","Being replaced by {@link Bed} /\n    @Deprecated\n    public static final BlockType BedBlock = Bed;\n    public static final BlockType PoweredRail = new BlockType(27, 0, \"minecraft:golden_rail\");\n    public static final BlockType DetectorRail = new BlockType(28, 0, \"minecraft:detector_rail\");\n    public static final BlockType StickyPiston = new BlockType(29, 0, \"minecraft:sticky_piston\");\n    public static final BlockType Web = new BlockType(30, 0, \"minecraft:web\");\n    /**","Being replaced by {@link Web} /\n    @Deprecated\n    public static final BlockType SpiderWeb = Web;\n    public static final BlockType Shrub = new BlockType(31, 0, \"minecraft:tallgrass\");\n    public static final BlockType TallGrass = new BlockType(31, 1, \"minecraft:tallgrass\");\n    public static final BlockType Fern = new BlockType(31, 2, \"minecraft:tallgrass\");\n    public static final BlockType DeadBush = new BlockType(32, 0, \"minecraft:deadbush\");\n    public static final BlockType Piston = new BlockType(33, 0, \"minecraft:piston\");\n    public static final BlockType PistonHead = new BlockType(34, 0, \"minecraft:piston_head\");\n    public static final BlockType WhiteWool = new BlockType(35, 0, \"minecraft:wool\");\n    public static final BlockType OrangeWool = new BlockType(35, 1, \"minecraft:wool\");\n    public static final BlockType MagentaWool = new BlockType(35, 2, \"minecraft:wool\");\n    public static final BlockType LightBlueWool = new BlockType(35, 3, \"minecraft:wool\");\n    public static final BlockType YellowWool = new BlockType(35, 4, \"minecraft:wool\");\n    public static final BlockType LimeWool = new BlockType(35, 5, \"minecraft:wool\");\n    public static final BlockType PinkWool = new BlockType(35, 6, \"minecraft:wool\");\n    public static final BlockType GrayWool = new BlockType(35, 7, \"minecraft:wool\");\n    public static final BlockType LightGrayWool = new BlockType(35, 8, \"minecraft:wool\");\n    public static final BlockType CyanWool = new BlockType(35, 9, \"minecraft:wool\");\n    public static final BlockType PurpleWool = new BlockType(35, 10, \"minecraft:wool\");\n    public static final BlockType BlueWool = new BlockType(35, 11, \"minecraft:wool\");\n    public static final BlockType BrownWool = new BlockType(35, 12, \"minecraft:wool\");\n    public static final BlockType GreenWool = new BlockType(35, 13, \"minecraft:wool\");\n    public static final BlockType RedWool = new BlockType(35, 14, \"minecraft:wool\");\n    public static final BlockType BlackWool = new BlockType(35, 15, \"minecraft:wool\");\n    /**","Being replaced by {@link WhiteWool} /\n    @Deprecated\n    public static final BlockType WoolWhite = WhiteWool;\n    /**","Being replaced by {@link OrangeWool} /\n    @Deprecated\n    public static final BlockType WoolOrange = OrangeWool;\n    /**","Being replaced by {@link MagentaWool} /\n    @Deprecated\n    public static final BlockType WoolMagenta = MagentaWool;\n    /**","Being replaced by {@link LightBlueWool} /\n    @Deprecated\n    public static final BlockType WoolLightBlue = LightBlueWool;\n    /**","Being replaced by {@link YellowWool} /\n    @Deprecated\n    public static final BlockType WoolYellow = YellowWool;\n    /**","Being replaced by {@link LimeWool} /\n    @Deprecated\n    public static final BlockType WoolLightGreen = LimeWool;\n    /**","Being replaced by {@link LimeWool} /\n    @Deprecated\n    public static final BlockType WoolPink = PinkWool;\n    /**","Being replaced by {@link GrayWool} /\n    @Deprecated\n    public static final BlockType WoolGray = GrayWool;\n    /**","Being replaced by {@link LightGrayWool} /\n    @Deprecated\n    public static final BlockType WoolLightGray = LightGrayWool;\n    /**","Being replaced by {@link CyanWool} /\n    @Deprecated\n    public static final BlockType WoolCyan = CyanWool;\n    /**","Being replaced by {@link PurpleWool} /\n    @Deprecated\n    public static final BlockType WoolPurple = PurpleWool;\n    /**","Being replaced by {@link BlueWool} /\n    @Deprecated\n    public static final BlockType WoolBlue = BlueWool;\n    /**","Being replaced by {@link BrownWool} /\n    @Deprecated\n    public static final BlockType WoolBrown = BrownWool;\n    /**","Being replaced by {@link GreenWool} /\n    @Deprecated\n    public static final BlockType WoolDarkGreen = GreenWool;\n    /**","Being replaced by {@link RedWool} /\n    @Deprecated\n    public static final BlockType WoolRed = RedWool;\n    /**","Being replaced by {@link BlackWool} /\n    @Deprecated\n    public static final BlockType WoolBlack = BlackWool;\n    public static final BlockType PistonExtended = new BlockType(36, 0, \"minecraft:piston_extension\");\n    public static final BlockType Dandelion = new BlockType(37, 0, \"minecraft:yellow_flower\");\n    public static final BlockType Poppy = new BlockType(38, 0, \"minecraft:red_flower\");\n    public static final BlockType BlueOrchid = new BlockType(38, 1, \"minecraft:red_flower\");\n    public static final BlockType Allium = new BlockType(38, 2, \"minecraft:red_flower\");\n    public static final BlockType AzureBluet = new BlockType(38, 3, \"minecraft:red_flower\");\n    public static final BlockType RedTulip = new BlockType(38, 4, \"minecraft:red_flower\");\n    public static final BlockType OrangeTulip = new BlockType(38, 5, \"minecraft:red_flower\");\n    public static final BlockType WhiteTulip = new BlockType(38, 6, \"minecraft:red_flower\");\n    public static final BlockType PinkTulip = new BlockType(38, 7, \"minecraft:red_flower\");\n    public static final BlockType OxeyeDaisy = new BlockType(38, 8, \"minecraft:red_flower\");\n    public static final BlockType BrownMushroom = new BlockType(39, 0, \"minecraft:brown_mushroom\");\n    public static final BlockType RedMushroom = new BlockType(40, 0, \"minecraft:red_mushroom\");\n    public static final BlockType GoldBlock = new BlockType(41, 0, \"minecraft:gold_block\");\n    public static final BlockType IronBlock = new BlockType(42, 0, \"minecraft:iron_block\");\n    /** No longer seamless, see {@link io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties} /\n    public static final BlockType DoubleStoneSlab = new BlockType(43, 0, \"minecraft:double_stone_slab\");\n    /** No longer seamless, see {@link io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties} /\n    public static final BlockType DoubleSandStoneSlab = new BlockType(43, 1, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleWoodSlab = new BlockType(43, 2, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleCobbleSlab = new BlockType(43, 3, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleBrickSlab = new BlockType(43, 4, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleStoneBricksSlab = new BlockType(43, 5, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleNetherBrickSlab = new BlockType(43, 6, \"minecraft:double_stone_slab\");\n    public static final BlockType DoubleQuartzSlab = new BlockType(43, 7, \"minecraft:double_stone_slab\");\n    /**","Being replaced by {@link DoubleStoneSlab} /\n    @Deprecated\n    public static final BlockType DoubleOrnateStoneSlab = DoubleStoneSlab;\n    /**","Being replaced by {@link DoubleSandStoneSlab} /\n    @Deprecated\n    public static final BlockType DoubleSandStoneTrimSlab = DoubleSandStoneSlab;\n    /**","Being replaced by {@link DoubleBricksSlab} /\n    @Deprecated\n    public static final BlockType DoubleBrickBlockSlab = DoubleBrickSlab;\n    public static final BlockType StoneSlab = new BlockType(44, 0, \"minecraft:stone_slab\");\n    public static final BlockType SandStoneSlab = new BlockType(44, 1, \"minecraft:stone_slab\");\n    public static final BlockType WoodSlab = new BlockType(44, 2, \"minecraft:stone_slab\");\n    public static final BlockType CobbleSlab = new BlockType(44, 3, \"minecraft:stone_slab\");\n    public static final BlockType BrickSlab = new BlockType(44, 4, \"minecraft:stone_slab\");\n    public static final BlockType StoneBricksSlab = new BlockType(44, 5, \"minecraft:stone_slab\");\n    public static final BlockType NetherBricksSlab = new BlockType(44, 6, \"minecraft:stone_slab\");\n    public static final BlockType QuartzSlab = new BlockType(44, 7, \"minecraft:stone_slab\");\n    /**","Being replaced by {@link StoneSlab} /\n    @Deprecated\n    public static final BlockType OrnateStoneSlab = StoneSlab;\n    /**","Being replaced by {@link SandStoneSlab} /\n    @Deprecated\n    public static final BlockType SandStoneTrimSlab = SandStoneSlab;\n    /**","Being replaced by {@link BrickSlab} /\n    @Deprecated\n    public static final BlockType BrickBlockSlab = BrickSlab;\n    public static final BlockType Bricks = new BlockType(45, 0, \"minecraft:brick_block\");\n    public static final BlockType BrickBlock = Bricks;\n    public static final BlockType TNT = new BlockType(46, 0, \"minecraft:tnt\");\n    /**","Being replaced by {@link TNT} /\n    @Deprecated\n    public static final BlockType Tnt = TNT;\n    public static final BlockType Bookshelf = new BlockType(47, 0, \"minecraft:bookshelf\");\n    public static final BlockType MossyCobble = new BlockType(48, 0, \"minecraft:mossy_cobblestone\");\n    public static final BlockType Obsidian = new BlockType(49, 0, \"minecraft:obsidian\");\n    public static final BlockType Torch = new BlockType(50, 0, \"minecraft:torch\");\n    public static final BlockType FireBlock = new BlockType(51, 0, \"minecraft:fire\");\n    public static final BlockType MobSpawner = new BlockType(52, 0, \"minecraft:mob_spawner\");\n    public static final BlockType OakStairs = new BlockType(53, 0, \"minecraft:oak_stairs\");\n    /**","Being replaced by {@link OakStairs} /\n    @Deprecated\n    public static final BlockType WoodenStair = OakStairs;\n    public static final BlockType Chest = new BlockType(54, 0, \"minecraft:chest\");\n    public static final BlockType RedstoneWire = new BlockType(55, 0, \"minecraft:redstone_wire\");\n    public static final BlockType DiamondOre = new BlockType(56, 0, \"minecraft:diamond_ore\");\n    public static final BlockType DiamondBlock = new BlockType(57, 0, \"minecraft:diamond_block\");\n    public static final BlockType Workbench = new BlockType(58, 0, \"minecraft:crafting_table\");\n    public static final BlockType Wheat = new BlockType(59, 0, \"minecraft:wheat\");\n    /**","Being replaced by {@link Wheat} /\n    @Deprecated\n    public static final BlockType Crops = Wheat;\n    public static final BlockType Farmland = new BlockType(60, 0, \"minecraft:farmland\");\n    /**","Being replaced by {@link Farmland} /\n    @Deprecated\n    public static final BlockType Soil = Farmland;\n    public static final BlockType Furnace = new BlockType(61, 0, \"minecraft:furnace\");\n    public static final BlockType BurningFurnace = new BlockType(62, 0, \"minecraft:lit_furnace\");\n    public static final BlockType StandingSign = new BlockType(63, 0, \"minecraft:standing_sign\");\n    /**","Being replaced by {@link StandingSign} /\n    @Deprecated\n    public static final BlockType SignPost = StandingSign;\n    public static final BlockType WoodenDoor = new BlockType(64, 0, \"minecraft:wooden_door\");\n    public static final BlockType OakDoor = WoodenDoor; // Dual Mapping for simplicity\n    public static final BlockType Ladder = new BlockType(65, 0, \"minecraft:ladder\");\n    public static final BlockType Rail = new BlockType(66, 0, \"minecraft:rail\");\n    public static final BlockType StoneStairs = new BlockType(67, 0, \"minecraft:stone_stairs\");\n    /**","Being replaced by {@link StoneStairs} /\n    @Deprecated\n    public static final BlockType CobbleStair = StoneStairs;\n    public static final BlockType WallSign = new BlockType(68, 0, \"minecraft:wall_sign\");\n    public static final BlockType Lever = new BlockType(69, 0, \"minecraft:lever\");\n    public static final BlockType StonePressurePlate = new BlockType(70, 0, \"minecraft:stone_pressure_plate\");\n    /**","Being replaced by {@link StonePressurePlate} /\n    @Deprecated\n    public static final BlockType StonePlate = StonePressurePlate;\n    public static final BlockType IronDoor = new BlockType(71, 0, \"minecraft:iron_door\");\n    public static final BlockType WoodenPressurePlate = new BlockType(72, 0, \"minecraft:wooden_pressure_plate\");\n    /**","Being replaced by {@link WoodenPressurePlate} /\n    @Deprecated\n    public static final BlockType WoodPlate = WoodenPressurePlate;\n    public static final BlockType RedstoneOre = new BlockType(73, 0, \"minecraft:redstone_ore\");\n    public static final BlockType GlowingRedstoneOre = new BlockType(74, 0, \"minecraft:lit_redstone_ore\");\n    public static final BlockType RedstoneTorchOff = new BlockType(75, 0, \"minecraft:unlit_redstone_torch\");\n    public static final BlockType RedstoneTorchOn = new BlockType(76, 0, \"minecraft:redstone_torch\");\n    public static final BlockType StoneButton = new BlockType(77, 0, \"minecraft:stone_button\");\n    public static final BlockType Snow = new BlockType(78, 0, \"minecraft:snow_layer\");\n    public static final BlockType Ice = new BlockType(79, 0, \"minecraft:ice\");\n    public static final BlockType SnowBlock = new BlockType(80, 0, \"minecraft:snow\");\n    public static final BlockType Cactus = new BlockType(81, 0, \"minecraft:cactus\");\n    public static final BlockType Clay = new BlockType(82, 0, \"minecraft:clay\");\n    public static final BlockType Reed = new BlockType(83, 0, \"minecraft:reeds\");\n    public static final BlockType Jukebox = new BlockType(84, 0, \"minecraft:jukebox\");\n    public static final BlockType Fence = new BlockType(85, 0, \"minecraft:fence\");\n    public static final BlockType Pumpkin = new BlockType(86, 0, \"minecraft:pumpkin\");\n    public static final BlockType Netherrack = new BlockType(87, 0, \"minecraft:netherrack\");\n    public static final BlockType SoulSand = new BlockType(88, 0, \"minecraft:soul_sand\");\n    public static final BlockType GlowStone = new BlockType(89, 0, \"minecraft:glowstone\");\n    public static final BlockType Portal = new BlockType(90, 0, \"minecraft:portal\");\n    public static final BlockType JackOLantern = new BlockType(91, 0, \"minecraft:lit_pumpkin\");\n    public static final BlockType Cake = new BlockType(92, 0, \"minecraft:cake\");\n    public static final BlockType RedstoneRepeaterOff = new BlockType(93, 0, \"minecraft:unpowered_repeater\");\n    public static final BlockType RedstoneRepeaterOn = new BlockType(94, 0, \"minecraft:powered_repeater\");\n    public static final BlockType WhiteGlass = new BlockType(95, 0, \"minecraft:stained_glass\");\n    public static final BlockType OrangeGlass = new BlockType(95, 1, \"minecraft:stained_glass\");\n    public static final BlockType MagentaGlass = new BlockType(95, 2, \"minecraft:stained_glass\");\n    public static final BlockType LightBlueGlass = new BlockType(95, 3, \"minecraft:stained_glass\");\n    public static final BlockType YellowGlass = new BlockType(95, 4, \"minecraft:stained_glass\");\n    public static final BlockType LimeGlass = new BlockType(95, 5, \"minecraft:stained_glass\");\n    public static final BlockType PinkGlass = new BlockType(95, 6, \"minecraft:stained_glass\");\n    public static final BlockType GrayGlass = new BlockType(95, 7, \"minecraft:stained_glass\");\n    public static final BlockType LightGrayGlass = new BlockType(95, 8, \"minecraft:stained_glass\");\n    public static final BlockType CyanGlass = new BlockType(95, 9, \"minecraft:stained_glass\");\n    public static final BlockType PurpleGlass = new BlockType(95, 10, \"minecraft:stained_glass\");\n    public static final BlockType BlueGlass = new BlockType(95, 11, \"minecraft:stained_glass\");\n    public static final BlockType BrownGlass = new BlockType(95, 12, \"minecraft:stained_glass\");\n    public static final BlockType GreenGlass = new BlockType(95, 13, \"minecraft:stained_glass\");\n    public static final BlockType RedGlass = new BlockType(95, 14, \"minecraft:stained_glass\");\n    public static final BlockType BlackGlass = new BlockType(95, 15, \"minecraft:stained_glass\");\n    public static final BlockType Trapdoor = new BlockType(96, 0, \"minecraft:trapdoor\");\n    public static final BlockType StoneSilverFishBlock = new BlockType(97, 0, \"minecraft:monster_egg\");\n    public static final BlockType CobbleSilverFishBlock = new BlockType(97, 1, \"minecraft:monster_egg\");\n    public static final BlockType StoneBrickSilverFishBlock = new BlockType(97, 2, \"minecraft:monster_egg\");\n    public static final BlockType MossyBrickSilverFishBlock = new BlockType(97, 3, \"minecraft:monster_egg\");\n    public static final BlockType CrackedSilverFishBlock = new BlockType(97, 4, \"minecraft:monster_egg\");\n    public static final BlockType ChiseledSilverFishBlock = new BlockType(97, 5, \"minecraft:monster_egg\");\n    /**","Being replaced by {@link ChiseledSilverFishBlock} /\n    @Deprecated\n    public static final BlockType OrnateSilverFishBlock = ChiseledSilverFishBlock;\n    public static final BlockType StoneBrick = new BlockType(98, 0, \"minecraft:stonebrick\");\n    public static final BlockType MossyStoneBrick = new BlockType(98, 1, \"minecraft:stonebrick\");\n    public static final BlockType CrackedStoneBrick = new BlockType(98, 2, \"minecraft:stonebrick\");\n    public static final BlockType ChiseledStoneBrick = new BlockType(98, 3, \"minecraft:stonebrick\");\n    /**","Being replaced by {@link ChiseledStoneBrick} /\n    @Deprecated\n    public static final BlockType OrnateStoneBrick = ChiseledStoneBrick;\n    public static final BlockType HugeBrownMushroom = new BlockType(99, 0, \"minecraft:brown_mushroom_block\");\n    public static final BlockType HugeRedMushroom = new BlockType(100, 0, \"minecraft:red_mushroom_block\");\n    public static final BlockType IronBars = new BlockType(101, 0, \"minecraft:iron_bars\");\n    public static final BlockType GlassPane = new BlockType(102, 0, \"minecraft:glass_pane\");\n    public static final BlockType Melon = new BlockType(103, 0, \"minecraft:melon_block\");\n    public static final BlockType PumpkinStem = new BlockType(104, 0, \"minecraft:pumpkin_stem\");\n    public static final BlockType MelonStem = new BlockType(105, 0, \"minecraft:melon_stem\");\n    public static final BlockType Vines = new BlockType(106, 0, \"minecraft:vine\");\n    public static final BlockType FenceGate = new BlockType(107, 0, \"minecraft:fence_gate\");\n    public static final BlockType BrickStairs = new BlockType(108, 0, \"minecraft:brick_stairs\");\n    /**","Being replaced by {@link BrickStairs} /\n    @Deprecated\n    public static final BlockType BrickStair = BrickStairs;\n    public static final BlockType StoneBrickStairs = new BlockType(109, 0, \"minecraft:stone_brick_stairs\");\n    /**","Being replaced by {@link StoneBrickStairs} /\n    @Deprecated\n    public static final BlockType StoneBrickStair = StoneBrickStairs;\n    public static final BlockType Mycelium = new BlockType(110, 0, \"minecraft:mycelium\");\n    public static final BlockType Lilypad = new BlockType(111, 0, \"minecraft:waterlily\");\n    public static final BlockType NetherBrick = new BlockType(112, 0, \"minecraft:nether_brick\");\n    public static final BlockType NetherBrickFence = new BlockType(113, 0, \"minecraft:nether_brick_fence\");\n    public static final BlockType NetherBrickStairs = new BlockType(114, 0, \"minecraft:nether_brick_stairs\");\n    /**","Being replaced by {@link NetherBrickStairs} /\n    @Deprecated\n    public static final BlockType NetherBrickStair = NetherBrickStairs;\n    public static final BlockType NetherWart = new BlockType(115, 0, \"minecraft:nether_wart\");\n    public static final BlockType EnchantmentTable = new BlockType(116, 0, \"minecraft:enchanting_table\");\n    public static final BlockType BrewingStand = new BlockType(117, 0, \"minecraft:brewing_stand\");\n    public static final BlockType Cauldron = new BlockType(118, 0, \"minecraft:cauldron\");\n    public static final BlockType EndPortal = new BlockType(119, 0, \"minecraft:end_portal\");\n    public static final BlockType EndPortalFrame = new BlockType(120, 0, \"minecraft:end_portal_frame\");\n    public static final BlockType EndStone = new BlockType(121, 0, \"minecraft:end_stone\");\n    public static final BlockType EnderDragonEgg = new BlockType(122, 0, \"minecraft:dragon_egg\");\n    public static final BlockType RedstoneLampOff = new BlockType(123, 0, \"minecraft:redstone_lamp\");\n    public static final BlockType RedstoneLampOn = new BlockType(124, 0, \"minecraft:lit_redstone_lamp\");\n    public static final BlockType DoubleOakWoodSlab = new BlockType(125, 0, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleSpruceWoodSlab = new BlockType(125, 1, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleBirchWoodSlab = new BlockType(125, 2, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleJungleWoodSlab = new BlockType(125, 3, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleAcaciaWoodSlab = new BlockType(125, 4, \"minecraft:double_wooden_slab\");\n    public static final BlockType DoubleDarkOakWoodSlab = new BlockType(125, 5, \"minecraft:double_wooden_slab\");\n    public static final BlockType OakWoodSlab = new BlockType(126, 0, \"minecraft:wooden_slab\");\n    public static final BlockType SpruceWoodSlab = new BlockType(126, 1, \"minecraft:wooden_slab\");\n    public static final BlockType BirchWoodSlab = new BlockType(126, 2, \"minecraft:wooden_slab\");\n    public static final BlockType JungleWoodSlab = new BlockType(126, 3, \"minecraft:wooden_slab\");\n    public static final BlockType AcaciaWoodSlab = new BlockType(126, 4, \"minecraft:wooden_slab\");\n    public static final BlockType DarkOakWoodSlab = new BlockType(126, 5, \"minecraft:wooden_slab\");\n    public static final BlockType CocoaPlant = new BlockType(127, 0, \"minecraft:cocoa\");\n    public static final BlockType SandstoneStairs = new BlockType(128, 0, \"minecraft:sandstone_stairs\");\n    /**","Being replaced by {@link SandstoneStairs} /\n    @Deprecated\n    public static final BlockType SandstoneStair = SandstoneStairs;\n    public static final BlockType EmeraldOre = new BlockType(129, 0, \"minecraft:emerald_ore\");\n    public static final BlockType EnderChest = new BlockType(130, 0, \"minecraft:ender_chest\");\n    public static final BlockType TripwireHook = new BlockType(131, 0, \"minecraft:tripwire_hook\");\n    public static final BlockType Tripwire = new BlockType(132, 0, \"minecraft:tripwire\");\n    public static final BlockType EmeraldBlock = new BlockType(133, 0, \"minecraft:emerald_block\");\n    public static final BlockType SpruceStairs = new BlockType(134, 0, \"minecraft:spruce_stairs\");\n    public static final BlockType BirchStairs = new BlockType(135, 0, \"minecraft:birch_stairs\");\n    public static final BlockType JungleStairs = new BlockType(136, 0, \"minecraft:jungle_stairs\");\n    /**","Being replaced by {@link SpruceStairs} /\n    @Deprecated\n    public static final BlockType PineWoodStair = SpruceStairs;\n    /**","Being replaced by {@link BirchStairs} /\n    @Deprecated\n    public static final BlockType BirchWoodStair = BirchStairs;\n    /**","Being replaced by {@link JungleStairs} /\n    @Deprecated\n    public static final BlockType JungleWoodStair = JungleStairs;\n    public static final BlockType CommandBlock = new BlockType(137, 0, \"minecraft:command_block\");\n    public static final BlockType Beacon = new BlockType(138, 0, \"minecraft:beacon\");\n    public static final BlockType CobblestoneWall = new BlockType(139, 0, \"minecraft:cobblestone_wall\");\n    public static final BlockType MossyCobbleWall = new BlockType(139, 1, \"minecraft:cobblestone_wall\");\n    public static final BlockType Flowerpot = new BlockType(140, 0, \"minecraft:flower_pot\");\n    public static final BlockType Carrots = new BlockType(141, 0, \"minecraft:carrots\");\n    public static final BlockType Potatoes = new BlockType(142, 0, \"minecraft:potatoes\");\n    public static final BlockType WoodenButton = new BlockType(143, 0, \"minecraft:wooden_button\");\n    public static final BlockType Skull = new BlockType(144, 0, \"minecraft:skull\");\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType SkeletonHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType WitherSkeletonHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType ZombieHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType HumanHead = Skull;\n    /**","Variation are stored with the TileEntity, use {@link io.wolfscript.api.world.blocks.Skull} instead /\n    @Deprecated\n    public static final BlockType CreeperHead = Skull;\n    public static final BlockType Anvil = new BlockType(145, 0, \"minecraft:anvil\");\n    public static final BlockType TrappedChest = new BlockType(146, 0, \"minecraft:trapped_chest\");\n    public static final BlockType LightWeightedPressurePlate = new BlockType(147, 0, \"minecraft:light_weighted_pressure_plate\");\n    public static final BlockType HeavyWeightedPressurePlate = new BlockType(148, 0, \"minecraft:heavy_weighted_pressure_plate\");\n    public static final BlockType RedstoneComparator = new BlockType(149, 0, \"minecraft:unpowered_comparator\");\n    public static final BlockType RedstoneComparatorPowered = new BlockType(150, 0, \"minecraft:powered_comparator\");\n    public static final BlockType DaylightSensor = new BlockType(151, 0, \"minecraft:daylight_detector\");\n    public static final BlockType RedstoneBlock = new BlockType(152, 0, \"minecraft:redstone_block\");\n    public static final BlockType QuartzOre = new BlockType(153, 0, \"minecraft:quartz_ore\");\n    /**","Being replaced by {@link QuartzOre} /\n    @Deprecated\n    public static final BlockType NetherQuartzOre = QuartzOre;\n    public static final BlockType Hopper = new BlockType(154, 0, \"minecraft:hopper\");\n    public static final BlockType QuartzBlock = new BlockType(155, 0, \"minecraft:quartz_block\");\n    public static final BlockType ChiseledQuartzBlock = new BlockType(155, 1, \"minecraft:quartz_block\");\n    /**","Being replaced by {@link ChiseledQuartzBlock} /\n    @Deprecated\n    public static final BlockType OrnateQuartzBlock = ChiseledQuartzBlock;\n    public static final BlockType QuartzPillarVertical = new BlockType(155, 2, \"minecraft:quartz_block\");\n    public static final BlockType QuartzPillarHorizontal = new BlockType(155, 3, \"minecraft:quartz_block\");\n    public static final BlockType QuartzPillarCap = new BlockType(155, 4, \"minecraft:quartz_block\");\n    public static final BlockType QuartzStairs = new BlockType(156, 0, \"minecraft:quartz_stairs\");\n    public static final BlockType ActivatorRail = new BlockType(157, 0, \"minecraft:activator_rail\");\n    public static final BlockType Dropper = new BlockType(158, 0, \"minecraft:dropper\");\n    public static final BlockType WhiteStainedClay = new BlockType(159, 0, \"minecraft:stained_hardened_clay\");\n    public static final BlockType OrangeStainedClay = new BlockType(159, 1, \"minecraft:stained_hardened_clay\");\n    public static final BlockType MagentaStainedClay = new BlockType(159, 2, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LightBlueStainedClay = new BlockType(159, 3, \"minecraft:stained_hardened_clay\");\n    public static final BlockType YellowStainedClay = new BlockType(159, 4, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LimeStainedClay = new BlockType(159, 5, \"minecraft:stained_hardened_clay\");\n    public static final BlockType PinkStainedClay = new BlockType(159, 6, \"minecraft:stained_hardened_clay\");\n    public static final BlockType GrayStainedClay = new BlockType(159, 7, \"minecraft:stained_hardened_clay\");\n    public static final BlockType LightGrayStainedClay = new BlockType(159, 8, \"minecraft:stained_hardened_clay\");\n    public static final BlockType CyanStainedClay = new BlockType(159, 9, \"minecraft:stained_hardened_clay\");\n    public static final BlockType PurpleStainedClay = new BlockType(159, 10, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BlueStainedClay = new BlockType(159, 11, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BrownStainedClay = new BlockType(159, 12, \"minecraft:stained_hardened_clay\");\n    public static final BlockType GreenStainedClay = new BlockType(159, 13, \"minecraft:stained_hardened_clay\");\n    public static final BlockType RedStainedClay = new BlockType(159, 14, \"minecraft:stained_hardened_clay\");\n    public static final BlockType BlackStainedClay = new BlockType(159, 15, \"minecraft:stained_hardened_clay\");\n    public static final BlockType WhiteGlassPane = new BlockType(160, 0, \"minecraft:stained_glass_pane\");\n    public static final BlockType OrangeGlassPane = new BlockType(160, 1, \"minecraft:stained_glass_pane\");\n    public static final BlockType MagentaGlassPane = new BlockType(160, 2, \"minecraft:stained_glass_pane\");\n    public static final BlockType LightBlueGlassPane = new BlockType(160, 3, \"minecraft:stained_glass_pane\");\n    public static final BlockType YellowGlassPane = new BlockType(160, 4, \"minecraft:stained_glass_pane\");\n    public static final BlockType LimeGlassPane = new BlockType(160, 5, \"minecraft:stained_glass_pane\");\n    public static final BlockType PinkGlassPane = new BlockType(160, 6, \"minecraft:stained_glass_pane\");\n    public static final BlockType GrayGlassPane = new BlockType(160, 7, \"minecraft:stained_glass_pane\");\n    public static final BlockType LightGrayGlassPane = new BlockType(160, 8, \"minecraft:stained_glass_pane\");\n    public static final BlockType CyanGlassPane = new BlockType(160, 9, \"minecraft:stained_glass_pane\");\n    public static final BlockType PurpleGlassPane = new BlockType(160, 10, \"minecraft:stained_glass_pane\");\n    public static final BlockType BlueGlassPane = new BlockType(160, 11, \"minecraft:stained_glass_pane\");\n    public static final BlockType BrownGlassPane = new BlockType(160, 12, \"minecraft:stained_glass_pane\");\n    public static final BlockType GreenGlassPane = new BlockType(160, 13, \"minecraft:stained_glass_pane\");\n    public static final BlockType RedGlassPane = new BlockType(160, 14, \"minecraft:stained_glass_pane\");\n    public static final BlockType BlackGlassPane = new BlockType(160, 15, \"minecraft:stained_glass_pane\");\n    public static final BlockType AcaciaLeaves = new BlockType(161, 0, \"minecraft:leaves2\");\n    public static final BlockType DarkOakLeaves = new BlockType(161, 1, \"minecraft:leaves2\");\n    public static final BlockType AcaciaLog = new BlockType(162, 0, \"minecraft:log2\");\n    public static final BlockType DarkOakLog = new BlockType(162, 1, \"minecraft:log2\");\n    public static final BlockType AcaciaStairs = new BlockType(163, 0, \"minecraft:acacia_stairs\");\n    public static final BlockType DarkOakStairs = new BlockType(164, 0, \"minecraft:dark_oak_stairs\");\n    public static final BlockType SlimeBlock = new BlockType(165, 0, \"minecraft:slime\");\n    public static final BlockType Barrier = new BlockType(166, 0, \"minecraft:barrier\");\n    public static final BlockType IronTrapDoor = new BlockType(167, 0, \"minecraft:iron_trapdoor\");\n    public static final BlockType Prismarine = new BlockType(168, 0, \"minecraft:prismarine\");\n    public static final BlockType PrismarineBricks = new BlockType(168, 1, \"minecraft:prismarine\");\n    public static final BlockType DarkPrismarine = new BlockType(168, 2, \"minecraft:prismarine\");\n    public static final BlockType SeaLantern = new BlockType(169, 0, \"minecraft:sea_lantern\");\n    public static final BlockType HayBale = new BlockType(170, 0, \"minecraft:hay_block\");\n    public static final BlockType WhiteCarpet = new BlockType(171, 0, \"minecraft:carpet\");\n    public static final BlockType OrangeCarpet = new BlockType(171, 1, \"minecraft:carpet\");\n    public static final BlockType MagentaCarpet = new BlockType(171, 2, \"minecraft:carpet\");\n    public static final BlockType LightBlueCarpet = new BlockType(171, 3, \"minecraft:carpet\");\n    public static final BlockType YellowCarpet = new BlockType(171, 4, \"minecraft:carpet\");\n    public static final BlockType LimeCarpet = new BlockType(171, 5, \"minecraft:carpet\");\n    public static final BlockType PinkCarpet = new BlockType(171, 6, \"minecraft:carpet\");\n    public static final BlockType GrayCarpet = new BlockType(171, 7, \"minecraft:carpet\");\n    public static final BlockType LightGrayCarpet = new BlockType(171, 8, \"minecraft:carpet\");\n    public static final BlockType CyanCarpet = new BlockType(171, 9, \"minecraft:carpet\");\n    public static final BlockType PurpleCarpet = new BlockType(171, 10, \"minecraft:carpet\");\n    public static final BlockType BlueCarpet = new BlockType(171, 11, \"minecraft:carpet\");\n    public static final BlockType BrownCarpet = new BlockType(171, 12, \"minecraft:carpet\");\n    public static final BlockType GreenCarpet = new BlockType(171, 13, \"minecraft:carpet\");\n    public static final BlockType RedCarpet = new BlockType(171, 14, \"minecraft:carpet\");\n    public static final BlockType BlackCarpet = new BlockType(171, 15, \"minecraft:carpet\");\n    public static final BlockType HardenedClay = new BlockType(172, 0, \"minecraft:hardened_clay\");\n    public static final BlockType CoalBlock = new BlockType(173, 0, \"minecraft:coal_block\");\n    public static final BlockType PackedIce = new BlockType(174, 0, \"minecraft:packed_ice\");\n    public static final BlockType Sunflower = new BlockType(175, 0, \"minecraft:double_plant\");\n    public static final BlockType Lilac = new BlockType(175, 1, \"minecraft:double_plant\");\n    public static final BlockType DoubleGrass = new BlockType(175, 2, \"minecraft:double_plant\");\n    public static final BlockType LargeFern = new BlockType(175, 3, \"minecraft:double_plant\");\n    public static final BlockType RoseBush = new BlockType(175, 4, \"minecraft:double_plant\");\n    public static final BlockType Peony = new BlockType(175, 5, \"minecraft:double_plant\");\n    public static final BlockType StandingBanner = new BlockType(176, 0, \"minecraft:standing_banner\");\n    public static final BlockType WallBanner = new BlockType(177, 0, \"minecraft:wall_banner\");\n    public static final BlockType DaylightSensorInverted = new BlockType(178, 0, \"minecraft:daylight_detector_inverted\");\n    public static final BlockType RedSandstone = new BlockType(179, 0, \"minecraft:red_sandstone\");\n    public static final BlockType RedSandstoneChiseled = new BlockType(179, 1, \"minecraft:red_sandstone\");\n    public static final BlockType RedSandstoneSmooth = new BlockType(179, 2, \"minecraft:red_sandstone\");\n    /**","Being replaced by {@link RedSandstoneChiseled} /\n    @Deprecated\n    public static final BlockType RedSandstoneOrnate = RedSandstoneChiseled;\n    /**","Being replaced by {@link RedSandstoneChiseled} /\n    @Deprecated\n    public static final BlockType RedSandstoneBlank = RedSandstoneSmooth;\n    public static final BlockType RedSandstoneStairs = new BlockType(180, 0, \"minecraft:red_sandstone_stairs\");\n    public static final BlockType DoubleRedSandstoneSlab = new BlockType(181, 0, \"minecraft:double_stone_slab2\");\n    public static final BlockType RedSandstoneSlab = new BlockType(182, 0, \"minecraft:stone_slab2\");\n    public static final BlockType SpruceFenceGate = new BlockType(183, 0, \"minecraft:spruce_fence_gate\");\n    public static final BlockType BirchFenceGate = new BlockType(184, 0, \"minecraft:birch_fence_gate\");\n    public static final BlockType JungleFenceGate = new BlockType(185, 0, \"minecraft:jungle_fence_gate\");\n    public static final BlockType DarkOakFenceGate = new BlockType(186, 0, \"minecraft:dark_oak_fence_gate\");\n    public static final BlockType AcaciaFenceGate = new BlockType(187, 0, \"minecraft:acacia_fence_gate\");\n    public static final BlockType SpruceFence = new BlockType(188, 0, \"minecraft:spruce_fence\");\n    public static final BlockType BirchFence = new BlockType(189, 0, \"minecraft:birch_fence\");\n    public static final BlockType JungleFence = new BlockType(190, 0, \"minecraft:jungle_fence\");\n    public static final BlockType DarkOakFence = new BlockType(191, 0, \"minecraft:dark_oak_fence\");\n    public static final BlockType AcaciaFence = new BlockType(192, 0, \"minecraft:acacia_fence\");\n    public static final BlockType SpruceDoor = new BlockType(193, 0, \"minecraft:spruce_door\");\n    public static final BlockType BirchDoor = new BlockType(194, 0, \"minecraft:birch_door\");\n    public static final BlockType JungleDoor = new BlockType(195, 0, \"minecraft:jungle_door\");\n    public static final BlockType AcaciaDoor = new BlockType(196, 0, \"minecraft:acacia_door\");\n    public static final BlockType DarkOakDoor = new BlockType(197, 0, \"minecraft:dark_oak_door\");\n\n    private static HashMap<String, Map<Integer, BlockType>> blockTypes;\n    private static HashMap<Integer, Map<Integer, BlockType>> blocksByIdAndData;\n\n    private final Integer id;\n    private final Integer data;\n    private final String machineName;\n\n    public BlockType(int id, String machineName) {\n        this(id, 0, \"wolfscript:\" + machineName);\n    }\n\n    public BlockType(int id, String machineName, String mod) {\n        this(id, 0, mod + \":\" + machineName);\n    }\n\n    /** This will create this blockType and also add it to the BlockTypes cache, if a BlockType with the same name doesn't already exist. IF a BlockType with the given name already exists, nothing will happen to the BlockType list, you can still use this BlockType if you need to"],"param":["id the block id","data the block data","machineName the block's machine name (new-style ID) /\n    public BlockType(int id, int data, String machineName) {\n        if (blockTypes == null) {\n            blockTypes = new HashMap<String, Map<Integer, BlockType>>();\n            blocksByIdAndData = new HashMap<Integer, Map<Integer, BlockType>>();\n        }\n        if (machineName == null) {\n            throw new CustomBlockTypeException(\"BlockType name cannot be null!\");\n        }\n        this.id = id;\n        this.data = data;\n        this.machineName = machineName;\n        if (!blockTypes.containsKey(machineName)) {\n            Map<Integer, BlockType> map = new HashMap<Integer, BlockType>(3);\n            blockTypes.put(machineName, map);\n            blocksByIdAndData.put(id, map);\n        }\n        if (blockTypes.get(machineName).values().contains(this)) {\n            throw new CustomBlockTypeException(\"BlockType '\" + machineName + \":\" + data + \"' already exists!\");\n        }\n        blockTypes.get(machineName).put(data, this);\n    }\n\n    /** Get the ID of this BlockType","tests the types to check against","name the machine name of the block type in question","name the machine name of the block type in question","data the data of the block type in question","id the id","id the id","data the data value","name The machine name","machineName The machine name","data The metadata"],"return":["data /\n    public short getData() {\n        return data.shortValue();\n    }\n\n    /** Get the ID of this BlockType","id /\n    public short getId() {\n        return id.shortValue();\n    }\n\n    /** Returns a \"machine readable\" name. That is: a representation of the Block Type name in lowercase letters without whitespace.","machine name /\n    public String getMachineName() {\n        return machineName;\n    }\n\n    /** Checks BlockType for a given set of possible matches","{@code true} if matches on of the give types; {@code false} if no match at all /\n    public boolean matches(BlockType... tests) {\n        if (tests == null || tests.length < 1) {\n            return false;\n        }\n\n        for (BlockType test : tests) {\n            if (test != null && test.equals(this)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /** Get a custom block type. Returns null if the requested BlockType does not exist.","the custom {@link io.wolfscript.api.world.blocks.BlockType} /\n    public static BlockType getCustomBlockType(String name) {\n        return BlockType.getCustomBlockType(name, 0);\n    }\n\n    /** Get a custom block type. Returns null if the requested BlockType does not exist.","the custom {@link io.wolfscript.api.world.blocks.BlockType} /\n    public static BlockType getCustomBlockType(String name, int data) {\n        if (!blockTypes.containsKey(name)) {\n            return null;\n        }\n        return blockTypes.get(name).get(data);\n    }\n\n    /** Get the BlockType according to the given ID. This will return null if there is no BlockType with this id.","the associated {@link io.wolfscript.api.world.blocks.BlockType} or {@code null} /\n    public static BlockType fromId(int id) {\n        BlockType blockType = null;\n        final Map<Integer, BlockType> map = blocksByIdAndData.get(id);\n        if (map != null && !map.isEmpty()) {\n            blockType = map.get(0);\n        }\n        return blockType;\n    }\n\n    /** Get the BlockType according to the given ID and Data. This will return null if there is no BlockType with this id and data.","the associated {@link io.wolfscript.api.world.blocks.BlockType} or {@code null} /\n    public static BlockType fromIdAndData(int id, int data) {\n        BlockType blockType = null;\n        final Map<Integer, BlockType> map = blocksByIdAndData.get(id);\n        if (map != null) {\n            blockType = map.get(data);\n        }\n        return blockType;\n    }\n\n    /** Returns a BlockType according to its name. This returns null if there is no BlockType with this name.","the associated {@link io.wolfscript.api.world.blocks.BlockType} or {@code null} /\n    public static BlockType fromString(String name) {\n        String temp = name;\n        int data = 0;\n        if (!blockTypes.containsKey(name)) {\n            if (name != null && name.matches(\".+:.+:\\\\d+\")) {\n                temp = name.replaceAll(\":\\\\d+\", \"\");\n                try {\n                    data = Integer.parseInt(name.replaceAll(\".+:.+:\", \"\"));\n                }\n                catch (NumberFormatException nfex) {\n                    // Ignored\n                }\n            }\n            else {\n                // Perhaps try by adding a namespace\n                temp = \"minecraft:\" + temp;\n                if (!blockTypes.containsKey(temp)) {\n                    return null;\n                }\n            }\n        }\n        return blockTypes.get(temp).get(data);\n    }\n\n    /** Returns a BlockType according to its name and data. This returns null if there is no BlockType with this name and data.","the associated {@link io.wolfscript.api.world.blocks.BlockType} or {@code null} /\n    public static BlockType fromStringAndData(String machineName, int data) {\n        if (!blockTypes.containsKey(machineName)) {\n            return null;\n        }\n        BlockType t = blockTypes.get(machineName).get(data);\n        return t == null ? fromString(machineName) : t;\n    }\n\n    /** Gets an array of all BlockTypes.","all BlockTypes /\n    public static BlockType[] values() {\n        List<BlockType> list = new ArrayList<BlockType>();\n        for (Map<Integer, BlockType> blocks : blockTypes.values()) {\n            list.addAll(blocks.values());\n        }\n        return list.toArray(new BlockType[list.size()]);\n    }\n\n    /** Returns a String formatted as \"ID:DATA[MACHINENAME]\""]},"scope":"public","return":"String","name":"toString","args":[]}],"imports":["java.util.ArrayList","java.util.HashMap","java.util.List","java.util.Map"],"properties":[]},"io.wolfscript.api.world.blocks.BrewingStand":{"namespace":"io.wolfscript.api.world.blocks","title":"BrewingStand interface","description":"BrewingStand interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"BrewingStand","qualifiedname":"io.wolfscript.api.world.blocks.BrewingStand","type":"interface","scope":"public","extends":["LockableTileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.Comparator":{"namespace":"io.wolfscript.api.world.blocks","title":"Comparator wrapper","description":"Comparator wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Comparator","qualifiedname":"io.wolfscript.api.world.blocks.Comparator","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.CustomBlockTypeException":{"namespace":"io.wolfscript.api.world.blocks","title":"Thrown when dealing with custom BlockTypes that don't exist or already exist","description":"Thrown when dealing with custom BlockTypes that don't exist or already exist","doc":{"author":["Chris (damagefilter)"]},"name":"CustomBlockTypeException","qualifiedname":"io.wolfscript.api.world.blocks.CustomBlockTypeException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"CustomBlockTypeException constructor","description":"CustomBlockTypeException constructor","scope":"public","name":"CustomBlockTypeException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.DaylightDetector":{"namespace":"io.wolfscript.api.world.blocks","title":"DaylightDetector wrapper","description":"DaylightDetector wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"DaylightDetector","qualifiedname":"io.wolfscript.api.world.blocks.DaylightDetector","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.Dispenser":{"namespace":"io.wolfscript.api.world.blocks","title":"Dispenser interface","description":"Dispenser interface","doc":{"author":["Jason (darkdiplomat)"]},"name":"Dispenser","qualifiedname":"io.wolfscript.api.world.blocks.Dispenser","type":"interface","scope":"public","extends":["LockableTileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.Entity"],"properties":[]},"io.wolfscript.api.world.blocks.DoubleChest":{"namespace":"io.wolfscript.api.world.blocks","title":"DoubleChest interface","description":"DoubleChest interface","doc":{"author":["Chris (damagefilter)"]},"name":"DoubleChest","qualifiedname":"io.wolfscript.api.world.blocks.DoubleChest","type":"interface","scope":"public","extends":["Chest"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.Dropper":{"namespace":"io.wolfscript.api.world.blocks","title":"Dropper wrapper","description":"Dropper wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Dropper","qualifiedname":"io.wolfscript.api.world.blocks.Dropper","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.Dispenser"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.EnderChest":{"namespace":"io.wolfscript.api.world.blocks","title":"An EnderChest is not treated as a regular chest by extending Container<T>","description":"An EnderChest is not treated as a regular chest by extending Container<T> as one block does not have an inventory attached. The inventory visible to the player is attached to the player instead.","doc":{"author":["Jos Kuijpers"]},"name":"EnderChest","qualifiedname":"io.wolfscript.api.world.blocks.EnderChest","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Inventory"],"properties":[]},"io.wolfscript.api.world.blocks.Furnace":{"namespace":"io.wolfscript.api.world.blocks","title":"Furnace wrapper","description":"Furnace wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Furnace","qualifiedname":"io.wolfscript.api.world.blocks.Furnace","type":"interface","scope":"public","extends":["LockableTileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.Jukebox":{"namespace":"io.wolfscript.api.world.blocks","title":"Wrap a TileEntityNote etc","description":"Wrap a TileEntityNote etc","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Jukebox","qualifiedname":"io.wolfscript.api.world.blocks.Jukebox","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.inventory.Item"],"properties":[]},"io.wolfscript.api.world.blocks.MapColor":{"namespace":"io.wolfscript.api.world.blocks","title":"Map Color wrapper","description":"Map Color wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"MapColor","qualifiedname":"io.wolfscript.api.world.blocks.MapColor","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.MapColorList":{"namespace":"io.wolfscript.api.world.blocks","title":"MapColor listings","description":"MapColor listings","doc":{"author":["Jason (darkdiplomat)"]},"name":"MapColorList","qualifiedname":"io.wolfscript.api.world.blocks.MapColorList","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.annotations.Beta"],"enum":[{"code":"AIR","value":"","title":"AIR MapColorList","description":"AIR MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GRASS","value":"","title":"GRASS MapColorList","description":"GRASS MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SAND","value":"","title":"SAND MapColorList","description":"SAND MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CLOTH","value":"","title":"CLOTH MapColorList","description":"CLOTH MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"TNT","value":"","title":"TNT MapColorList","description":"TNT MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ICE","value":"","title":"ICE MapColorList","description":"ICE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"IRON","value":"","title":"IRON MapColorList","description":"IRON MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"FOLIAGE","value":"","title":"FOLIAGE MapColorList","description":"FOLIAGE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SNOW","value":"","title":"SNOW MapColorList","description":"SNOW MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CLAY","value":"","title":"CLAY MapColorList","description":"CLAY MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DIRT","value":"","title":"DIRT MapColorList","description":"DIRT MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"STONE","value":"","title":"STONE MapColorList","description":"STONE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WATER","value":"","title":"WATER MapColorList","description":"WATER MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"WOOD","value":"","title":"WOOD MapColorList","description":"WOOD MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"QUARTZ","value":"","title":"QUARTZ MapColorList","description":"QUARTZ MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"ADOBE","value":"","title":"ADOBE MapColorList","description":"ADOBE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"MAGENTA","value":"","title":"MAGENTA MapColorList","description":"MAGENTA MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIGHTBLUE","value":"","title":"LIGHTBLUE MapColorList","description":"LIGHTBLUE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"YELLOW","value":"","title":"YELLOW MapColorList","description":"YELLOW MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LIME","value":"","title":"LIME MapColorList","description":"LIME MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PINK","value":"","title":"PINK MapColorList","description":"PINK MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GRAY","value":"","title":"GRAY MapColorList","description":"GRAY MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"SILVER","value":"","title":"SILVER MapColorList","description":"SILVER MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"CYAN","value":"","title":"CYAN MapColorList","description":"CYAN MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"PURPLE","value":"","title":"PURPLE MapColorList","description":"PURPLE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BLUE","value":"","title":"BLUE MapColorList","description":"BLUE MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BROWN","value":"","title":"BROWN MapColorList","description":"BROWN MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GREEN","value":"","title":"GREEN MapColorList","description":"GREEN MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"RED","value":"","title":"RED MapColorList","description":"RED MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"BLACK","value":"","title":"BLACK MapColorList","description":"BLACK MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"GOLD","value":"","title":"GOLD MapColorList","description":"GOLD MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"DIAMOND","value":"","title":"DIAMOND MapColorList","description":"DIAMOND MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"LAPIS","value":"","title":"LAPIS MapColorList","description":"LAPIS MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"EMERALD","value":"","title":"EMERALD MapColorList","description":"EMERALD MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OBSIDIAN","value":"","title":"OBSIDIAN MapColorList","description":"OBSIDIAN MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"NETHERRACK","value":"","title":"NETHERRACK MapColorList","description":"NETHERRACK MapColorList","doc":{"author":["Jason (darkdiplomat)"]}},{"code":"OTHER,","value":"","title":"OTHER, MapColorList","description":"OTHER, MapColorList","doc":{"author":["Jason (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.MobSpawner":{"namespace":"io.wolfscript.api.world.blocks","title":"MobSpawner Wrapper","description":"MobSpawner Wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"MobSpawner","qualifiedname":"io.wolfscript.api.world.blocks.MobSpawner","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.MobSpawnerLogic"],"properties":[]},"io.wolfscript.api.world.blocks.NoteBlock":{"namespace":"io.wolfscript.api.world.blocks","title":"Wrap a TileEntityNote etc","description":"Wrap a TileEntityNote etc","doc":{"author":["Chris (damagefilter)"]},"name":"NoteBlock","qualifiedname":"io.wolfscript.api.world.blocks.NoteBlock","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.Sign":{"namespace":"io.wolfscript.api.world.blocks","title":"Sign wrapper interface","description":"Sign wrapper interface","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Sign","qualifiedname":"io.wolfscript.api.world.blocks.Sign","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":["io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.api.world.blocks.Skull":{"namespace":"io.wolfscript.api.world.blocks","title":"Skull wrapper","description":"Skull wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Skull","qualifiedname":"io.wolfscript.api.world.blocks.Skull","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.TileEntity"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.TileEntity":{"namespace":"io.wolfscript.api.world.blocks","title":"TileEntity wrapper","description":"TileEntity wrapper","doc":{"author":["Chris Ksoll","Jason Jones"]},"name":"TileEntity","qualifiedname":"io.wolfscript.api.world.blocks.TileEntity","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.nbt.CompoundTag","io.wolfscript.api.world.World"],"properties":[]},"io.wolfscript.api.world.blocks.VanillaBlock":{"namespace":"io.wolfscript.api.world.blocks","title":"An enumeration of \"vanilla\" Minecraft blocks","description":"An enumeration of \"vanilla\" Minecraft blocks","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"VanillaBlock","qualifiedname":"io.wolfscript.api.world.blocks.VanillaBlock","type":"enum","scope":"public","constructors":[],"methods":[{"title":"All NON-VANILLA blocks safety translation","description":"All NON-VANILLA blocks safety translation /\n    NULL(\"NULL\");\n\n    private final String mapping;\n\n    VanillaBlock(String mapping) {\n        this.mapping = \"minecraft:\".concat(mapping);\n    }\n\n    /** Gets the matching {@link io.wolfscript.api.world.blocks.BlockType} for the {@code VanillaBlock}","doc":{"return":["matching {@code VanillaBlock} or {@code null} if not match is found /\n    public BlockType getType() {\n        if (this.equals(NULL)) {\n            return null;\n        }\n        return mappings.inverse().get(this);\n    }\n\n    /** Converts a {@link io.wolfscript.api.world.blocks.BlockType} to a {@code VanillaBlocks}","the matching {@code VanillaBlock}"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.VanillaBlock","name":"enumerate","args":[{"name":"type","type":"io.wolfscript.api.world.blocks.BlockType","description":"the {@link io.wolfscript.api.world.blocks.BlockType} to convert"}]}],"imports":["com.google.common.collect.HashBiMap"],"enum":[{"code":"AIR","value":"\"air\"","title":"AIR VanillaBlock","description":"AIR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONE","value":"\"stone:0\"","title":"STONE VanillaBlock","description":"STONE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRANITE","value":"\"stone:1\"","title":"GRANITE VanillaBlock","description":"GRANITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POLISHEDGRANITE","value":"\"stone:2\"","title":"POLISHEDGRANITE VanillaBlock","description":"POLISHEDGRANITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DIORITE","value":"\"stone:3\"","title":"DIORITE VanillaBlock","description":"DIORITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POLISHEDDIORITE","value":"\"stone:4\"","title":"POLISHEDDIORITE VanillaBlock","description":"POLISHEDDIORITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ANDESITE","value":"\"stone:5\"","title":"ANDESITE VanillaBlock","description":"ANDESITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POLISHEDANDESITE","value":"\"stone:6\"","title":"POLISHEDANDESITE VanillaBlock","description":"POLISHEDANDESITE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRASS","value":"\"grass\"","title":"GRASS VanillaBlock","description":"GRASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DIRT","value":"\"dirt:0\"","title":"DIRT VanillaBlock","description":"DIRT VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COARSEDIRT","value":"\"dirt:1\"","title":"COARSEDIRT VanillaBlock","description":"COARSEDIRT VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PODZOL","value":"\"dirt:2\"","title":"PODZOL VanillaBlock","description":"PODZOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COBBLE","value":"\"cobblestone\"","title":"COBBLE VanillaBlock","description":"COBBLE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKPLANKS","value":"\"planks:0\"","title":"OAKPLANKS VanillaBlock","description":"OAKPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCEPLANKS","value":"\"planks:1\"","title":"SPRUCEPLANKS VanillaBlock","description":"SPRUCEPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHPLANKS","value":"\"planks:2\"","title":"BIRCHPLANKS VanillaBlock","description":"BIRCHPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEPLANKS","value":"\"planks:3\"","title":"JUNGLEPLANKS VanillaBlock","description":"JUNGLEPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIAPLANKS","value":"\"planks:4\"","title":"ACACIAPLANKS VanillaBlock","description":"ACACIAPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKPLANKS","value":"\"planks:5\"","title":"DARKOAKPLANKS VanillaBlock","description":"DARKOAKPLANKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKSAPLING","value":"\"sapling:0\"","title":"OAKSAPLING VanillaBlock","description":"OAKSAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCESAPLING","value":"\"sapling:1\"","title":"SPRUCESAPLING VanillaBlock","description":"SPRUCESAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHSAPLING","value":"\"sapling:2\"","title":"BIRCHSAPLING VanillaBlock","description":"BIRCHSAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLESAPLING","value":"\"sapling:3\"","title":"JUNGLESAPLING VanillaBlock","description":"JUNGLESAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIASAPLING","value":"\"sapling:4\"","title":"ACACIASAPLING VanillaBlock","description":"ACACIASAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKSAPLING","value":"\"sapling:5\"","title":"DARKOAKSAPLING VanillaBlock","description":"DARKOAKSAPLING VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BEDROCK","value":"\"bedrock\"","title":"BEDROCK VanillaBlock","description":"BEDROCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FLOWINGWATER","value":"\"flowing_water\"","title":"FLOWINGWATER VanillaBlock","description":"FLOWINGWATER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WATER","value":"\"water\"","title":"WATER VanillaBlock","description":"WATER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FLOWINGLAVA","value":"\"flowing_lava\"","title":"FLOWINGLAVA VanillaBlock","description":"FLOWINGLAVA VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LAVA","value":"\"lava\"","title":"LAVA VanillaBlock","description":"LAVA VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SAND","value":"\"sand:0\"","title":"SAND VanillaBlock","description":"SAND VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSAND","value":"\"sand:1\"","title":"REDSAND VanillaBlock","description":"REDSAND VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAVEL","value":"\"gravel\"","title":"GRAVEL VanillaBlock","description":"GRAVEL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GOLDORE","value":"\"gold_ore\"","title":"GOLDORE VanillaBlock","description":"GOLDORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"IRONORE","value":"\"iron_ore\"","title":"IRONORE VanillaBlock","description":"IRONORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COALORE","value":"\"coal_ore\"","title":"COALORE VanillaBlock","description":"COALORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKLOG","value":"\"log:0\"","title":"OAKLOG VanillaBlock","description":"OAKLOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCELOG","value":"\"log:1\"","title":"SPRUCELOG VanillaBlock","description":"SPRUCELOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHLOG","value":"\"log:2\"","title":"BIRCHLOG VanillaBlock","description":"BIRCHLOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLELOG","value":"\"log:3\"","title":"JUNGLELOG VanillaBlock","description":"JUNGLELOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKLEAVES","value":"\"leaves:0\"","title":"OAKLEAVES VanillaBlock","description":"OAKLEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCELEAVES","value":"\"leaves:1\"","title":"SPRUCELEAVES VanillaBlock","description":"SPRUCELEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHLEAVES","value":"\"leaves:2\"","title":"BIRCHLEAVES VanillaBlock","description":"BIRCHLEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLELEAVES","value":"\"leaves:3\"","title":"JUNGLELEAVES VanillaBlock","description":"JUNGLELEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPONGE","value":"\"sponge\"","title":"SPONGE VanillaBlock","description":"SPONGE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GLASS","value":"\"glass\"","title":"GLASS VanillaBlock","description":"GLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LAPISORE","value":"\"lapis_ore\"","title":"LAPISORE VanillaBlock","description":"LAPISORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LAPISBLOCK","value":"\"lapis_block\"","title":"LAPISBLOCK VanillaBlock","description":"LAPISBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DISPENSER","value":"\"dispenser\"","title":"DISPENSER VanillaBlock","description":"DISPENSER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SANDSTONE","value":"\"sandstone:0\"","title":"SANDSTONE VanillaBlock","description":"SANDSTONE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SANDSTONECHISELED","value":"\"sandstone:1\"","title":"SANDSTONECHISELED VanillaBlock","description":"SANDSTONECHISELED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SANDSTONESMOOTH","value":"\"sandstone:2\"","title":"SANDSTONESMOOTH VanillaBlock","description":"SANDSTONESMOOTH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NOTEBLOCK","value":"\"noteblock\"","title":"NOTEBLOCK VanillaBlock","description":"NOTEBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BED","value":"\"bed\"","title":"BED VanillaBlock","description":"BED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POWEREDRAIL","value":"\"golden_rail\"","title":"POWEREDRAIL VanillaBlock","description":"POWEREDRAIL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DETECTORRAIL","value":"\"detector_rail\"","title":"DETECTORRAIL VanillaBlock","description":"DETECTORRAIL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STICKYPISTON","value":"\"sticky_piston\"","title":"STICKYPISTON VanillaBlock","description":"STICKYPISTON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WEB","value":"\"web\"","title":"WEB VanillaBlock","description":"WEB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SHRUB","value":"\"tallgrass:0\"","title":"SHRUB VanillaBlock","description":"SHRUB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TALLGRASS","value":"\"tallgrass:1\"","title":"TALLGRASS VanillaBlock","description":"TALLGRASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FERN","value":"\"tallgrass:2\"","title":"FERN VanillaBlock","description":"FERN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DEADBUSH","value":"\"deadbush\"","title":"DEADBUSH VanillaBlock","description":"DEADBUSH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PISTON","value":"\"piston\"","title":"PISTON VanillaBlock","description":"PISTON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PISTONHEAD","value":"\"piston_head\"","title":"PISTONHEAD VanillaBlock","description":"PISTONHEAD VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITEWOOL","value":"\"wool:0\"","title":"WHITEWOOL VanillaBlock","description":"WHITEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANGEWOOL","value":"\"wool:1\"","title":"ORANGEWOOL VanillaBlock","description":"ORANGEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MAGENTAWOOL","value":"\"wool:2\"","title":"MAGENTAWOOL VanillaBlock","description":"MAGENTAWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTBLUEWOOL","value":"\"wool:3\"","title":"LIGHTBLUEWOOL VanillaBlock","description":"LIGHTBLUEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"YELLOWOOL","value":"\"wool:4\"","title":"YELLOWOOL VanillaBlock","description":"YELLOWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIMEWOOL","value":"\"wool:5\"","title":"LIMEWOOL VanillaBlock","description":"LIMEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKWOOL","value":"\"wool:6\"","title":"PINKWOOL VanillaBlock","description":"PINKWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAYWOOL","value":"\"wool:7\"","title":"GRAYWOOL VanillaBlock","description":"GRAYWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTGRAYWOOL","value":"\"wool:8\"","title":"LIGHTGRAYWOOL VanillaBlock","description":"LIGHTGRAYWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CYANWOOL","value":"\"wool:9\"","title":"CYANWOOL VanillaBlock","description":"CYANWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PURPLEWOOL","value":"\"wool:10\"","title":"PURPLEWOOL VanillaBlock","description":"PURPLEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUEWOOL","value":"\"wool:11\"","title":"BLUEWOOL VanillaBlock","description":"BLUEWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNWOOL","value":"\"wool:12\"","title":"BROWNWOOL VanillaBlock","description":"BROWNWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GREENWOOL","value":"\"wool:13\"","title":"GREENWOOL VanillaBlock","description":"GREENWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDWOOL","value":"\"wool:14\"","title":"REDWOOL VanillaBlock","description":"REDWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLACKWOOL","value":"\"wool:15\"","title":"BLACKWOOL VanillaBlock","description":"BLACKWOOL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PISTONEXTENSION","value":"\"piston_extension\"","title":"PISTONEXTENSION VanillaBlock","description":"PISTONEXTENSION VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DANDELION","value":"\"yellow_flower\"","title":"DANDELION VanillaBlock","description":"DANDELION VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POPPY","value":"\"red_flower:0\"","title":"POPPY VanillaBlock","description":"POPPY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUEORCHID","value":"\"red_flower:1\"","title":"BLUEORCHID VanillaBlock","description":"BLUEORCHID VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ALLIUM","value":"\"red_flower:2\"","title":"ALLIUM VanillaBlock","description":"ALLIUM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"AZUREBLUET","value":"\"red_flower:3\"","title":"AZUREBLUET VanillaBlock","description":"AZUREBLUET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDTULIP","value":"\"red_flower:4\"","title":"REDTULIP VanillaBlock","description":"REDTULIP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANGETULIP","value":"\"red_flower:5\"","title":"ORANGETULIP VanillaBlock","description":"ORANGETULIP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITETULIP","value":"\"red_flower:6\"","title":"WHITETULIP VanillaBlock","description":"WHITETULIP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKTULIP","value":"\"red_flower:7\"","title":"PINKTULIP VanillaBlock","description":"PINKTULIP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OXEYEDAISY","value":"\"red_flower:8\"","title":"OXEYEDAISY VanillaBlock","description":"OXEYEDAISY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNMUSHROOM","value":"\"brown_mushroom\"","title":"BROWNMUSHROOM VanillaBlock","description":"BROWNMUSHROOM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDMUSHROOM","value":"\"red_mushroom\"","title":"REDMUSHROOM VanillaBlock","description":"REDMUSHROOM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GOLDBLOCK","value":"\"gold_block\"","title":"GOLDBLOCK VanillaBlock","description":"GOLDBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"IRONBLOCK","value":"\"iron_block\"","title":"IRONBLOCK VanillaBlock","description":"IRONBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLESTONESLAB","value":"\"double_stone_slab:0\"","title":"DOUBLESTONESLAB VanillaBlock","description":"DOUBLESTONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLESANDSTONESLAB","value":"\"double_stone_slab:1\"","title":"DOUBLESANDSTONESLAB VanillaBlock","description":"DOUBLESANDSTONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEWOODSLAB","value":"\"double_stone_slab:2\"","title":"DOUBLEWOODSLAB VanillaBlock","description":"DOUBLEWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLECOBBLESLAB","value":"\"double_stone_slab:3\"","title":"DOUBLECOBBLESLAB VanillaBlock","description":"DOUBLECOBBLESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEBRICKSLAB","value":"\"double_stone_slab:4\"","title":"DOUBLEBRICKSLAB VanillaBlock","description":"DOUBLEBRICKSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLESTONEBRICKSLAB","value":"\"double_stone_slab:5\"","title":"DOUBLESTONEBRICKSLAB VanillaBlock","description":"DOUBLESTONEBRICKSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLENETHERBRICKSLAB","value":"\"double_stone_slab:6\"","title":"DOUBLENETHERBRICKSLAB VanillaBlock","description":"DOUBLENETHERBRICKSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEQUARTZSLAB","value":"\"double_stone_slab:7\"","title":"DOUBLEQUARTZSLAB VanillaBlock","description":"DOUBLEQUARTZSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONESLAB","value":"\"stone_slab:0\"","title":"STONESLAB VanillaBlock","description":"STONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SANDSTONESLAB","value":"\"stone_slab:1\"","title":"SANDSTONESLAB VanillaBlock","description":"SANDSTONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WOODSLAB","value":"\"stone_slab:2\"","title":"WOODSLAB VanillaBlock","description":"WOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COBBLESLAB","value":"\"stone_slab:3\"","title":"COBBLESLAB VanillaBlock","description":"COBBLESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BRICKSLAB","value":"\"stone_slab:4\"","title":"BRICKSLAB VanillaBlock","description":"BRICKSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEBRICKSSLAB","value":"\"stone_slab:5\"","title":"STONEBRICKSSLAB VanillaBlock","description":"STONEBRICKSSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERBRICKSSLAB","value":"\"stone_slab:6\"","title":"NETHERBRICKSSLAB VanillaBlock","description":"NETHERBRICKSSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZSLAB","value":"\"stone_slab:7\"","title":"QUARTZSLAB VanillaBlock","description":"QUARTZSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BRICKS","value":"\"brick_block\"","title":"BRICKS VanillaBlock","description":"BRICKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TNT","value":"\"tnt\"","title":"TNT VanillaBlock","description":"TNT VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BOOKSHELF","value":"\"bookshelf\"","title":"BOOKSHELF VanillaBlock","description":"BOOKSHELF VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MOSSYCOBBLE","value":"\"mossy_cobblestone\"","title":"MOSSYCOBBLE VanillaBlock","description":"MOSSYCOBBLE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OBSIDIAN","value":"\"obsidian\"","title":"OBSIDIAN VanillaBlock","description":"OBSIDIAN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TORCH","value":"\"torch\"","title":"TORCH VanillaBlock","description":"TORCH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FIRE","value":"\"fire\"","title":"FIRE VanillaBlock","description":"FIRE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MOBSPAWNER","value":"\"mob_spawner\"","title":"MOBSPAWNER VanillaBlock","description":"MOBSPAWNER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKSTAIRS","value":"\"oak_stairs\"","title":"OAKSTAIRS VanillaBlock","description":"OAKSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CHEST","value":"\"chest\"","title":"CHEST VanillaBlock","description":"CHEST VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONEWIRE","value":"\"redstone_wire\"","title":"REDSTONEWIRE VanillaBlock","description":"REDSTONEWIRE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DIAMONDORE","value":"\"diamond_ore\"","title":"DIAMONDORE VanillaBlock","description":"DIAMONDORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DIAMONDBLOCK","value":"\"diamond_block\"","title":"DIAMONDBLOCK VanillaBlock","description":"DIAMONDBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WORKBENCH","value":"\"crafting_table\"","title":"WORKBENCH VanillaBlock","description":"WORKBENCH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHEAT","value":"\"wheat\"","title":"WHEAT VanillaBlock","description":"WHEAT VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FARMLAND","value":"\"farmland\"","title":"FARMLAND VanillaBlock","description":"FARMLAND VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FURNACE","value":"\"furnace\"","title":"FURNACE VanillaBlock","description":"FURNACE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LITFURNACE","value":"\"lit_furnace\"","title":"LITFURNACE VanillaBlock","description":"LITFURNACE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STANDINGSIGN","value":"\"standing_sign\"","title":"STANDINGSIGN VanillaBlock","description":"STANDINGSIGN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WOODENDOOR","value":"\"wooden_door\"","title":"WOODENDOOR VanillaBlock","description":"WOODENDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LADDER","value":"\"ladder\"","title":"LADDER VanillaBlock","description":"LADDER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"RAIL","value":"\"rail\"","title":"RAIL VanillaBlock","description":"RAIL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONESTAIRS","value":"\"stone_stairs\"","title":"STONESTAIRS VanillaBlock","description":"STONESTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WALLSIGN","value":"\"wall_sign\"","title":"WALLSIGN VanillaBlock","description":"WALLSIGN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LEVER","value":"\"lever\"","title":"LEVER VanillaBlock","description":"LEVER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEPRESSUREPLATE","value":"\"stone_pressure_plate\"","title":"STONEPRESSUREPLATE VanillaBlock","description":"STONEPRESSUREPLATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"IRONDOOR","value":"\"iron_door\"","title":"IRONDOOR VanillaBlock","description":"IRONDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WOODENPRESSUREPLATE","value":"\"wooden_pressure_plate\"","title":"WOODENPRESSUREPLATE VanillaBlock","description":"WOODENPRESSUREPLATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONEORE","value":"\"redstone_ore\"","title":"REDSTONEORE VanillaBlock","description":"REDSTONEORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LITREDSTONEORE","value":"\"lit_redstone_ore\"","title":"LITREDSTONEORE VanillaBlock","description":"LITREDSTONEORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"UNLITREDSTONETORCH","value":"\"unlit_redstone_torch\"","title":"UNLITREDSTONETORCH VanillaBlock","description":"UNLITREDSTONETORCH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONETORCH","value":"\"redstone_torch\"","title":"REDSTONETORCH VanillaBlock","description":"REDSTONETORCH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEBUTTON","value":"\"stone_button\"","title":"STONEBUTTON VanillaBlock","description":"STONEBUTTON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SNOWLAYER","value":"\"snow_layer\"","title":"SNOWLAYER VanillaBlock","description":"SNOWLAYER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ICE","value":"\"ice\"","title":"ICE VanillaBlock","description":"ICE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SNOW","value":"\"snow\"","title":"SNOW VanillaBlock","description":"SNOW VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CACTUS","value":"\"cactus\"","title":"CACTUS VanillaBlock","description":"CACTUS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CLAY","value":"\"clay\"","title":"CLAY VanillaBlock","description":"CLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REED","value":"\"reeds\"","title":"REED VanillaBlock","description":"REED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUKEBOX","value":"\"jukebox\"","title":"JUKEBOX VanillaBlock","description":"JUKEBOX VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FENCE","value":"\"fence\"","title":"FENCE VanillaBlock","description":"FENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PUMPKIN","value":"\"pumpkin\"","title":"PUMPKIN VanillaBlock","description":"PUMPKIN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERRACK","value":"\"netherrack\"","title":"NETHERRACK VanillaBlock","description":"NETHERRACK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SOULSAND","value":"\"soul_sand\"","title":"SOULSAND VanillaBlock","description":"SOULSAND VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GLOWSTONE","value":"\"glowstone\"","title":"GLOWSTONE VanillaBlock","description":"GLOWSTONE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PORTAL","value":"\"portal\"","title":"PORTAL VanillaBlock","description":"PORTAL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JACKOLANTERN","value":"\"lit_pumpkin\"","title":"JACKOLANTERN VanillaBlock","description":"JACKOLANTERN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CAKE","value":"\"cake\"","title":"CAKE VanillaBlock","description":"CAKE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONEREPEATEROFF","value":"\"unpowered_repeater\"","title":"REDSTONEREPEATEROFF VanillaBlock","description":"REDSTONEREPEATEROFF VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONEREPEATERON","value":"\"powered_repeater\"","title":"REDSTONEREPEATERON VanillaBlock","description":"REDSTONEREPEATERON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITESTAINEDGLASS","value":"\"stained_glass:0\"","title":"WHITESTAINEDGLASS VanillaBlock","description":"WHITESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANGESTAINEDGLASS","value":"\"stained_glass:1\"","title":"ORANGESTAINEDGLASS VanillaBlock","description":"ORANGESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MAGENTASTAINEDGLASS","value":"\"stained_glass:2\"","title":"MAGENTASTAINEDGLASS VanillaBlock","description":"MAGENTASTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTBLUESTAINEDGLASS","value":"\"stained_glass:3\"","title":"LIGHTBLUESTAINEDGLASS VanillaBlock","description":"LIGHTBLUESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"YELLOWSTAINEDGLASS","value":"\"stained_glass:4\"","title":"YELLOWSTAINEDGLASS VanillaBlock","description":"YELLOWSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIMESTAINEDGLASS","value":"\"stained_glass:5\"","title":"LIMESTAINEDGLASS VanillaBlock","description":"LIMESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKSTAINEDGLASS","value":"\"stained_glass:6\"","title":"PINKSTAINEDGLASS VanillaBlock","description":"PINKSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAYSTAINEDGLASS","value":"\"stained_glass:7\"","title":"GRAYSTAINEDGLASS VanillaBlock","description":"GRAYSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTGRAYSTAINEDGLASS","value":"\"stained_glass:8\"","title":"LIGHTGRAYSTAINEDGLASS VanillaBlock","description":"LIGHTGRAYSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CYANSTAINEDGLASS","value":"\"stained_glass:9\"","title":"CYANSTAINEDGLASS VanillaBlock","description":"CYANSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PURPLESTAINEDGLASS","value":"\"stained_glass:10\"","title":"PURPLESTAINEDGLASS VanillaBlock","description":"PURPLESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUESTAINEDGLASS","value":"\"stained_glass:11\"","title":"BLUESTAINEDGLASS VanillaBlock","description":"BLUESTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNSTAINEDGLASS","value":"\"stained_glass:12\"","title":"BROWNSTAINEDGLASS VanillaBlock","description":"BROWNSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GREENSTAINEDGLASS","value":"\"stained_glass:13\"","title":"GREENSTAINEDGLASS VanillaBlock","description":"GREENSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTAINEDGLASS","value":"\"stained_glass:14\"","title":"REDSTAINEDGLASS VanillaBlock","description":"REDSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLACKSTAINEDGLASS","value":"\"stained_glass:15\"","title":"BLACKSTAINEDGLASS VanillaBlock","description":"BLACKSTAINEDGLASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TRAPDOOR","value":"\"trapdoor\"","title":"TRAPDOOR VanillaBlock","description":"TRAPDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEMONSTEREGG","value":"\"monster_egg:0\"","title":"STONEMONSTEREGG VanillaBlock","description":"STONEMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COBBLEMONSTEREGG","value":"\"monster_egg:1\"","title":"COBBLEMONSTEREGG VanillaBlock","description":"COBBLEMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEBRICKMONSTEREGG","value":"\"monster_egg:2\"","title":"STONEBRICKMONSTEREGG VanillaBlock","description":"STONEBRICKMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MOSSYSTONEBRICKMONSTEREGG","value":"\"monster_egg:3\"","title":"MOSSYSTONEBRICKMONSTEREGG VanillaBlock","description":"MOSSYSTONEBRICKMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CRACKEDSTONEBRICKMONSTEREGG","value":"\"monster_egg:4\"","title":"CRACKEDSTONEBRICKMONSTEREGG VanillaBlock","description":"CRACKEDSTONEBRICKMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CHISELEDSTONEBRICKMONSTEREGG","value":"\"monster_egg:5\"","title":"CHISELEDSTONEBRICKMONSTEREGG VanillaBlock","description":"CHISELEDSTONEBRICKMONSTEREGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEBRICK","value":"\"stonebrick:0\"","title":"STONEBRICK VanillaBlock","description":"STONEBRICK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MOSSYSTONEBRICK","value":"\"stonebrick:1\"","title":"MOSSYSTONEBRICK VanillaBlock","description":"MOSSYSTONEBRICK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CRACKEDSTONEBRICK","value":"\"stonebrick:2\"","title":"CRACKEDSTONEBRICK VanillaBlock","description":"CRACKEDSTONEBRICK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CHISELEDSTONEBRICK","value":"\"stonebrick:3\"","title":"CHISELEDSTONEBRICK VanillaBlock","description":"CHISELEDSTONEBRICK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HUGEBROWNMUSHROOM","value":"\"brown_mushroom_block\"","title":"HUGEBROWNMUSHROOM VanillaBlock","description":"HUGEBROWNMUSHROOM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HUGEREDMUSHROOM","value":"\"red_mushroom_block\"","title":"HUGEREDMUSHROOM VanillaBlock","description":"HUGEREDMUSHROOM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"IRONBARS","value":"\"iron_bars\"","title":"IRONBARS VanillaBlock","description":"IRONBARS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GLASSPANE","value":"\"glass_pane\"","title":"GLASSPANE VanillaBlock","description":"GLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MELON","value":"\"melon_block\"","title":"MELON VanillaBlock","description":"MELON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PUMPKINSTEM","value":"\"pumpkin_stem\"","title":"PUMPKINSTEM VanillaBlock","description":"PUMPKINSTEM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MELONSTEM","value":"\"melon_stem\"","title":"MELONSTEM VanillaBlock","description":"MELONSTEM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"VINE","value":"\"vine\"","title":"VINE VanillaBlock","description":"VINE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FENCEGATE","value":"\"fence_gate\"","title":"FENCEGATE VanillaBlock","description":"FENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BRICKSTAIRS","value":"\"brick_stairs\"","title":"BRICKSTAIRS VanillaBlock","description":"BRICKSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STONEBRICKSTAIRS","value":"\"stone_brick_stairs\"","title":"STONEBRICKSTAIRS VanillaBlock","description":"STONEBRICKSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MYCELIUM","value":"\"mycelium\"","title":"MYCELIUM VanillaBlock","description":"MYCELIUM VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LILYPAD","value":"\"waterlily\"","title":"LILYPAD VanillaBlock","description":"LILYPAD VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERBRICK","value":"\"nether_brick\"","title":"NETHERBRICK VanillaBlock","description":"NETHERBRICK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERBRICKFENCE","value":"\"nether_brick_fence\"","title":"NETHERBRICKFENCE VanillaBlock","description":"NETHERBRICKFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERBRICKSTAIRS","value":"\"nether_brick_stairs\"","title":"NETHERBRICKSTAIRS VanillaBlock","description":"NETHERBRICKSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NETHERWART","value":"\"nether_wart\"","title":"NETHERWART VanillaBlock","description":"NETHERWART VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENCHANTMENTTABLE","value":"\"enchanting_table\"","title":"ENCHANTMENTTABLE VanillaBlock","description":"ENCHANTMENTTABLE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BREWINGSTAND","value":"\"brewing_stand\"","title":"BREWINGSTAND VanillaBlock","description":"BREWINGSTAND VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CAULDRON","value":"\"cauldron\"","title":"CAULDRON VanillaBlock","description":"CAULDRON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENDPORTAL","value":"\"end_portal\"","title":"ENDPORTAL VanillaBlock","description":"ENDPORTAL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENDPORTALFRAME","value":"\"end_portal_frame\"","title":"ENDPORTALFRAME VanillaBlock","description":"ENDPORTALFRAME VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENDSTONE","value":"\"end_stone\"","title":"ENDSTONE VanillaBlock","description":"ENDSTONE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENDERDRAGONEGG","value":"\"dragon_egg\"","title":"ENDERDRAGONEGG VanillaBlock","description":"ENDERDRAGONEGG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONELAMP","value":"\"redstone_lamp\"","title":"REDSTONELAMP VanillaBlock","description":"REDSTONELAMP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LITREDSTONELAMP","value":"\"lit_redstone_lamp\"","title":"LITREDSTONELAMP VanillaBlock","description":"LITREDSTONELAMP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEOAKWOODSLAB","value":"\"double_wooden_slab:0\"","title":"DOUBLEOAKWOODSLAB VanillaBlock","description":"DOUBLEOAKWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLESPRUCEWOODSLAB","value":"\"double_wooden_slab:1\"","title":"DOUBLESPRUCEWOODSLAB VanillaBlock","description":"DOUBLESPRUCEWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEBIRCHWOODSLAB","value":"\"double_wooden_slab:2\"","title":"DOUBLEBIRCHWOODSLAB VanillaBlock","description":"DOUBLEBIRCHWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEJUNGLEWOODSLAB","value":"\"double_wooden_slab:3\"","title":"DOUBLEJUNGLEWOODSLAB VanillaBlock","description":"DOUBLEJUNGLEWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEACACIAWOODSLAB","value":"\"double_wooden_slab:4\"","title":"DOUBLEACACIAWOODSLAB VanillaBlock","description":"DOUBLEACACIAWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEDARKOAKWOODSLAB","value":"\"double_wooden_slab:5\"","title":"DOUBLEDARKOAKWOODSLAB VanillaBlock","description":"DOUBLEDARKOAKWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"OAKWOODSLAB","value":"\"wooden_slab:0\"","title":"OAKWOODSLAB VanillaBlock","description":"OAKWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCEWOODSLAB","value":"\"wooden_slab:1\"","title":"SPRUCEWOODSLAB VanillaBlock","description":"SPRUCEWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHWOODSLAB","value":"\"wooden_slab:2\"","title":"BIRCHWOODSLAB VanillaBlock","description":"BIRCHWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEWOODSLAB","value":"\"wooden_slab:3\"","title":"JUNGLEWOODSLAB VanillaBlock","description":"JUNGLEWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIAWOODSLAB","value":"\"wooden_slab:4\"","title":"ACACIAWOODSLAB VanillaBlock","description":"ACACIAWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKWOODSLAB","value":"\"wooden_slab:5\"","title":"DARKOAKWOODSLAB VanillaBlock","description":"DARKOAKWOODSLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COCOA","value":"\"cocoa\"","title":"COCOA VanillaBlock","description":"COCOA VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SANDSTONESTAIRS","value":"\"sandstone_stairs\"","title":"SANDSTONESTAIRS VanillaBlock","description":"SANDSTONESTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"EMERALDORE","value":"\"emerald_ore\"","title":"EMERALDORE VanillaBlock","description":"EMERALDORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ENDERCHEST","value":"\"ender_chest\"","title":"ENDERCHEST VanillaBlock","description":"ENDERCHEST VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TRIPWIREHOOK","value":"\"tripwire_hook\"","title":"TRIPWIREHOOK VanillaBlock","description":"TRIPWIREHOOK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TRIPWIRE","value":"\"tripwire\"","title":"TRIPWIRE VanillaBlock","description":"TRIPWIRE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"EMERALDBLOCK","value":"\"emerald_block\"","title":"EMERALDBLOCK VanillaBlock","description":"EMERALDBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCESTAIRS","value":"\"spruce_stairs\"","title":"SPRUCESTAIRS VanillaBlock","description":"SPRUCESTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHSTAIRS","value":"\"birch_stairs\"","title":"BIRCHSTAIRS VanillaBlock","description":"BIRCHSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLESTAIRS","value":"\"jungle_stairs\"","title":"JUNGLESTAIRS VanillaBlock","description":"JUNGLESTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COMMANDBLOCK","value":"\"command_block\"","title":"COMMANDBLOCK VanillaBlock","description":"COMMANDBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BEACON","value":"\"beacon\"","title":"BEACON VanillaBlock","description":"BEACON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COBBLESTONEWALL","value":"\"cobblestone_wall:0\"","title":"COBBLESTONEWALL VanillaBlock","description":"COBBLESTONEWALL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MOSSYCOBBLESTONEWALL","value":"\"cobblestone_wall:1\"","title":"MOSSYCOBBLESTONEWALL VanillaBlock","description":"MOSSYCOBBLESTONEWALL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"FLOWERPOT","value":"\"flower_pot\"","title":"FLOWERPOT VanillaBlock","description":"FLOWERPOT VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CARROTS","value":"\"carrots\"","title":"CARROTS VanillaBlock","description":"CARROTS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"POTATOES","value":"\"potatoes\"","title":"POTATOES VanillaBlock","description":"POTATOES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WOODENBUTTON","value":"\"wooden_button\"","title":"WOODENBUTTON VanillaBlock","description":"WOODENBUTTON VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SKULL","value":"\"skull\"","title":"SKULL VanillaBlock","description":"SKULL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ANVIL","value":"\"anvil\"","title":"ANVIL VanillaBlock","description":"ANVIL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"TRAPPEDCHEST","value":"\"trapped_chest\"","title":"TRAPPEDCHEST VanillaBlock","description":"TRAPPEDCHEST VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTWEIGHTEDPRESSUREPLATE","value":"\"light_weighted_pressure_plate\"","title":"LIGHTWEIGHTEDPRESSUREPLATE VanillaBlock","description":"LIGHTWEIGHTEDPRESSUREPLATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HEAVEWEIGHTEDPRESSUREPLATE","value":"\"heavy_weighted_pressure_plate\"","title":"HEAVEWEIGHTEDPRESSUREPLATE VanillaBlock","description":"HEAVEWEIGHTEDPRESSUREPLATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONECOMPARATOR","value":"\"unpowered_comparator\"","title":"REDSTONECOMPARATOR VanillaBlock","description":"REDSTONECOMPARATOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONECOMPARATORPOWERED","value":"\"powered_comparator\"","title":"REDSTONECOMPARATORPOWERED VanillaBlock","description":"REDSTONECOMPARATORPOWERED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DAYLIGHTDETECTOR","value":"\"daylight_detector\"","title":"DAYLIGHTDETECTOR VanillaBlock","description":"DAYLIGHTDETECTOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTONEBLOCK","value":"\"redstone_block\"","title":"REDSTONEBLOCK VanillaBlock","description":"REDSTONEBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZORE","value":"\"quartz_ore\"","title":"QUARTZORE VanillaBlock","description":"QUARTZORE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HOPPER","value":"\"hopper\"","title":"HOPPER VanillaBlock","description":"HOPPER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZBLOCK","value":"\"quartz_block:0\"","title":"QUARTZBLOCK VanillaBlock","description":"QUARTZBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZBLOCKCHISELED","value":"\"quartz_block:1\"","title":"QUARTZBLOCKCHISELED VanillaBlock","description":"QUARTZBLOCKCHISELED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZPILLARVERTICAL","value":"\"quartz_block:2\"","title":"QUARTZPILLARVERTICAL VanillaBlock","description":"QUARTZPILLARVERTICAL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZPILLARHORIZONTAL","value":"\"quartz_block:3\"","title":"QUARTZPILLARHORIZONTAL VanillaBlock","description":"QUARTZPILLARHORIZONTAL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZPILLARCAP","value":"\"quartz_block:4\"","title":"QUARTZPILLARCAP VanillaBlock","description":"QUARTZPILLARCAP VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"QUARTZSTAIRS","value":"\"quartz_stairs\"","title":"QUARTZSTAIRS VanillaBlock","description":"QUARTZSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACTIVATORRAIL","value":"\"activator_rail\"","title":"ACTIVATORRAIL VanillaBlock","description":"ACTIVATORRAIL VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DROPPER","value":"\"dropper\"","title":"DROPPER VanillaBlock","description":"DROPPER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITESTAINEDCLAY","value":"\"stained_hardened_clay:0\"","title":"WHITESTAINEDCLAY VanillaBlock","description":"WHITESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANGESTAINEDCLAY","value":"\"stained_hardened_clay:1\"","title":"ORANGESTAINEDCLAY VanillaBlock","description":"ORANGESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MAGENTASTAINEDCLAY","value":"\"stained_hardened_clay:2\"","title":"MAGENTASTAINEDCLAY VanillaBlock","description":"MAGENTASTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTBLUESTAINEDCLAY","value":"\"stained_hardened_clay:3\"","title":"LIGHTBLUESTAINEDCLAY VanillaBlock","description":"LIGHTBLUESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"YELLOWSTAINEDCLAY","value":"\"stained_hardened_clay:4\"","title":"YELLOWSTAINEDCLAY VanillaBlock","description":"YELLOWSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIMESTAINEDCLAY","value":"\"stained_hardened_clay:5\"","title":"LIMESTAINEDCLAY VanillaBlock","description":"LIMESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKSTAINEDCLAY","value":"\"stained_hardened_clay:6\"","title":"PINKSTAINEDCLAY VanillaBlock","description":"PINKSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAYSTAINEDCLAY","value":"\"stained_hardened_clay:7\"","title":"GRAYSTAINEDCLAY VanillaBlock","description":"GRAYSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTGRAYSTAINEDCLAY","value":"\"stained_hardened_clay:8\"","title":"LIGHTGRAYSTAINEDCLAY VanillaBlock","description":"LIGHTGRAYSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CYANSTAINEDCLAY","value":"\"stained_hardened_clay:9\"","title":"CYANSTAINEDCLAY VanillaBlock","description":"CYANSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PURPLESTAINEDCLAY","value":"\"stained_hardened_clay:10\"","title":"PURPLESTAINEDCLAY VanillaBlock","description":"PURPLESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUESTAINEDCLAY","value":"\"stained_hardened_clay:11\"","title":"BLUESTAINEDCLAY VanillaBlock","description":"BLUESTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNSTAINEDCLAY","value":"\"stained_hardened_clay:12\"","title":"BROWNSTAINEDCLAY VanillaBlock","description":"BROWNSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GREENSTAINEDCLAY","value":"\"stained_hardened_clay:13\"","title":"GREENSTAINEDCLAY VanillaBlock","description":"GREENSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSTAINEDCLAY","value":"\"stained_hardened_clay:14\"","title":"REDSTAINEDCLAY VanillaBlock","description":"REDSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLACKSTAINEDCLAY","value":"\"stained_hardened_clay:15\"","title":"BLACKSTAINEDCLAY VanillaBlock","description":"BLACKSTAINEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITEGLASSPANE","value":"\"stained_glass_pane:0\"","title":"WHITEGLASSPANE VanillaBlock","description":"WHITEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANAGEGLASSPANE","value":"\"stained_glass_pane:1\"","title":"ORANAGEGLASSPANE VanillaBlock","description":"ORANAGEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MAGENTAGLASSPANE","value":"\"stained_glass_pane:2\"","title":"MAGENTAGLASSPANE VanillaBlock","description":"MAGENTAGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTBLUEGLASSPANE","value":"\"stained_glass_pane:3\"","title":"LIGHTBLUEGLASSPANE VanillaBlock","description":"LIGHTBLUEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"YELLOWGLASSPANE","value":"\"stained_glass_pane:4\"","title":"YELLOWGLASSPANE VanillaBlock","description":"YELLOWGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIMEGLASSPANE","value":"\"stained_glass_pane:5\"","title":"LIMEGLASSPANE VanillaBlock","description":"LIMEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKGLASSPANE","value":"\"stained_glass_pane:6\"","title":"PINKGLASSPANE VanillaBlock","description":"PINKGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAYGLASSPANE","value":"\"stained_glass_pane:7\"","title":"GRAYGLASSPANE VanillaBlock","description":"GRAYGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTGRAYGLASSPANE","value":"\"stained_glass_pane:8\"","title":"LIGHTGRAYGLASSPANE VanillaBlock","description":"LIGHTGRAYGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CYANGLASSPANE","value":"\"stained_glass_pane:9\"","title":"CYANGLASSPANE VanillaBlock","description":"CYANGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PURPLEGLASSPANE","value":"\"stained_glass_pane:10\"","title":"PURPLEGLASSPANE VanillaBlock","description":"PURPLEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUEGLASSPANE","value":"\"stained_glass_pane:11\"","title":"BLUEGLASSPANE VanillaBlock","description":"BLUEGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNGLASSPANE","value":"\"stained_glass_pane:12\"","title":"BROWNGLASSPANE VanillaBlock","description":"BROWNGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GREENGLASSPANE","value":"\"stained_glass_pane:13\"","title":"GREENGLASSPANE VanillaBlock","description":"GREENGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDGLASSPANE","value":"\"stained_glass_pane:14\"","title":"REDGLASSPANE VanillaBlock","description":"REDGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLACKGLASSPANE","value":"\"stained_glass_pane:15\"","title":"BLACKGLASSPANE VanillaBlock","description":"BLACKGLASSPANE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIALEAVES","value":"\"leaves2:0\"","title":"ACACIALEAVES VanillaBlock","description":"ACACIALEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKLEAVES","value":"\"leaves2:1\"","title":"DARKOAKLEAVES VanillaBlock","description":"DARKOAKLEAVES VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIALOG","value":"\"log2:0\"","title":"ACACIALOG VanillaBlock","description":"ACACIALOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKLOG","value":"\"log2:1\"","title":"DARKOAKLOG VanillaBlock","description":"DARKOAKLOG VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIASTAIRS","value":"\"acacia_stairs\"","title":"ACACIASTAIRS VanillaBlock","description":"ACACIASTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKSTAIRS","value":"\"dark_oak_stairs\"","title":"DARKOAKSTAIRS VanillaBlock","description":"DARKOAKSTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SLIME","value":"\"slime\"","title":"SLIME VanillaBlock","description":"SLIME VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BARRIER","value":"\"barrier\"","title":"BARRIER VanillaBlock","description":"BARRIER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"IRONTRAPDOOR","value":"\"iron_trapdoor\"","title":"IRONTRAPDOOR VanillaBlock","description":"IRONTRAPDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PRISMARINE","value":"\"prismarine:0\"","title":"PRISMARINE VanillaBlock","description":"PRISMARINE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PRISMARINEBRICKS","value":"\"prismarine:1\"","title":"PRISMARINEBRICKS VanillaBlock","description":"PRISMARINEBRICKS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKPRISMARINE","value":"\"prismarine:2\"","title":"DARKPRISMARINE VanillaBlock","description":"DARKPRISMARINE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SEALANTERN","value":"\"sea_lantern\"","title":"SEALANTERN VanillaBlock","description":"SEALANTERN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HAYBALE","value":"\"hay_block\"","title":"HAYBALE VanillaBlock","description":"HAYBALE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WHITECARPET","value":"\"carpet:0\"","title":"WHITECARPET VanillaBlock","description":"WHITECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ORANGECARPET","value":"\"carpet:1\"","title":"ORANGECARPET VanillaBlock","description":"ORANGECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"MAGENTACARPET","value":"\"carpet:2\"","title":"MAGENTACARPET VanillaBlock","description":"MAGENTACARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTBLUECARPET","value":"\"carpet:3\"","title":"LIGHTBLUECARPET VanillaBlock","description":"LIGHTBLUECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"YELLOWCARPET","value":"\"carpet:4\"","title":"YELLOWCARPET VanillaBlock","description":"YELLOWCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIMECARPET","value":"\"carpet:5\"","title":"LIMECARPET VanillaBlock","description":"LIMECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PINKCARPET","value":"\"carpet:6\"","title":"PINKCARPET VanillaBlock","description":"PINKCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GRAYCARPET","value":"\"carpet:7\"","title":"GRAYCARPET VanillaBlock","description":"GRAYCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LIGHTGRAYCARPET","value":"\"carpet:8\"","title":"LIGHTGRAYCARPET VanillaBlock","description":"LIGHTGRAYCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"CYANCARPET","value":"\"carpet:9\"","title":"CYANCARPET VanillaBlock","description":"CYANCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PURPLECARPET","value":"\"carpet:10\"","title":"PURPLECARPET VanillaBlock","description":"PURPLECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLUECARPET","value":"\"carpet:11\"","title":"BLUECARPET VanillaBlock","description":"BLUECARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BROWNCARPET","value":"\"carpet:12\"","title":"BROWNCARPET VanillaBlock","description":"BROWNCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"GREENCARPET","value":"\"carpet:13\"","title":"GREENCARPET VanillaBlock","description":"GREENCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDCARPET","value":"\"carpet:14\"","title":"REDCARPET VanillaBlock","description":"REDCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BLACKCARPET","value":"\"carpet:15\"","title":"BLACKCARPET VanillaBlock","description":"BLACKCARPET VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"HARDENEDCLAY","value":"\"hardened_clay\"","title":"HARDENEDCLAY VanillaBlock","description":"HARDENEDCLAY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COALBLOCK","value":"\"coal_block\"","title":"COALBLOCK VanillaBlock","description":"COALBLOCK VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PACKEDICE","value":"\"packed_ice\"","title":"PACKEDICE VanillaBlock","description":"PACKEDICE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SUNFLOWER","value":"\"double_plant:0\"","title":"SUNFLOWER VanillaBlock","description":"SUNFLOWER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LILAC","value":"\"double_plant:1\"","title":"LILAC VanillaBlock","description":"LILAC VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEGRASS","value":"\"double_plant:2\"","title":"DOUBLEGRASS VanillaBlock","description":"DOUBLEGRASS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"LARGEFERN","value":"\"double_plant:3\"","title":"LARGEFERN VanillaBlock","description":"LARGEFERN VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ROSEBUSH","value":"\"double_plant:4\"","title":"ROSEBUSH VanillaBlock","description":"ROSEBUSH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PEONY","value":"\"double_plant:5\"","title":"PEONY VanillaBlock","description":"PEONY VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"STANDINGBANNER","value":"\"standing_banner\"","title":"STANDINGBANNER VanillaBlock","description":"STANDINGBANNER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"WALLBANNER","value":"\"wall_banner\"","title":"WALLBANNER VanillaBlock","description":"WALLBANNER VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DAYLIGHTDETECTEDINVERTED","value":"\"daylight_detector_inverted\"","title":"DAYLIGHTDETECTEDINVERTED VanillaBlock","description":"DAYLIGHTDETECTEDINVERTED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSANDSTONE","value":"\"red_sandstone:0\"","title":"REDSANDSTONE VanillaBlock","description":"REDSANDSTONE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSANDSTONECHISELED","value":"\"red_sandstone:1\"","title":"REDSANDSTONECHISELED VanillaBlock","description":"REDSANDSTONECHISELED VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSANDSTONESMOOTH","value":"\"red_sandstone:2\"","title":"REDSANDSTONESMOOTH VanillaBlock","description":"REDSANDSTONESMOOTH VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSANDSTONESTAIRS","value":"\"red_sandstone_stairs\"","title":"REDSANDSTONESTAIRS VanillaBlock","description":"REDSANDSTONESTAIRS VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"REDSANDSTONESLAB","value":"\"stone_slab2:0\"","title":"REDSANDSTONESLAB VanillaBlock","description":"REDSANDSTONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DOUBLEREDSANDSTONESLAB","value":"\"double_stone_slab2:0\"","title":"DOUBLEREDSANDSTONESLAB VanillaBlock","description":"DOUBLEREDSANDSTONESLAB VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCEFENCEGATE","value":"\"spruce_fence_gate\"","title":"SPRUCEFENCEGATE VanillaBlock","description":"SPRUCEFENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHFENCEGATE","value":"\"birch_fence_gate\"","title":"BIRCHFENCEGATE VanillaBlock","description":"BIRCHFENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEFENCEGATE","value":"\"jungle_fence_gate\"","title":"JUNGLEFENCEGATE VanillaBlock","description":"JUNGLEFENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKFENCEGATE","value":"\"dark_oak_fence_gate\"","title":"DARKOAKFENCEGATE VanillaBlock","description":"DARKOAKFENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIAFENCEGATE","value":"\"acacia_fence_gate\"","title":"ACACIAFENCEGATE VanillaBlock","description":"ACACIAFENCEGATE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCEFENCE","value":"\"spruce_fence\"","title":"SPRUCEFENCE VanillaBlock","description":"SPRUCEFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHFENCE","value":"\"birch_fence\"","title":"BIRCHFENCE VanillaBlock","description":"BIRCHFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEFENCE","value":"\"jungle_fence\"","title":"JUNGLEFENCE VanillaBlock","description":"JUNGLEFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKFENCE","value":"\"dark_oak_fence\"","title":"DARKOAKFENCE VanillaBlock","description":"DARKOAKFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIAFENCE","value":"\"acacia_fence\"","title":"ACACIAFENCE VanillaBlock","description":"ACACIAFENCE VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"SPRUCEDOOR","value":"\"spruce_door\"","title":"SPRUCEDOOR VanillaBlock","description":"SPRUCEDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"BIRCHDOOR","value":"\"birch_door\"","title":"BIRCHDOOR VanillaBlock","description":"BIRCHDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"JUNGLEDOOR","value":"\"jungle_door\"","title":"JUNGLEDOOR VanillaBlock","description":"JUNGLEDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"ACACIADOOR","value":"\"acacia_door\"","title":"ACACIADOOR VanillaBlock","description":"ACACIADOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"DARKOAKDOOR","value":"\"dark_oak_door\"","title":"DARKOAKDOOR VanillaBlock","description":"DARKOAKDOOR VanillaBlock","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"NULL","value":"\"NULL\"","title":"All NON-VANILLA blocks safety translation","description":"All NON-VANILLA blocks safety translation","doc":{}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.0":{"namespace":"io.wolfscript.api.world.blocks","title":"Classes and interfaces for namespace io.wolfscript.api.world.blocks.properties","description":"Classes and interfaces for namespace io.wolfscript.api.world.blocks.properties","name":"properties","qualifiedname":"io.wolfscript.api.world.blocks.properties.0","packagename":"io.wolfscript.api.world.blocks.properties","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.properties.BlockProperty"],"enums":[],"namespaces":["io.wolfscript.api.world.blocks.properties.helpers.0"],"properties":[]},"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"PropertyBool wrapper","description":"PropertyBool wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockBooleanProperty","qualifiedname":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.properties.BlockProperty"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"PropertyDirection wrapper","description":"PropertyDirection wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockDirectionProperty","qualifiedname":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.properties.BlockEnumProperty"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.properties.BlockEnumProperty":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"PropertyEnum wrapper","description":"PropertyEnum wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockEnumProperty","qualifiedname":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.properties.BlockProperty"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"PropertyInteger wrapper","description":"PropertyInteger wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockIntegerProperty","qualifiedname":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","type":"interface","scope":"public","extends":["io.wolfscript.api.world.blocks.properties.BlockProperty"],"constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.api.world.blocks.properties.BlockProperty":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"Block IProperty/PropertyHelper wrapper","description":"Block IProperty/PropertyHelper wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockProperty","qualifiedname":"io.wolfscript.api.world.blocks.properties.BlockProperty","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["java.util.Collection"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.0":{"namespace":"io.wolfscript.api.world.blocks.properties","title":"Classes and interfaces for namespace io.wolfscript.api.world.blocks.properties.helpers","description":"Classes and interfaces for namespace io.wolfscript.api.world.blocks.properties.helpers","name":"helpers","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.0","packagename":"io.wolfscript.api.world.blocks.properties.helpers","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.world.blocks.properties.helpers.AnvilProperties","io.wolfscript.api.world.blocks.properties.helpers.BannerProperties","io.wolfscript.api.world.blocks.properties.helpers.BrewingStandProperties","io.wolfscript.api.world.blocks.properties.helpers.ButtonProperties","io.wolfscript.api.world.blocks.properties.helpers.CactusProperties","io.wolfscript.api.world.blocks.properties.helpers.CakeProperties","io.wolfscript.api.world.blocks.properties.helpers.CarpetProperties","io.wolfscript.api.world.blocks.properties.helpers.CauldronProperties","io.wolfscript.api.world.blocks.properties.helpers.ChestProperties","io.wolfscript.api.world.blocks.properties.helpers.CocoaPlantProperties","io.wolfscript.api.world.blocks.properties.helpers.ColoredBlockProperties","io.wolfscript.api.world.blocks.properties.helpers.CommandBlockProperties","io.wolfscript.api.world.blocks.properties.helpers.CropsProperties","io.wolfscript.api.world.blocks.properties.helpers.DaylightDetectorProperties","io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties","io.wolfscript.api.world.blocks.properties.helpers.DispenserProperties","io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabNewProperties","io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties","io.wolfscript.api.world.blocks.properties.helpers.EndPortalFrameProperties","io.wolfscript.api.world.blocks.properties.helpers.EnderChestProperties","io.wolfscript.api.world.blocks.properties.helpers.FarmlandProperties","io.wolfscript.api.world.blocks.properties.helpers.FenceGateProperties","io.wolfscript.api.world.blocks.properties.helpers.FenceProperties","io.wolfscript.api.world.blocks.properties.helpers.FireProperties","io.wolfscript.api.world.blocks.properties.helpers.FurnaceProperties","io.wolfscript.api.world.blocks.properties.helpers.GrassProperties","io.wolfscript.api.world.blocks.properties.helpers.HopperProperties","io.wolfscript.api.world.blocks.properties.helpers.JukeboxProperties","io.wolfscript.api.world.blocks.properties.helpers.LadderProperties","io.wolfscript.api.world.blocks.properties.helpers.LeavesProperties","io.wolfscript.api.world.blocks.properties.helpers.LiquidProperties","io.wolfscript.api.world.blocks.properties.helpers.MyceliumProperties","io.wolfscript.api.world.blocks.properties.helpers.NetherWartProperties","io.wolfscript.api.world.blocks.properties.helpers.PistonProperties","io.wolfscript.api.world.blocks.properties.helpers.PlanksProperties","io.wolfscript.api.world.blocks.properties.helpers.PortalProperties","io.wolfscript.api.world.blocks.properties.helpers.PressurePlateProperties","io.wolfscript.api.world.blocks.properties.helpers.RailPoweredProperties","io.wolfscript.api.world.blocks.properties.helpers.RedstoneRepeaterProperties","io.wolfscript.api.world.blocks.properties.helpers.ReedProperties","io.wolfscript.api.world.blocks.properties.helpers.RotatedPillarProperties","io.wolfscript.api.world.blocks.properties.helpers.SaplingProperties","io.wolfscript.api.world.blocks.properties.helpers.SkullProperties","io.wolfscript.api.world.blocks.properties.helpers.SnowProperties","io.wolfscript.api.world.blocks.properties.helpers.SpongeProperties","io.wolfscript.api.world.blocks.properties.helpers.StainedGlassPaneProperties","io.wolfscript.api.world.blocks.properties.helpers.StainedGlassProperties","io.wolfscript.api.world.blocks.properties.helpers.StandingSignProperties","io.wolfscript.api.world.blocks.properties.helpers.StemProperties","io.wolfscript.api.world.blocks.properties.helpers.TNTProperties","io.wolfscript.api.world.blocks.properties.helpers.TorchProperties","io.wolfscript.api.world.blocks.properties.helpers.TripwireHookProperties","io.wolfscript.api.world.blocks.properties.helpers.TripwireProperties","io.wolfscript.api.world.blocks.properties.helpers.VineProperties","io.wolfscript.api.world.blocks.properties.helpers.WallSignProperties","io.wolfscript.api.world.blocks.properties.helpers.WeightedPressurePlateProperties","io.wolfscript.api.world.blocks.properties.helpers.WoodSlabProperties"],"interfaces":[],"enums":["io.wolfscript.api.world.blocks.properties.helpers.AttachPosition","io.wolfscript.api.world.blocks.properties.helpers.Axis","io.wolfscript.api.world.blocks.properties.helpers.Contents","io.wolfscript.api.world.blocks.properties.helpers.Direction","io.wolfscript.api.world.blocks.properties.helpers.Half","io.wolfscript.api.world.blocks.properties.helpers.HingePosition","io.wolfscript.api.world.blocks.properties.helpers.Mode","io.wolfscript.api.world.blocks.properties.helpers.Orientation","io.wolfscript.api.world.blocks.properties.helpers.Rotation","io.wolfscript.api.world.blocks.properties.helpers.Shape","io.wolfscript.api.world.blocks.properties.helpers.Type","io.wolfscript.api.world.blocks.properties.helpers.Variant"],"namespaces":[],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.AnvilProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Anvil properties helper","description":"Anvil properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"AnvilProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.AnvilProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Anvil damage property, Values: 0 - 2","description":"Anvil damage property, Values: 0 - 2 /\n    public static final BlockIntegerProperty damage = getInstanceFor(Anvil, \"damage\");\n\n    /** Anvil facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Anvil damage property, Values: 0 - 2","description":"Anvil damage property, Values: 0 - 2 /\n    public static final BlockIntegerProperty damage = getInstanceFor(Anvil, \"damage\");\n\n    /** Anvil facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Anvil, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Anvil}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies damage to the {@code Anvil}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyDamage","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Anvil"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.AttachPosition":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Redstone Wire properties helper","description":"Redstone Wire properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneWireProperties extends BlockProperties {\n\n    /** Redstone Wire power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(RedstoneWire, \"power\");\n\n    /** Redstone Wire north property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty north = getInstanceFor(RedstoneWire, \"north\");\n\n    /** Redstone Wire south property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty south = getInstanceFor(RedstoneWire, \"south\");\n\n    /** Redstone Wire east property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty east = getInstanceFor(RedstoneWire, \"east\");\n\n    /** Redstone Wire west property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty west = getInstanceFor(RedstoneWire, \"west\");\n\n    /** Redstone Wire attach positions","Jason Jones (darkdiplomat)"]},"name":"AttachPosition","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.AttachPosition","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.AttachPosition","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.RedstoneWire"],"enum":[{"code":"UP","value":"","title":"UP AttachPosition","description":"UP AttachPosition","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneWireProperties extends BlockProperties {\n\n    /** Redstone Wire power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(RedstoneWire, \"power\");\n\n    /** Redstone Wire north property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty north = getInstanceFor(RedstoneWire, \"north\");\n\n    /** Redstone Wire south property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty south = getInstanceFor(RedstoneWire, \"south\");\n\n    /** Redstone Wire east property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty east = getInstanceFor(RedstoneWire, \"east\");\n\n    /** Redstone Wire west property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty west = getInstanceFor(RedstoneWire, \"west\");\n\n    /** Redstone Wire attach positions","Jason Jones (darkdiplomat)"]}},{"code":"SIDE","value":"","title":"SIDE AttachPosition","description":"SIDE AttachPosition","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneWireProperties extends BlockProperties {\n\n    /** Redstone Wire power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(RedstoneWire, \"power\");\n\n    /** Redstone Wire north property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty north = getInstanceFor(RedstoneWire, \"north\");\n\n    /** Redstone Wire south property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty south = getInstanceFor(RedstoneWire, \"south\");\n\n    /** Redstone Wire east property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty east = getInstanceFor(RedstoneWire, \"east\");\n\n    /** Redstone Wire west property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty west = getInstanceFor(RedstoneWire, \"west\");\n\n    /** Redstone Wire attach positions","Jason Jones (darkdiplomat)"]}},{"code":"NONE","value":"","title":"NONE AttachPosition","description":"NONE AttachPosition","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneWireProperties extends BlockProperties {\n\n    /** Redstone Wire power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(RedstoneWire, \"power\");\n\n    /** Redstone Wire north property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty north = getInstanceFor(RedstoneWire, \"north\");\n\n    /** Redstone Wire south property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty south = getInstanceFor(RedstoneWire, \"south\");\n\n    /** Redstone Wire east property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty east = getInstanceFor(RedstoneWire, \"east\");\n\n    /** Redstone Wire west property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneWireProperties.AttachPosition} /\n    public static final BlockEnumProperty west = getInstanceFor(RedstoneWire, \"west\");\n\n    /** Redstone Wire attach positions","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Axis":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Log properties helper<p/>","description":"Log properties helper<p/> NOTE: There are potentially 2 different axis properties for Log","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LogProperties extends RotatedPillarProperties implements WoodProperties {\n\n    /** Log axis property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LogProperties.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(OakLog, \"axis\");\n\n    /** (Old) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLog, \"variant\");\n\n    /** (New) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLog, \"variant\");\n\n    /** Log Axis","Jason Jones (darkdiplomat)"]},"name":"Axis","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Axis","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Axis","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","net.visualillusionsent.utils.Verify","io.wolfscript.api.world.blocks.BlockType.AcaciaLog","io.wolfscript.api.world.blocks.BlockType.DarkOakLog","io.wolfscript.api.world.blocks.BlockType.OakLog"],"enum":[{"code":"X","value":"","title":"X Axis","description":"X Axis","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LogProperties extends RotatedPillarProperties implements WoodProperties {\n\n    /** Log axis property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LogProperties.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(OakLog, \"axis\");\n\n    /** (Old) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLog, \"variant\");\n\n    /** (New) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLog, \"variant\");\n\n    /** Log Axis","Jason Jones (darkdiplomat)"]}},{"code":"Y","value":"","title":"Y Axis","description":"Y Axis","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LogProperties extends RotatedPillarProperties implements WoodProperties {\n\n    /** Log axis property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LogProperties.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(OakLog, \"axis\");\n\n    /** (Old) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLog, \"variant\");\n\n    /** (New) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLog, \"variant\");\n\n    /** Log Axis","Jason Jones (darkdiplomat)"]}},{"code":"Z","value":"","title":"Z Axis","description":"Z Axis","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LogProperties extends RotatedPillarProperties implements WoodProperties {\n\n    /** Log axis property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LogProperties.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(OakLog, \"axis\");\n\n    /** (Old) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLog, \"variant\");\n\n    /** (New) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLog, \"variant\");\n\n    /** Log Axis","Jason Jones (darkdiplomat)"]}},{"code":"NONE","value":"","title":"NONE Axis","description":"NONE Axis","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LogProperties extends RotatedPillarProperties implements WoodProperties {\n\n    /** Log axis property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LogProperties.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(OakLog, \"axis\");\n\n    /** (Old) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLog, \"variant\");\n\n    /** (New) Log variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLog, \"variant\");\n\n    /** Log Axis","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.BannerProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Banner properties helper","description":"Banner properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BannerProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.BannerProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"rotation field","description":"rotation field","name":"rotation","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"},{"title":"Anvil facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Anvil facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Banner rotation property, Value: 0 - 15","description":"Banner rotation property, Value: 0 - 15 /\n    public static final BlockIntegerProperty rotation = getInstanceFor(StandingBanner, \"rotation\");\n\n    /** Anvil facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WallBanner, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing to the {@code Banner (Wall Banner)}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies rotation to the {@code Banner (Standing Banner)}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyRotation(Block block, int value) {\n        return apply(block, rotation, value);\n    }\n\n    /** Applies rotation to the {@code Banner (Standing Banner)}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyRotation","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Rotation","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.StandingBanner","io.wolfscript.api.world.blocks.BlockType.WallBanner"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.BrewingStandProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Brewing Stand properties helper","description":"Brewing Stand properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BrewingStandProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.BrewingStandProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Brewing Stand bottle properties, Values: true, false","description":"Brewing Stand bottle properties, Values: true, false","doc":{},"name":"BlockBooleanProperty","scope":"public","type":"final","describe":"static"}],"methods":[],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.BrewingStand"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.ButtonProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Button properties helper","description":"Button properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ButtonProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.ButtonProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Button facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP)","description":"Button facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WoodenButton, \"facing\");\n\n    /** Button powered property (which could mean pressed in), Values: true, false","doc":{},"name":"powered","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Button facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP)","description":"Button facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WoodenButton, \"facing\");\n\n    /** Button powered property (which could mean pressed in), Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(WoodenButton, \"powered\");\n\n    /** Applies {@link io.wolfscript.api.world.blocks.BlockFace} facing to the {@code Button}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code Button} is supplying power","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyPowered","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.WoodenButton"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CactusProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Cactus properties helper","description":"Cactus properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CactusProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CactusProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Cactus age property, Values: 0 - 15","description":"Cactus age property, Values: 0 - 15","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Cactus age property, Values: 0 - 15","description":"Cactus age property, Values: 0 - 15 /\n    public static final BlockIntegerProperty age = getInstanceFor(Cactus, \"age\");\n\n    /** Applies age to the {@code Cactus}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply (0 - 15)"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Cactus"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CakeProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Cake properties helper","description":"Cake properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CakeProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CakeProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Cake bites property, Values: 0 - 6","description":"Cake bites property, Values: 0 - 6","doc":{},"name":"bites","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Cake bites property, Values: 0 - 6","description":"Cake bites property, Values: 0 - 6 /\n    public static final BlockIntegerProperty bites = getInstanceFor(Cake, \"bites\");\n\n    /** Applies bites to the {@code Cake}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyBites","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply (0 - 6)"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Cake"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CarpetProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Carpet properties helper","description":"Carpet properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CarpetProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CarpetProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Carpet color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","description":"Carpet color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","doc":{},"name":"color","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Carpet color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","description":"Carpet color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM) /\n    public static final BlockEnumProperty color = getInstanceFor(WhiteCarpet, \"color\");\n\n    /** Applies color to the {@code Carpet}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyColor","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.DyeColor","description":"the {@link io.wolfscript.api.DyeColor} value to apply"}]}],"imports":["io.wolfscript.api.DyeColor","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.WhiteCarpet"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CauldronProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Cauldron properties helper","description":"Cauldron properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CauldronProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CauldronProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Cauldron [water] level property, Values: 0 - 3","description":"Cauldron [water] level property, Values: 0 - 3","doc":{},"name":"level","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Cauldron [water] level property, Values: 0 - 3","description":"Cauldron [water] level property, Values: 0 - 3 /\n    public static final BlockIntegerProperty level = getInstanceFor(Cauldron, \"level\");\n\n    /** Applies level to the {@code Cauldron}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyLevel","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply (0 - 3)"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Cauldron"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.ChestProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Chest properties helper","description":"Chest properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ChestProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.ChestProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Chest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Chest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Chest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Chest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Chest, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Chest}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Chest"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CocoaPlantProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"CocoaPlant properties helper","description":"CocoaPlant properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CocoaPlantProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CocoaPlantProperties","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties"],"constructors":[],"fields":[{"title":"CocoaPlant age property, Values: 0 - 2","description":"CocoaPlant age property, Values: 0 - 2","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"CocoaPlant age property, Values: 0 - 2","description":"CocoaPlant age property, Values: 0 - 2 /\n    public static final BlockIntegerProperty age = getInstanceFor(CocoaPlant, \"age\");\n\n    /** Applies age to the {@code CocoaPlant}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply (0 - 2)"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.CocoaPlant"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.ColoredBlockProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Colored Block properties helper","description":"Colored Block properties helper<br/> Applies to<br/> <ul>Stained Hardened Clay</ul> <ul>Wool</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ColoredBlockProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.ColoredBlockProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Colored Block color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","description":"Colored Block color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","doc":{},"name":"color","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Colored Block color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM)","description":"Colored Block color property, Values: {@link io.wolfscript.api.DyeColor} (excluding CUSTOM) /\n    public static final BlockEnumProperty color = getInstanceFor(WhiteWool, \"color\");\n\n    /** Applies color to the {@code Colored Block}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyColor","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.DyeColor","description":"the {@link io.wolfscript.api.DyeColor} value to apply"}]}],"imports":["io.wolfscript.api.DyeColor","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.WhiteWool"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CommandBlockProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Command Block properties helper","description":"Command Block properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CommandBlockProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CommandBlockProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Command Block triggered property, Values: true, false","description":"Command Block triggered property, Values: true, false","doc":{},"name":"triggered","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Command Block triggered property, Values: true, false","description":"Command Block triggered property, Values: true, false /\n    public static final BlockBooleanProperty triggered = getInstanceFor(CommandBlock, \"triggered\");\n\n    /** Applies whether the {@code CommandBlock} has triggered or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyTriggered","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.CommandBlock"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Contents":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Flower Pot properties helper","description":"Flower Pot properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]},"name":"Contents","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Contents","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Contents","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Flowerpot"],"enum":[{"code":"EMPTY","value":"","title":"EMPTY Contents","description":"EMPTY Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"POPPY","value":"","title":"POPPY Contents","description":"POPPY Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"BLUE_ORCHID","value":"","title":"BLUE_ORCHID Contents","description":"BLUE_ORCHID Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"ALLIUM","value":"","title":"ALLIUM Contents","description":"ALLIUM Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"HOUSTONIA","value":"","title":"HOUSTONIA Contents","description":"HOUSTONIA Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"RED_TULIP","value":"","title":"RED_TULIP Contents","description":"RED_TULIP Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"ORANGE_TULIP","value":"","title":"ORANGE_TULIP Contents","description":"ORANGE_TULIP Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"WHITE_TULIP","value":"","title":"WHITE_TULIP Contents","description":"WHITE_TULIP Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"PINK_TULIP","value":"","title":"PINK_TULIP Contents","description":"PINK_TULIP Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"OXEYE_DAISY","value":"","title":"OXEYE_DAISY Contents","description":"OXEYE_DAISY Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"DANDELION","value":"","title":"DANDELION Contents","description":"DANDELION Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"OAK_SAPLING","value":"","title":"OAK_SAPLING Contents","description":"OAK_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"SPRUCE_SAPLING","value":"","title":"SPRUCE_SAPLING Contents","description":"SPRUCE_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"BIRCH_SAPLING","value":"","title":"BIRCH_SAPLING Contents","description":"BIRCH_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"JUNGLE_SAPLING","value":"","title":"JUNGLE_SAPLING Contents","description":"JUNGLE_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"ACACIA_SAPLING","value":"","title":"ACACIA_SAPLING Contents","description":"ACACIA_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"DARK_OAK_SAPLING","value":"","title":"DARK_OAK_SAPLING Contents","description":"DARK_OAK_SAPLING Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"MUSHROOM_RED","value":"","title":"MUSHROOM_RED Contents","description":"MUSHROOM_RED Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"MUSHROOM_BROWN","value":"","title":"MUSHROOM_BROWN Contents","description":"MUSHROOM_BROWN Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"DEAD_BUSH","value":"","title":"DEAD_BUSH Contents","description":"DEAD_BUSH Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"FERN","value":"","title":"FERN Contents","description":"FERN Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}},{"code":"CACTUS","value":"","title":"CACTUS Contents","description":"CACTUS Contents","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class FlowerPotProperties extends BlockProperties {\n\n    /** Flower Pot legacy_data property, values: 0 - 15<br/>","Jason Jones (darkdiplomat)"],"see":["<a href=\"http://minecraft.gamepedia.com/Data_values#Flower_Pots\">http://minecraft.gamepedia.com/Data_values#Flower_Pots</a> for legacy data information /\n    public static final BlockIntegerProperty legacyData = getInstanceFor(Flowerpot, \"legacy_data\");\n\n    /** Flower Pot contents property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.FlowerPotProperties.Contents} /\n    public static final BlockEnumProperty contents = getInstanceFor(Flowerpot, \"contents\");\n\n    /** FlowerPot contents"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.CropsProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Crops properties helper","description":"Crops properties helper<br/> Applies to<br/> <ul>Wheat</ul> <ul>Carrots</ul> <ul>Potatoes</ul> <ul>Melon (Stem)</ul> <ul>Pumpkin (Stem)</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"CropsProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.CropsProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Crops age property, Values: 0 - 7","description":"Crops age property, Values: 0 - 7","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Crops age property, Values: 0 - 7","description":"Crops age property, Values: 0 - 7 /\n    public static final BlockIntegerProperty age = getInstanceFor(Wheat, \"age\");\n\n    /** Applies age to the {@code Crops}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Wheat"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.DaylightDetectorProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Daylight Detector properties helper","description":"Daylight Detector properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DaylightDetectorProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.DaylightDetectorProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Daylight Detector power property, Values: 0 - 15","description":"Daylight Detector power property, Values: 0 - 15","doc":{},"name":"power","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Daylight Detector power property, Values: 0 - 15","description":"Daylight Detector power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(DaylightSensor, \"power\");\n\n    /** Applies whether the {@code CommandBlock} has triggered or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyPower","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.DaylightSensor"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Direction":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Rail properties helper","description":"Rail properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]},"name":"Direction","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Direction","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Direction","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","net.visualillusionsent.utils.Verify","io.wolfscript.api.world.blocks.BlockType.ActivatorRail","io.wolfscript.api.world.blocks.BlockType.DetectorRail","io.wolfscript.api.world.blocks.BlockType.PoweredRail","io.wolfscript.api.world.blocks.BlockType.Rail"],"enum":[{"code":"NORTH_SOUTH","value":"","title":"NORTH_SOUTH Direction","description":"NORTH_SOUTH Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"EAST_WEST","value":"","title":"EAST_WEST Direction","description":"EAST_WEST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"ASCENDING_EAST","value":"","title":"ASCENDING_EAST Direction","description":"ASCENDING_EAST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"ASCENDING_WEST","value":"","title":"ASCENDING_WEST Direction","description":"ASCENDING_WEST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"ASCENDING_NORTH","value":"","title":"ASCENDING_NORTH Direction","description":"ASCENDING_NORTH Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"ASCENDING_SOUTH","value":"","title":"ASCENDING_SOUTH Direction","description":"ASCENDING_SOUTH Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"SOUTH_EAST","value":"","title":"SOUTH_EAST Direction","description":"SOUTH_EAST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"SOUTH_WEST","value":"","title":"SOUTH_WEST Direction","description":"SOUTH_WEST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"NORTH_WEST","value":"","title":"NORTH_WEST Direction","description":"NORTH_WEST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}},{"code":"NORTH_EAST","value":"","title":"NORTH_EAST Direction","description":"NORTH_EAST Direction","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class RailProperties extends BlockProperties {\n\n    /** Normal Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeNormalRail = getInstanceFor(Rail, \"shape\");\n\n    /** Powered and Activator Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapePoweredRail = getInstanceFor(PoweredRail, \"shape\");\n\n    /** Detector Rail shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RailProperties.Direction} /\n    public static final BlockEnumProperty shapeDetectorRail = getInstanceFor(DetectorRail, \"shape\");\n\n    /** Rail directions"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Direction Block properties helper","description":"Direction Block properties helper<br/> Applies to<br/> <ul>Bed</ul> <ul>Cocoa</ul> <ul>FenceGate</ul> <ul>Pumpkin</ul> <ul>Jack-o-Lantern</ul> <ul>Redstone Comparator</ul> <ul>Redstone Repeater</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DirectionalBlockProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties","type":"class","scope":"public","describe":"abstract","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Directional facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Directional facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Directional facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Directional facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Bed, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code DirectionalBlock}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Bed"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.DispenserProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Dispenser/Dropper properties helper","description":"Dispenser/Dropper properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DispenserProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.DispenserProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Dispenser/Dropper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Dispenser/Dropper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(Dispenser, \"facing\");\n\n    /** Dispenser/Dropper triggered property, Values: true, false","doc":{},"name":"triggered","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Dispenser/Dropper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Dispenser/Dropper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(Dispenser, \"facing\");\n\n    /** Dispenser/Dropper triggered property, Values: true, false /\n    public static final BlockBooleanProperty triggered = getInstanceFor(Dispenser, \"triggered\");\n\n    /** Applies facing to the {@code Dispsener/Dropper}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies triggered to the {@code Dispenser/Dropper}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyTriggered","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Dispenser"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabNewProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"New Double Stone Slab properties helper","description":"New Double Stone Slab properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DoubleStoneSlabNewProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabNewProperties","type":"class","scope":"public","describe":"final","extends":["StoneSlabNewProperties"],"constructors":[],"fields":[{"title":"New Double Stone Slab seamless property, Values: true, false","description":"New Double Stone Slab seamless property, Values: true, false","doc":{},"name":"seamless","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"New Double Stone Slab seamless property, Values: true, false","description":"New Double Stone Slab seamless property, Values: true, false /\n    public static final BlockBooleanProperty seamless = getInstanceFor(DoubleRedSandstoneSlab, \"seamless\");\n\n    /** Applies whether the {@code Stone Slab} is seamless or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["NullPointerException Should {@code block} or {@code value} be null","IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applySeamless","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.DoubleRedSandstoneSlab"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Double Stone Slab properties helper","description":"Double Stone Slab properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DoubleStoneSlabProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.DoubleStoneSlabProperties","type":"class","scope":"public","describe":"final","extends":["StoneSlabProperties"],"constructors":[],"fields":[{"title":"Double Stone Slab seamless property, Values: true, false","description":"Double Stone Slab seamless property, Values: true, false","doc":{},"name":"seamless","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Double Stone Slab seamless property, Values: true, false","description":"Double Stone Slab seamless property, Values: true, false /\n    public static final BlockBooleanProperty seamless = getInstanceFor(DoubleStoneSlab, \"seamless\");\n\n    /** Applies whether the {@code Stone Slab} is seamless or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applySeamless","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.DoubleStoneSlab"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.EndPortalFrameProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"End Portal Frame properties helper","description":"End Portal Frame properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"EndPortalFrameProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.EndPortalFrameProperties","type":"class","scope":"public","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"End Portal Frame facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"End Portal Frame facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static BlockDirectionProperty facing = getInstanceFor(EndPortalFrame, \"facing\");\n\n    /** End Portal Frame eye property, Values: true, false","doc":{},"name":"eye","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static"}],"methods":[{"title":"End Portal Frame facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"End Portal Frame facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static BlockDirectionProperty facing = getInstanceFor(EndPortalFrame, \"facing\");\n\n    /** End Portal Frame eye property, Values: true, false /\n    public static BlockBooleanProperty eye = getInstanceFor(EndPortalFrame, \"eye\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code End Portal Frame}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code End Portal Frame} has an eye or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyEye","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.EndPortalFrame"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.EnderChestProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"EnderChest properties helper","description":"EnderChest properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"EnderChestProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.EnderChestProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"EnderChest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"EnderChest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"EnderChest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"EnderChest facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(EnderChest, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code EnderChest}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.EnderChest"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.FarmlandProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Farmland properties helper","description":"Farmland properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"FarmlandProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.FarmlandProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Farmland moisture property, Values: 0 - 7","description":"Farmland moisture property, Values: 0 - 7","doc":{},"name":"moisture","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Farmland moisture property, Values: 0 - 7","description":"Farmland moisture property, Values: 0 - 7 /\n    public static final BlockIntegerProperty moisture = getInstanceFor(Farmland, \"moisture\");\n\n    /** Applies moisture to the {@code Farmland}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyMositure","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Farmland"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.FenceGateProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Fence Gate properties helper","description":"Fence Gate properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"FenceGateProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.FenceGateProperties","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties"],"constructors":[],"fields":[{"title":"Fence Gate open property, Values: true, false","description":"Fence Gate open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(FenceGate, \"open\");\n\n    /** Fence Gate powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(FenceGate, \"powered\");\n\n    /** Fence Gate in_wall property, Values: true, false","doc":{},"name":"inWall","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Fence Gate open property, Values: true, false","description":"Fence Gate open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(FenceGate, \"open\");\n\n    /** Fence Gate powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(FenceGate, \"powered\");\n\n    /** Fence Gate in_wall property, Values: true, false /\n    public static final BlockBooleanProperty inWall = getInstanceFor(FenceGate, \"in_wall\");\n\n    /** Applies whether the {@code Fence Gate} is open or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyOpen(Block block, boolean value) {\n        return apply(block, open, value);\n    }\n\n    /** Applies whether the {@code Fence Gate} is powered or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyPowered(Block block, boolean value) {\n        return apply(block, powered, value);\n    }\n\n    /** Applies whether the {@code Fence Gate} is in wall or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyInWall","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.FenceGate"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.FenceProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Fence properties helper","description":"Fence properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"FenceProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.FenceProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Fence north property, Values: true, false","description":"Fence north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Fence, \"north\");\n\n    /** Fence east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Fence, \"east\");\n\n    /** Fence south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Fence, \"south\");\n\n    /** Fence west property, Values: true, false","doc":{},"name":"west","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Fence north property, Values: true, false","description":"Fence north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Fence, \"north\");\n\n    /** Fence east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Fence, \"east\");\n\n    /** Fence south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Fence, \"south\");\n\n    /** Fence west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(Fence, \"west\");\n\n    /** Applies whether the {@code Fence} is connected north or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyNorth(Block block, boolean value) {\n        return apply(block, north, value);\n    }\n\n    /** Applies whether the {@code Fence} is connected east or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyEast(Block block, boolean value) {\n        return apply(block, east, value);\n    }\n\n    /** Applies whether the {@code Fence} is connected south or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applySouth(Block block, boolean value) {\n        return apply(block, south, value);\n    }\n\n    /** Applies whether the {@code Fence} is connected west or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyWest","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Fence"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.FireProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Fire properties helper","description":"Fire properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"FireProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.FireProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Fire age property, Values: 0 - 15","description":"Fire age property, Values: 0 - 15 /\n    public static final BlockIntegerProperty age = getInstanceFor(FireBlock, \"age\");\n\n    /** Fire upper property, Values: 0 - 2 /\n    public static final BlockIntegerProperty upper = getInstanceFor(FireBlock, \"upper\");\n\n    /** Fire alt property, Values: true, false /\n    public static final BlockBooleanProperty alt = getInstanceFor(FireBlock, \"alt\");\n\n    /** Fire north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(FireBlock, \"north\");\n\n    /** Fire east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(FireBlock, \"east\");\n\n    /** Fire south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(FireBlock, \"south\");\n\n    /** Fire west property, Values: true, false","doc":{},"name":"west","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Fire age property, Values: 0 - 15","description":"Fire age property, Values: 0 - 15 /\n    public static final BlockIntegerProperty age = getInstanceFor(FireBlock, \"age\");\n\n    /** Fire upper property, Values: 0 - 2 /\n    public static final BlockIntegerProperty upper = getInstanceFor(FireBlock, \"upper\");\n\n    /** Fire alt property, Values: true, false /\n    public static final BlockBooleanProperty alt = getInstanceFor(FireBlock, \"alt\");\n\n    /** Fire north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(FireBlock, \"north\");\n\n    /** Fire east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(FireBlock, \"east\");\n\n    /** Fire south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(FireBlock, \"south\");\n\n    /** Fire west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(FireBlock, \"west\");\n\n    /** Applies age to the {@code Fire}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyAge(Block block, int value) {\n        return apply(block, age, value);\n    }\n\n    /** Applies whether the {@code Fire} is alternated or not, Official information about this is still unknown","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyAlt(Block block, boolean value) {\n        return apply(block, alt, value);\n    }\n\n    /** Applies whether the {@code Fire} texture is shown north or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyNorth(Block block, boolean value) {\n        return apply(block, north, value);\n    }\n\n    /** Applies whether the {@code Fire} texture is shown east or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyEast(Block block, boolean value) {\n        return apply(block, east, value);\n    }\n\n    /** Applies whether the {@code Fire} texture is shown south or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applySouth(Block block, boolean value) {\n        return apply(block, south, value);\n    }\n\n    /** Applies whether the {@code Fire} texture is shown west or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyWest(Block block, boolean value) {\n        return apply(block, west, value);\n    }\n\n    /** Applies upper to the {@code Fire}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyUpper","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.FireBlock"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.FurnaceProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Furnace properties helper","description":"Furnace properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"FurnaceProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.FurnaceProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Furnace facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Furnace facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Furnace facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Furnace facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Furnace, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Furnace}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Furnace"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.GrassProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Grass properties helper","description":"Grass properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"GrassProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.GrassProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Grass snowy property, Values: true, false","description":"Grass snowy property, Values: true, false","doc":{},"name":"snowy","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Grass snowy property, Values: true, false","description":"Grass snowy property, Values: true, false /\n    public static final BlockBooleanProperty snowy = getInstanceFor(Grass, \"snowy\");\n\n    /** Applies whether the {@code Grass} is snowy or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applySnowy","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Grass"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Half":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"TrapDoor properties helper","description":"TrapDoor properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class TrapDoorProperties extends BlockProperties {\n\n    /** TrapDoor facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Trapdoor, \"facing\");\n\n    /** TrapDoor half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.TrapDoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(Trapdoor, \"half\");\n\n    /** TrapDoor open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(Trapdoor, \"open\");\n\n    /** TrapDoor half"]},"name":"Half","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Half","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Half","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.Trapdoor"],"enum":[{"code":"UPPER","value":"","title":"UPPER Half","description":"UPPER Half","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class TrapDoorProperties extends BlockProperties {\n\n    /** TrapDoor facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Trapdoor, \"facing\");\n\n    /** TrapDoor half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.TrapDoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(Trapdoor, \"half\");\n\n    /** TrapDoor open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(Trapdoor, \"open\");\n\n    /** TrapDoor half"]}},{"code":"LOWER","value":"","title":"LOWER Half","description":"LOWER Half","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class TrapDoorProperties extends BlockProperties {\n\n    /** TrapDoor facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Trapdoor, \"facing\");\n\n    /** TrapDoor half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.TrapDoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(Trapdoor, \"half\");\n\n    /** TrapDoor open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(Trapdoor, \"open\");\n\n    /** TrapDoor half"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.HingePosition":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Door properties helper","description":"Door properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class DoorProperties extends BlockProperties {\n\n    /** Door facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WoodenDoor, \"facing\");\n\n    /** Door hinge position property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.HingePosition} /\n    public static final BlockEnumProperty hinge = getInstanceFor(WoodenDoor, \"hinge\");\n\n    /** Door half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(WoodenDoor, \"half\");\n\n    /** Door open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(WoodenDoor, \"open\");\n\n    /** Door powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(WoodenDoor, \"powered\");\n\n    /** Door halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Hinge positions","Jason Jones (darkdiplomat)"]},"name":"HingePosition","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.HingePosition","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.HingePosition","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.WoodenDoor"],"enum":[{"code":"LEFT","value":"","title":"LEFT HingePosition","description":"LEFT HingePosition","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class DoorProperties extends BlockProperties {\n\n    /** Door facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WoodenDoor, \"facing\");\n\n    /** Door hinge position property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.HingePosition} /\n    public static final BlockEnumProperty hinge = getInstanceFor(WoodenDoor, \"hinge\");\n\n    /** Door half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(WoodenDoor, \"half\");\n\n    /** Door open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(WoodenDoor, \"open\");\n\n    /** Door powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(WoodenDoor, \"powered\");\n\n    /** Door halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Hinge positions","Jason Jones (darkdiplomat)"]}},{"code":"RIGHT","value":"","title":"RIGHT HingePosition","description":"RIGHT HingePosition","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class DoorProperties extends BlockProperties {\n\n    /** Door facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WoodenDoor, \"facing\");\n\n    /** Door hinge position property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.HingePosition} /\n    public static final BlockEnumProperty hinge = getInstanceFor(WoodenDoor, \"hinge\");\n\n    /** Door half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.DoorProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(WoodenDoor, \"half\");\n\n    /** Door open property, Values: true, false /\n    public static final BlockBooleanProperty open = getInstanceFor(WoodenDoor, \"open\");\n\n    /** Door powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(WoodenDoor, \"powered\");\n\n    /** Door halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Hinge positions","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.HopperProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Hopper properties helper","description":"Hopper properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"HopperProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.HopperProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Hopper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP)","description":"Hopper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Hopper, \"facing\");\n\n    /** Hopper enabled property, Values: true, false","doc":{},"name":"enabled","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Hopper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP)","description":"Hopper facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Hopper, \"facing\");\n\n    /** Hopper enabled property, Values: true, false /\n    public static final BlockBooleanProperty enabled = getInstanceFor(Hopper, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Hopper}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code Hopper} is enabled or not.","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyEnabled","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Hopper"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.JukeboxProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Jukebox properties helper","description":"Jukebox properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"JukeboxProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.JukeboxProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Jukebox has_record property, Values: true, false","description":"Jukebox has_record property, Values: true, false","doc":{},"name":"hasRecord","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"final static"}],"methods":[{"title":"Jukebox has_record property, Values: true, false","description":"Jukebox has_record property, Values: true, false /\n    public final static BlockBooleanProperty hasRecord = getInstanceFor(Jukebox, \"has_record\");\n\n    /** Applies whether the {@code Jukebox} has a record or not. The TileEntity should be used to set the record ID.","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyRecord","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Jukebox"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.LadderProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Ladder properties helper","description":"Ladder properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"LadderProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.LadderProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Ladder facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Ladder facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Ladder facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Ladder facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Ladder, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Ladder}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Ladder"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.LeavesProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Leaves properties helper","description":"Leaves properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"LeavesProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.LeavesProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"implements":["WoodProperties"],"constructors":[],"fields":[{"title":"Leaves decayable property, Values: true, false","description":"Leaves decayable property, Values: true, false /\n    public static final BlockBooleanProperty decayable = getInstanceFor(OakLeaves, \"decayable\");\n\n    /** Leaves check_decay property, Values: true, false /\n    public static final BlockBooleanProperty checkDecay = getInstanceFor(OakLeaves, \"check_decay\");\n\n    /** (Old) Leaves variant property, Values {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLeaves, \"variant\");\n\n    /** (New) Leaves variant property, Values {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul>","doc":{},"name":"variantNew","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Leaves decayable property, Values: true, false","description":"Leaves decayable property, Values: true, false /\n    public static final BlockBooleanProperty decayable = getInstanceFor(OakLeaves, \"decayable\");\n\n    /** Leaves check_decay property, Values: true, false /\n    public static final BlockBooleanProperty checkDecay = getInstanceFor(OakLeaves, \"check_decay\");\n\n    /** (Old) Leaves variant property, Values {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Oak</ul> <ul>Spruce</ul> <ul>Birch</ul> <ul>Jungle</ul> /\n    public static final BlockEnumProperty variantOld = getInstanceFor(OakLeaves, \"variant\");\n\n    /** (New) Leaves variant property, Values {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}<br/> Applies to:<br/> <ul>Acacia</ul> <ul>Dark Oak</ul> /\n    public static final BlockEnumProperty variantNew = getInstanceFor(AcaciaLeaves, \"variant\");\n\n    /** Applies whether the {@code Leaves} is decayable or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyDecayable(Block block, boolean value) {\n        return apply(block, decayable, value);\n    }\n\n    /** Applies whether the {@code Leaves} should check decay or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyCheckDecay(Block block, boolean value) {\n        return apply(block, checkDecay, value);\n    }\n\n    /** Applies variant to the {@code Leaves}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyVariant","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Variant","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","net.visualillusionsent.utils.Verify","io.wolfscript.api.world.blocks.BlockType.AcaciaLeaves","io.wolfscript.api.world.blocks.BlockType.DarkOakLeaves","io.wolfscript.api.world.blocks.BlockType.OakLeaves"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.LiquidProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Liquid properties helper","description":"Liquid properties helper<br/> Applies to:<br/> <ul>Water</ul> <ul>Lava</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"LiquidProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.LiquidProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Liquid level property, Values: 0 - 15","description":"Liquid level property, Values: 0 - 15","doc":{},"name":"level","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Liquid level property, Values: 0 - 15","description":"Liquid level property, Values: 0 - 15 /\n    public static final BlockIntegerProperty level = getInstanceFor(Water, \"level\");\n\n    /** Applies level to the {@code Liquid}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyLevel","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Water"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Mode":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Redstone Comparator properties helper","description":"Redstone Comparator properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneComparatorProperties extends DirectionalBlockProperties {\n\n    /** Redstone Comparator powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(RedstoneComparator, \"powered\");\n\n    /** Redstone Comparator mode property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneComparatorProperties.Mode} /\n    public static final BlockEnumProperty mode = getInstanceFor(RedstoneComparator, \"mode\");\n\n    /** Redstone Comparator modes"]},"name":"Mode","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Mode","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Mode","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.RedstoneComparator"],"enum":[{"code":"COMPARE","value":"","title":"COMPARE Mode","description":"COMPARE Mode","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneComparatorProperties extends DirectionalBlockProperties {\n\n    /** Redstone Comparator powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(RedstoneComparator, \"powered\");\n\n    /** Redstone Comparator mode property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneComparatorProperties.Mode} /\n    public static final BlockEnumProperty mode = getInstanceFor(RedstoneComparator, \"mode\");\n\n    /** Redstone Comparator modes"]}},{"code":"SUBTRACT","value":"","title":"SUBTRACT Mode","description":"SUBTRACT Mode","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class RedstoneComparatorProperties extends DirectionalBlockProperties {\n\n    /** Redstone Comparator powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(RedstoneComparator, \"powered\");\n\n    /** Redstone Comparator mode property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.RedstoneComparatorProperties.Mode} /\n    public static final BlockEnumProperty mode = getInstanceFor(RedstoneComparator, \"mode\");\n\n    /** Redstone Comparator modes"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.MyceliumProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Mycelium properties helper","description":"Mycelium properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"MyceliumProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.MyceliumProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Mycelium snowy property, Values: true, false","description":"Mycelium snowy property, Values: true, false","doc":{},"name":"snowy","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Mycelium snowy property, Values: true, false","description":"Mycelium snowy property, Values: true, false /\n    public static final BlockBooleanProperty snowy = getInstanceFor(Mycelium, \"snowy\");\n\n    /** Applies whether the {@code Mycelium} is snowy or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applySnowy","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Mycelium"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.NetherWartProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"NetherWart properties helper","description":"NetherWart properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"NetherWartProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.NetherWartProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"NetherWart age property, Values: 0 - 3","description":"NetherWart age property, Values: 0 - 3","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"NetherWart age property, Values: 0 - 3","description":"NetherWart age property, Values: 0 - 3 /\n    public static final BlockIntegerProperty age = getInstanceFor(NetherWart, \"age\");\n\n    /** Applies age to the {@code NetherWart}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.NetherWart"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Orientation":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Lever properties helper","description":"Lever properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]},"name":"Orientation","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Orientation","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Orientation","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.Lever"],"enum":[{"code":"DOWN_X","value":"","title":"DOWN_X Orientation","description":"DOWN_X Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"EAST","value":"","title":"EAST Orientation","description":"EAST Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"WEST","value":"","title":"WEST Orientation","description":"WEST Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"SOUTH","value":"","title":"SOUTH Orientation","description":"SOUTH Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"NORTH","value":"","title":"NORTH Orientation","description":"NORTH Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"UP_Z","value":"","title":"UP_Z Orientation","description":"UP_Z Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"UP_X","value":"","title":"UP_X Orientation","description":"UP_X Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}},{"code":"DOWN_Z","value":"","title":"DOWN_Z Orientation","description":"DOWN_Z Orientation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class LeverProperties extends BlockProperties {\n\n    /** Lever facing property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.LeverProperties.Orientation} /\n    public static final BlockEnumProperty facing = getInstanceFor(Lever, \"facing\");\n\n    /** Lever powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Lever, \"powered\");\n\n    /** Lever orientation","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.PistonProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Piston properties helper","description":"Piston properties helper<br/> Sticky Pistons and normal Pistons are 2 different Block ID (not a property change)","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PistonProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.PistonProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Piston facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Piston facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(Piston, \"facing\");\n\n    /** Piston extended property, Values: true, false","doc":{},"name":"extended","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Piston facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Piston facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(Piston, \"facing\");\n\n    /** Piston extended property, Values: true, false /\n    public static final BlockBooleanProperty extended = getInstanceFor(Piston, \"extended\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Piston}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code Piston} is extended or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyExtended","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Piston"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.PlanksProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Planks properties helper","description":"Planks properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PlanksProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.PlanksProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"implements":["WoodProperties"],"constructors":[],"fields":[{"title":"Planks variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Planks variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","doc":{},"name":"variant","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Planks variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Planks variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} /\n    public static final BlockEnumProperty variant = getInstanceFor(OakPlanks, \"variant\");\n\n    /** Applies variant to the {@code Planks}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyVariant","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Variant","description":"the {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.OakPlanks"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.PortalProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Portal properties helper","description":"Portal properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PortalProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.PortalProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Portal axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis} (excluding Y)","description":"Portal axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis} (excluding Y)","doc":{},"name":"axis","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Portal axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis} (excluding Y)","description":"Portal axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis} (excluding Y) /\n    public static final BlockEnumProperty axis = getInstanceFor(Portal, \"axis\");\n\n    /** Applies axis to the {@code Portal}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAxis","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Axis","description":"the {@link io.wolfscript.api.world.blocks.BlockFace.Axis} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.Portal"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.PressurePlateProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Pressure Plate properties helper","description":"Pressure Plate properties helper<br/> Applies to<br/> <ul>Wooden Pressure Plate</ul> <ul>Stone Pressure Plate</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PressurePlateProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.PressurePlateProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Pressure Plate powered property, Values: true, false","description":"Pressure Plate powered property, Values: true, false","doc":{},"name":"powered","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Pressure Plate powered property, Values: true, false","description":"Pressure Plate powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(WoodenPressurePlate, \"powered\");\n\n    /** Applies whether the {@code Pressure Plate} is powered or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyPowered","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.WoodenPressurePlate"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.RailPoweredProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Rail powered properties helper","description":"Rail powered properties helper<br/> Applies to:<br/> <ul>Activator Rail</ul> <ul>Detector Rail</ul> <ul>Powered Rail</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"RailPoweredProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.RailPoweredProperties","type":"class","scope":"public","describe":"final","extends":["RailProperties"],"constructors":[],"fields":[{"title":"Powered and Activator Rail powered property, Values: true, false","description":"Powered and Activator Rail powered property, Values: true, false /\n    public static final BlockBooleanProperty poweredPoweredRail = getInstanceFor(PoweredRail, \"powered\");\n\n    /** Detector Rail powered property, Values: true, false","doc":{},"name":"poweredDectectorRail","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Powered and Activator Rail powered property, Values: true, false","description":"Powered and Activator Rail powered property, Values: true, false /\n    public static final BlockBooleanProperty poweredPoweredRail = getInstanceFor(PoweredRail, \"powered\");\n\n    /** Detector Rail powered property, Values: true, false /\n    public static final BlockBooleanProperty poweredDectectorRail = getInstanceFor(DetectorRail, \"powered\");\n\n    /** Applies whether the {@code Rail} is powered or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyPowered","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","net.visualillusionsent.utils.Verify","io.wolfscript.api.world.blocks.BlockType.DetectorRail","io.wolfscript.api.world.blocks.BlockType.PoweredRail"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.RedstoneRepeaterProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Redstone Repeater properties helper","description":"Redstone Repeater properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"RedstoneRepeaterProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.RedstoneRepeaterProperties","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.api.world.blocks.properties.helpers.DirectionalBlockProperties"],"constructors":[],"fields":[{"title":"Redstone Repeater locked property, Values: true, false","description":"Redstone Repeater locked property, Values: true, false /\n    public static final BlockBooleanProperty locked = getInstanceFor(RedstoneRepeaterOff, \"locked\");\n\n    /** Redstone Repeater delay property, Values: 1 - 4","doc":{},"name":"delay","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Redstone Repeater locked property, Values: true, false","description":"Redstone Repeater locked property, Values: true, false /\n    public static final BlockBooleanProperty locked = getInstanceFor(RedstoneRepeaterOff, \"locked\");\n\n    /** Redstone Repeater delay property, Values: 1 - 4 /\n    public static final BlockIntegerProperty delay = getInstanceFor(RedstoneRepeaterOff, \"delay\");\n\n    /** Applies whether the {@code Redstone Repeater} is locked or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyLocked(Block block, boolean value) {\n        return apply(block, locked, value);\n    }\n\n    /** Applies delay to the {@code Redstone Repeater}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyDelay","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.RedstoneRepeaterOff"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.ReedProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Reed (Sugarcane) properties helper","description":"Reed (Sugarcane) properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReedProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.ReedProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Reed age property, Values: 0 - 15","description":"Reed age property, Values: 0 - 15","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Reed age property, Values: 0 - 15","description":"Reed age property, Values: 0 - 15 /\n    public static final BlockIntegerProperty age = getInstanceFor(Reed, \"age\");\n\n    /** Applies age to the {@code Cake}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Reed"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.RotatedPillarProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Rotated Pillar properties helper","description":"Rotated Pillar properties helper<br/> Applies to<br/> <ul>Hay</ul> <ul>Log</ul>","name":"RotatedPillarProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.RotatedPillarProperties","type":"class","scope":"public","describe":"abstract","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Rotated Pillar axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis}","description":"Rotated Pillar axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis}","doc":{},"name":"axis","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Rotated Pillar axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis}","description":"Rotated Pillar axis property, Values: {@link io.wolfscript.api.world.blocks.BlockFace.Axis} /\n    public static final BlockEnumProperty axis = getInstanceFor(HayBale, \"axis\");\n\n    /** Applies axis to the {@code Rotated Pillar}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAxis","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Axis","description":"the {@link io.wolfscript.api.world.blocks.BlockFace.Axis} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.HayBale"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Rotation":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Block properties helper","description":"Block properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]},"name":"Rotation","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Rotation","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.Wolf","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.api.world.blocks.properties.BlockProperty","net.visualillusionsent.utils.Verify"],"enum":[{"code":"SOUTH","value":"","title":"SOUTH Rotation","description":"SOUTH Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"SOUTHBYSOUTHWEST","value":"","title":"SOUTHBYSOUTHWEST Rotation","description":"SOUTHBYSOUTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"SOUTHWEST","value":"","title":"SOUTHWEST Rotation","description":"SOUTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"WESTBYSOUTHWEST","value":"","title":"WESTBYSOUTHWEST Rotation","description":"WESTBYSOUTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"WEST","value":"","title":"WEST Rotation","description":"WEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"WESTBYNORTHWEST","value":"","title":"WESTBYNORTHWEST Rotation","description":"WESTBYNORTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"NORTHWEST","value":"","title":"NORTHWEST Rotation","description":"NORTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"NORTHBYNORTHWEST","value":"","title":"NORTHBYNORTHWEST Rotation","description":"NORTHBYNORTHWEST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"NORTH","value":"","title":"NORTH Rotation","description":"NORTH Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"NORTHBYNORTHEAST","value":"","title":"NORTHBYNORTHEAST Rotation","description":"NORTHBYNORTHEAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"NORTHEAST","value":"","title":"NORTHEAST Rotation","description":"NORTHEAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"EASTBYNORTHEAST","value":"","title":"EASTBYNORTHEAST Rotation","description":"EASTBYNORTHEAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"EAST","value":"","title":"EAST Rotation","description":"EAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"EASTBYSOUTHEAST","value":"","title":"EASTBYSOUTHEAST Rotation","description":"EASTBYSOUTHEAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}},{"code":"SOUTHEAST","value":"","title":"SOUTHEAST Rotation","description":"SOUTHEAST Rotation","doc":{"author":["Jason Jones (darkdiplomat) /\npublic abstract class BlockProperties {\n\n    static <T extends BlockProperty> T getInstanceFor(BlockType type, String property) {\n        return Wolf.factory().getObjectFactory().getPropertyInstance(type, property);\n    }\n\n    public static Block apply(Block block, BlockProperty property, Comparable value) throws IllegalArgumentException {\n        Verify.notNull(block, \"Block block\");\n        Verify.notNull(property, \"BlockProperty property\");\n        Verify.notNull(value, \"Comparable value\");\n        block.setPropertyValue(property, value);\n        return block;\n    }\n\n    /** Rotation helper<br/> Applies to<br/> <ul>Banner</ul> <ul>Standing Sign</ul>","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.SaplingProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Sapling properties helper","description":"Sapling properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SaplingProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.SaplingProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"implements":["WoodProperties"],"constructors":[],"fields":[{"title":"Sapling type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Sapling type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} /\n    public static final BlockEnumProperty type = getInstanceFor(OakSapling, \"type\");\n\n    /** Sapling stage property, Values: 0, 1","doc":{},"name":"stage","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Sapling type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Sapling type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} /\n    public static final BlockEnumProperty type = getInstanceFor(OakSapling, \"type\");\n\n    /** Sapling stage property, Values: 0, 1 /\n    public static final BlockIntegerProperty stage = getInstanceFor(OakSapling, \"stage\");\n\n    /** Applies type to the {@code Sapling}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyType(Block block, Variant value) {\n        return apply(block, type, value);\n    }\n\n    /** Applies stage to the {@code Sapling}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyStage","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.OakSapling"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Shape":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Stairs properties helper","description":"Stairs properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]},"name":"Shape","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Shape","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Shape","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.CobbleStair"],"enum":[{"code":"STRAIGHT","value":"","title":"STRAIGHT Shape","description":"STRAIGHT Shape","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]}},{"code":"INNER_LEFT","value":"","title":"INNER_LEFT Shape","description":"INNER_LEFT Shape","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]}},{"code":"INNER_RIGHT","value":"","title":"INNER_RIGHT Shape","description":"INNER_RIGHT Shape","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]}},{"code":"OUTER_LEFT","value":"","title":"OUTER_LEFT Shape","description":"OUTER_LEFT Shape","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]}},{"code":"OUTER_RIGHT","value":"","title":"OUTER_RIGHT Shape","description":"OUTER_RIGHT Shape","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class StairsProperties extends BlockProperties {\n\n    /** Stairs facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockDirectionProperty facing = getInstanceFor(CobbleStair, \"facing\");\n\n    /** Stairs half property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Half} /\n    public static final BlockEnumProperty half = getInstanceFor(CobbleStair, \"half\");\n\n    /** Stairs shape property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.StairsProperties.Shape} /\n    public static final BlockEnumProperty shape = getInstanceFor(CobbleStair, \"shape\");\n\n    /** Stairs halves","Jason Jones (darkdiplomat) /\n    public enum Half {\n        UPPER,\n        LOWER;\n\n        public static Half valueOf(int ordinal) {\n            if (ordinal < 0 || ordinal >= values().length) {\n                throw new IllegalArgumentException();\n            }\n            return values()[ordinal];\n        }\n    }\n\n    /** Stair shapes","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.SkullProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Skull properties helper","description":"Skull properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SkullProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.SkullProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Skull facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Skull facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockEnumProperty facing = getInstanceFor(SkeletonHead, \"facing\");\n\n    /** Skull nodrop property, Values: true, false","doc":{},"name":"noDrop","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Skull facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace}","description":"Skull facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} /\n    public static final BlockEnumProperty facing = getInstanceFor(SkeletonHead, \"facing\");\n\n    /** Skull nodrop property, Values: true, false /\n    public static final BlockBooleanProperty noDrop = getInstanceFor(SkeletonHead, \"nodrop\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Skull}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code Skull} can drop or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyNoDrop","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.SkeletonHead"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.SnowProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Snow properties helper","description":"Snow properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SnowProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.SnowProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Snow layers property, Values: 1 - 8","description":"Snow layers property, Values: 1 - 8","doc":{},"name":"layers","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Snow layers property, Values: 1 - 8","description":"Snow layers property, Values: 1 - 8 /\n    public static final BlockIntegerProperty layers = getInstanceFor(Snow, \"layers\");\n\n    /** Applies layer to the {@code Snow}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyLayers","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.Snow"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.SpongeProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Sponge properties helper","description":"Sponge properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SpongeProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.SpongeProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Sponge wet property, Values: true, false","description":"Sponge wet property, Values: true, false","doc":{},"name":"wet","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Sponge wet property, Values: true, false","description":"Sponge wet property, Values: true, false /\n    public static final BlockBooleanProperty wet = getInstanceFor(Sponge, \"wet\");\n\n    /** Applies whether the {@code Sponge} is wet or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyWet","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Sponge"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.StainedGlassPaneProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Stained Glass Pane properties helper","description":"Stained Glass Pane properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"StainedGlassPaneProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.StainedGlassPaneProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Stained Glass Pane color property, Values: DyeColor (excluding CUSTOM)","description":"Stained Glass Pane color property, Values: DyeColor (excluding CUSTOM)","doc":{},"name":"color","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Stained Glass Pane color property, Values: DyeColor (excluding CUSTOM)","description":"Stained Glass Pane color property, Values: DyeColor (excluding CUSTOM) /\n    public static final BlockEnumProperty color = getInstanceFor(WhiteGlassPane, \"color\");\n\n    /** Applies color to the {@code Stained Glass Pane}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyColor","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.DyeColor","description":"the {@link io.wolfscript.api.DyeColor} value to apply"}]}],"imports":["io.wolfscript.api.DyeColor","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.WhiteGlassPane"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.StainedGlassProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Stained Glass properties helper","description":"Stained Glass properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"StainedGlassProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.StainedGlassProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Stained Glass color property, Values: DyeColor (excluding CUSTOM)","description":"Stained Glass color property, Values: DyeColor (excluding CUSTOM)","doc":{},"name":"color","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Stained Glass color property, Values: DyeColor (excluding CUSTOM)","description":"Stained Glass color property, Values: DyeColor (excluding CUSTOM) /\n    public static final BlockEnumProperty color = getInstanceFor(WhiteGlass, \"color\");\n\n    /** Applies color to the {@code Stained Glass}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyColor","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.DyeColor","description":"the {@link io.wolfscript.api.DyeColor} value to apply"}]}],"imports":["io.wolfscript.api.DyeColor","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.WhiteGlass"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.StandingSignProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Standing Sign properties helper","description":"Standing Sign properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"StandingSignProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.StandingSignProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Standing Sign rotation property, Values: 0 - 15","description":"Standing Sign rotation property, Values: 0 - 15","doc":{},"name":"rotation","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Standing Sign rotation property, Values: 0 - 15","description":"Standing Sign rotation property, Values: 0 - 15 /\n    public static final BlockIntegerProperty rotation = getInstanceFor(StandingSign, \"rotation\");\n\n    /** Applies rotation to the {@code Standing Sign}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyRotation(Block block, int value) {\n        return apply(block, rotation, value);\n    }\n\n    /** Applies rotation to the {@code Standing Sign}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyRotation","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Rotation","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.StandingSign"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.StemProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Stem properties helper","description":"Stem properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"StemProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.StemProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Stem facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM)","description":"Stem facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(MelonStem, \"facing\");\n\n    /** Stem age property, Values: 0 - 7","doc":{},"name":"age","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Stem facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM)","description":"Stem facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(MelonStem, \"facing\");\n\n    /** Stem age property, Values: 0 - 7 /\n    public static final BlockIntegerProperty age = getInstanceFor(MelonStem, \"age\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Stem}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies age to the {@code Stem}","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyAge","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.MelonStem"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.TNTProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"TNT properties helper","description":"TNT properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TNTProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.TNTProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"TNT explode property, Values: true, false","description":"TNT explode property, Values: true, false","doc":{},"name":"explode","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"TNT explode property, Values: true, false","description":"TNT explode property, Values: true, false /\n    public static final BlockBooleanProperty explode = getInstanceFor(TNT, \"explode\");\n\n    /** Applies whether the {@code TNT} is to explode or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyExplode","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.TNT"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.TorchProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Torch properties helper","description":"Torch properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TorchProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.TorchProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Torch facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM)","description":"Torch facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Torch facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM)","description":"Torch facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(Torch, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Torch}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.Torch"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.TripwireHookProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Tripwire Hook properties helper","description":"Tripwire Hook properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TripwireHookProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.TripwireHookProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Tripwire Hook facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Tripwire Hook facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(TripwireHook, \"facing\");\n\n    /** Tripwire Hook powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(TripwireHook, \"powered\");\n\n    /** Tripwire Hook attached property, Values: true, false /\n    public static final BlockBooleanProperty attached = getInstanceFor(TripwireHook, \"attached\");\n\n    /** Tripwire Hook suspended property, Values: true, false","doc":{},"name":"suspended","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Tripwire Hook facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Tripwire Hook facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(TripwireHook, \"facing\");\n\n    /** Tripwire Hook powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(TripwireHook, \"powered\");\n\n    /** Tripwire Hook attached property, Values: true, false /\n    public static final BlockBooleanProperty attached = getInstanceFor(TripwireHook, \"attached\");\n\n    /** Tripwire Hook suspended property, Values: true, false /\n    public static final BlockBooleanProperty suspended = getInstanceFor(TripwireHook, \"suspended\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code Tripwire}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyFacing(Block block, BlockFace value) {\n        return apply(block, facing, value);\n    }\n\n    /** Applies whether the {@code Tripwire Hook} is powered or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyPowered(Block block, boolean value) {\n        return apply(block, powered, value);\n    }\n\n    /** Applies whether the {@code Tripwire Hook} is attached or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyAttached(Block block, boolean value) {\n        return apply(block, attached, value);\n    }\n\n    /** Applies whether the {@code Tripwire Hook} is suspended or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applySuspended","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.TripwireHook"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.TripwireProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Tripwire properties helper","description":"Tripwire properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TripwireProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.TripwireProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Tripwire powered property, Values: true, false","description":"Tripwire powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Tripwire, \"powered\");\n\n    /** Tripwire suspended property, Values: true, false /\n    public static final BlockBooleanProperty suspended = getInstanceFor(Tripwire, \"suspended\");\n\n    /** Tripwire attached property, Values: true, false /\n    public static final BlockBooleanProperty attached = getInstanceFor(Tripwire, \"attached\");\n\n    /** Tripwire disarmed property, Values: true, false /\n    public static final BlockBooleanProperty disarmed = getInstanceFor(Tripwire, \"disarmed\");\n\n    /** Tripwire north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Tripwire, \"north\");\n\n    /** Tripwire east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Tripwire, \"east\");\n\n    /** Tripwire south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Tripwire, \"south\");\n\n    /** Tripwire west property, Values: true, false","doc":{},"name":"west","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Tripwire powered property, Values: true, false","description":"Tripwire powered property, Values: true, false /\n    public static final BlockBooleanProperty powered = getInstanceFor(Tripwire, \"powered\");\n\n    /** Tripwire suspended property, Values: true, false /\n    public static final BlockBooleanProperty suspended = getInstanceFor(Tripwire, \"suspended\");\n\n    /** Tripwire attached property, Values: true, false /\n    public static final BlockBooleanProperty attached = getInstanceFor(Tripwire, \"attached\");\n\n    /** Tripwire disarmed property, Values: true, false /\n    public static final BlockBooleanProperty disarmed = getInstanceFor(Tripwire, \"disarmed\");\n\n    /** Tripwire north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Tripwire, \"north\");\n\n    /** Tripwire east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Tripwire, \"east\");\n\n    /** Tripwire south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Tripwire, \"south\");\n\n    /** Tripwire west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(Tripwire, \"west\");\n\n    /** Applies whether the {@code Tripwire} is powered or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyPowered(Block block, boolean value) {\n        return apply(block, powered, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is suspended or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applySuspended(Block block, boolean value) {\n        return apply(block, suspended, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is attached or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyAttached(Block block, boolean value) {\n        return apply(block, attached, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is disarmed or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyDisarmed(Block block, boolean value) {\n        return apply(block, disarmed, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is connected north or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyNorth(Block block, boolean value) {\n        return apply(block, north, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is connected east or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyEast(Block block, boolean value) {\n        return apply(block, east, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is connected south or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applySouth(Block block, boolean value) {\n        return apply(block, south, value);\n    }\n\n    /** Applies whether the {@code Tripwire} is connected west or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyWest","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Tripwire"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Type":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Sandstone (Not Red) properties helper","description":"Sandstone (Not Red) properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class SandstoneProperties extends BlockProperties {\n\n    /** Sandstone type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.SandstoneProperties.Type} /\n    public static final BlockEnumProperty type = getInstanceFor(Sandstone, \"type\");\n\n    /** Sandstone types","Jason Jones (darkdiplomat)"]},"name":"Type","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Type","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Type","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.Sandstone"],"enum":[{"code":"DEFAULT","value":"","title":"DEFAULT Type","description":"DEFAULT Type","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class SandstoneProperties extends BlockProperties {\n\n    /** Sandstone type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.SandstoneProperties.Type} /\n    public static final BlockEnumProperty type = getInstanceFor(Sandstone, \"type\");\n\n    /** Sandstone types","Jason Jones (darkdiplomat)"]}},{"code":"CHISELED","value":"","title":"CHISELED Type","description":"CHISELED Type","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class SandstoneProperties extends BlockProperties {\n\n    /** Sandstone type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.SandstoneProperties.Type} /\n    public static final BlockEnumProperty type = getInstanceFor(Sandstone, \"type\");\n\n    /** Sandstone types","Jason Jones (darkdiplomat)"]}},{"code":"SMOOTH","value":"","title":"SMOOTH Type","description":"SMOOTH Type","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class SandstoneProperties extends BlockProperties {\n\n    /** Sandstone type property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.SandstoneProperties.Type} /\n    public static final BlockEnumProperty type = getInstanceFor(Sandstone, \"type\");\n\n    /** Sandstone types","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.Variant":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Wall properties helper","description":"Wall properties helper","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class WallProperties extends BlockProperties {\n\n    /** Wall up property, Values: true, false /\n    public static final BlockBooleanProperty up = getInstanceFor(CobblestoneWall, \"up\");\n\n    /** Wall north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(CobblestoneWall, \"north\");\n\n    /** Wall east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(CobblestoneWall, \"east\");\n\n    /** Wall south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(CobblestoneWall, \"south\");\n\n    /** Wall west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(CobblestoneWall, \"west\");\n\n    /** Wall variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WallProperties.Variant} /\n    public static final BlockEnumProperty variant = getInstanceFor(CobblestoneWall, \"variant\");\n\n    /** Wall variants","Jason Jones (darkdiplomat)"]},"name":"Variant","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.Variant","type":"enum","scope":"public","constructors":[],"methods":[{"title":"valueOf method","description":"valueOf method","scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.properties.helpers.Variant","name":"valueOf","args":[{"name":"ordinal","type":"int","description":"ordinal argument"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.CobblestoneWall"],"enum":[{"code":"NORMAL","value":"","title":"NORMAL Variant","description":"NORMAL Variant","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class WallProperties extends BlockProperties {\n\n    /** Wall up property, Values: true, false /\n    public static final BlockBooleanProperty up = getInstanceFor(CobblestoneWall, \"up\");\n\n    /** Wall north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(CobblestoneWall, \"north\");\n\n    /** Wall east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(CobblestoneWall, \"east\");\n\n    /** Wall south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(CobblestoneWall, \"south\");\n\n    /** Wall west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(CobblestoneWall, \"west\");\n\n    /** Wall variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WallProperties.Variant} /\n    public static final BlockEnumProperty variant = getInstanceFor(CobblestoneWall, \"variant\");\n\n    /** Wall variants","Jason Jones (darkdiplomat)"]}},{"code":"MOSSY","value":"","title":"MOSSY Variant","description":"MOSSY Variant","doc":{"author":["Jason Jones (darkdiplomat) /\npublic final class WallProperties extends BlockProperties {\n\n    /** Wall up property, Values: true, false /\n    public static final BlockBooleanProperty up = getInstanceFor(CobblestoneWall, \"up\");\n\n    /** Wall north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(CobblestoneWall, \"north\");\n\n    /** Wall east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(CobblestoneWall, \"east\");\n\n    /** Wall south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(CobblestoneWall, \"south\");\n\n    /** Wall west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(CobblestoneWall, \"west\");\n\n    /** Wall variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WallProperties.Variant} /\n    public static final BlockEnumProperty variant = getInstanceFor(CobblestoneWall, \"variant\");\n\n    /** Wall variants","Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.VineProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Vine properties helper","description":"Vine properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"VineProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.VineProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Vine up property, Values: true, false","description":"Vine up property, Values: true, false /\n    public static final BlockBooleanProperty up = getInstanceFor(Vines, \"up\");\n\n    /** Vine north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Vines, \"north\");\n\n    /** Vine east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Vines, \"east\");\n\n    /** Vine south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Vines, \"south\");\n\n    /** Vine west property, Values: true, false","doc":{},"name":"west","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","describe":"static final"}],"methods":[{"title":"Vine up property, Values: true, false","description":"Vine up property, Values: true, false /\n    public static final BlockBooleanProperty up = getInstanceFor(Vines, \"up\");\n\n    /** Vine north property, Values: true, false /\n    public static final BlockBooleanProperty north = getInstanceFor(Vines, \"north\");\n\n    /** Vine east property, Values: true, false /\n    public static final BlockBooleanProperty east = getInstanceFor(Vines, \"east\");\n\n    /** Vine south property, Values: true, false /\n    public static final BlockBooleanProperty south = getInstanceFor(Vines, \"south\");\n\n    /** Vine west property, Values: true, false /\n    public static final BlockBooleanProperty west = getInstanceFor(Vines, \"west\");\n\n    /** Applies whether the {@code Vine} texture is applied up or not","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)","the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyUp(Block block, boolean value) {\n        return apply(block, up, value);\n    }\n\n    /** Applies whether the {@code Vine} texture is applied north or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyNorth(Block block, boolean value) {\n        return apply(block, north, value);\n    }\n\n    /** Applies whether the {@code Vine} texture is applied east or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applyEast(Block block, boolean value) {\n        return apply(block, east, value);\n    }\n\n    /** Applies whether the {@code Vine} texture is applied south or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied /\n    public static Block applySouth(Block block, boolean value) {\n        return apply(block, south, value);\n    }\n\n    /** Applies whether the {@code Vine} texture is applied west or not","java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyWest","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"boolean","description":"the {@code boolean} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockBooleanProperty","io.wolfscript.api.world.blocks.BlockType.Vines"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.WallSignProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Wall Sign properties helper","description":"Wall Sign properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WallSignProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.WallSignProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Wall Sign facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Wall Sign facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","doc":{},"name":"facing","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","describe":"static final"}],"methods":[{"title":"Wall Sign facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM)","description":"Wall Sign facing property, Values: {@link io.wolfscript.api.world.blocks.BlockFace} (Excluding TOP & BOTTOM) /\n    public static final BlockDirectionProperty facing = getInstanceFor(WallSign, \"facing\");\n\n    /** Applies a {@link io.wolfscript.api.world.blocks.BlockFace} facing property to the {@code WallSign}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyFacing","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.BlockFace","description":"the {@link io.wolfscript.api.world.blocks.BlockFace} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.api.world.blocks.properties.BlockDirectionProperty","io.wolfscript.api.world.blocks.BlockType.WallSign"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.WeightedPressurePlateProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Weighted Pressure Plate properties helper","description":"Weighted Pressure Plate properties helper<br/> Applies to<br/> <ul>Light (Gold) Pressure Plate</ul> <ul>Heavy (Iron) Pressure Plate</ul>","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WeightedPressurePlateProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.WeightedPressurePlateProperties","type":"class","scope":"public","describe":"final","extends":["BlockProperties"],"constructors":[],"fields":[{"title":"Weighted Pressure Plate power property, Values: 0 - 15","description":"Weighted Pressure Plate power property, Values: 0 - 15","doc":{},"name":"power","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","describe":"static final"}],"methods":[{"title":"Weighted Pressure Plate power property, Values: 0 - 15","description":"Weighted Pressure Plate power property, Values: 0 - 15 /\n    public static final BlockIntegerProperty power = getInstanceFor(LightWeightedPressurePlate, \"power\");\n\n    /** Applies power to the {@code Weighted Pressure Plate}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyPower","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"int","description":"the {@code int} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockIntegerProperty","io.wolfscript.api.world.blocks.BlockType.LightWeightedPressurePlate"],"properties":[]},"io.wolfscript.api.world.blocks.properties.helpers.WoodSlabProperties":{"namespace":"io.wolfscript.api.world.blocks.properties.helpers","title":"Wood Slab properties helper","description":"Wood Slab properties helper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WoodSlabProperties","qualifiedname":"io.wolfscript.api.world.blocks.properties.helpers.WoodSlabProperties","type":"class","scope":"public","describe":"final","extends":["SlabProperties"],"implements":["WoodProperties"],"constructors":[],"fields":[{"title":"Wood Slab variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Wood Slab variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","doc":{},"name":"variant","scope":"public","type":"io.wolfscript.api.world.blocks.properties.BlockEnumProperty","describe":"static final"}],"methods":[{"title":"Wood Slab variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant}","description":"Wood Slab variant property, Values: {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} /\n    public static final BlockEnumProperty variant = getInstanceFor(OakWoodSlab, \"variant\");\n\n    /** Applies variant to the {@code Wood Slab}","doc":{"return":["the Block with adjusted state (NOTE: Original Block object is also modified, using the return is unnecessary)"],"throws":["java.lang.NullPointerException Should {@code block} or {@code value} be null","java.lang.IllegalArgumentException Should an invalid property be applied"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.blocks.Block","name":"applyVariant","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"the {@link io.wolfscript.api.world.blocks.Block} to be modified"},{"name":"value","type":"io.wolfscript.api.world.blocks.properties.helpers.Variant","description":"the {@link io.wolfscript.api.world.blocks.properties.helpers.WoodProperties.Variant} value to apply"}]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.properties.BlockEnumProperty","io.wolfscript.api.world.blocks.BlockType.OakWoodSlab"],"properties":[]},"io.wolfscript.api.world.effects.0":{"namespace":"io.wolfscript.api.world","title":"Classes and interfaces for namespace io.wolfscript.api.world.effects","description":"Classes and interfaces for namespace io.wolfscript.api.world.effects","name":"effects","qualifiedname":"io.wolfscript.api.world.effects.0","packagename":"io.wolfscript.api.world.effects","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.world.effects.Particle"],"interfaces":[],"enums":["io.wolfscript.api.world.effects.Type"],"namespaces":[],"properties":[]},"io.wolfscript.api.world.effects.Particle":{"namespace":"io.wolfscript.api.world.effects","title":"A particle that can be spawned in the world.","description":"A particle that can be spawned in the world.","doc":{"author":["Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"Particle","qualifiedname":"io.wolfscript.api.world.effects.Particle","type":"class","scope":"public","constructors":[{"title":"Particle constructor","description":"Particle constructor","scope":"public","name":"Particle","args":[{"name":"x","type":"double","description":"x argument"},{"name":"y","type":"double","description":"y argument"},{"name":"z","type":"double","description":"z argument"},{"name":"type","type":"io.wolfscript.api.world.effects.Type","description":"type argument"}]},{"title":"Particle constructor","description":"Particle constructor","scope":"public","name":"Particle","args":[{"name":"x","type":"double","description":"x argument"},{"name":"y","type":"double","description":"y argument"},{"name":"z","type":"double","description":"z argument"},{"name":"velocityX","type":"double","description":"velocityX argument"},{"name":"velocityY","type":"double","description":"velocityY argument"},{"name":"velocityZ","type":"double","description":"velocityZ argument"},{"name":"type","type":"io.wolfscript.api.world.effects.Type","description":"type argument"}]},{"title":"Particle constructor","description":"Particle constructor","scope":"public","name":"Particle","args":[{"name":"x","type":"double","description":"x argument"},{"name":"y","type":"double","description":"y argument"},{"name":"z","type":"double","description":"z argument"},{"name":"velocityX","type":"double","description":"velocityX argument"},{"name":"velocityY","type":"double","description":"velocityY argument"},{"name":"velocityZ","type":"double","description":"velocityZ argument"},{"name":"speed","type":"float","description":"speed argument"},{"name":"quantity","type":"int","description":"quantity argument"},{"name":"type","type":"io.wolfscript.api.world.effects.Type","description":"type argument"}]}],"fields":[{"title":"speed field","description":"speed field","name":"speed","scope":"public","type":"float"},{"title":"quantity field","description":"quantity field","name":"quantity","scope":"public","type":"int"}],"methods":[{"title":"fromName method","description":"fromName method","scope":"public","describe":"static","return":"io.wolfscript.api.world.effects.Type","name":"fromName","args":[{"name":"name","type":"String","description":"name argument"}]}],"imports":[],"properties":[{"name":"McName","modifier":"readonly","args":[],"description":"McName property","return":"String","scope":"public","title":"McName property"}]},"io.wolfscript.api.world.effects.Type":{"namespace":"io.wolfscript.api.world.effects","title":"Sound Effects!","description":"Sound Effects!","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]},"name":"Type","qualifiedname":"io.wolfscript.api.world.effects.Type","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"AMBIENCE_CAVE","value":"\"ambient.cave.cave\"","title":"AMBIENCE_CAVE Type","description":"AMBIENCE_CAVE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"AMBIENCE_RAIN","value":"\"ambient.weather.rain\"","title":"AMBIENCE_RAIN Type","description":"AMBIENCE_RAIN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"AMBIENCE_THUNDER","value":"\"ambient.weather.thunder\"","title":"AMBIENCE_THUNDER Type","description":"AMBIENCE_THUNDER Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ANVIL_BREAK","value":"\"random.anvil_break\"","title":"ANVIL_BREAK Type","description":"ANVIL_BREAK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ANVIL_LAND","value":"\"random.anvil_land\"","title":"ANVIL_LAND Type","description":"ANVIL_LAND Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ANVIL_USE","value":"\"random.anvil_use\"","title":"ANVIL_USE Type","description":"ANVIL_USE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BOW","value":"\"random.bow\"","title":"BOW Type","description":"BOW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BOW_HIT","value":"\"random.bowhit\"","title":"BOW_HIT Type","description":"BOW_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BREATH","value":"\"random.breath\"","title":"BREATH Type","description":"BREATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BURP","value":"\"random.burp\"","title":"BURP Type","description":"BURP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHEST_CLOSED","value":"\"random.chestclosed\"","title":"CHEST_CLOSED Type","description":"CHEST_CLOSED Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHEST_OPEN","value":"\"random.chestopen\"","title":"CHEST_OPEN Type","description":"CHEST_OPEN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CLICK","value":"\"random.click\"","title":"CLICK Type","description":"CLICK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DOOR_CLOSE","value":"\"random.door_close\"","title":"DOOR_CLOSE Type","description":"DOOR_CLOSE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DOOR_OPEN","value":"\"random.door_open\"","title":"DOOR_OPEN Type","description":"DOOR_OPEN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DRINK","value":"\"random.drink\"","title":"DRINK Type","description":"DRINK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"EAT","value":"\"random.eat\"","title":"EAT Type","description":"EAT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"EXPLODE","value":"\"random.explode\"","title":"EXPLODE Type","description":"EXPLODE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FALL_BIG","value":"\"damage.fallbig\"","title":"FALL_BIG Type","description":"FALL_BIG Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FALL_SMALL","value":"\"damage.fallsmall\"","title":"FALL_SMALL Type","description":"FALL_SMALL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FIRE","value":"\"fire.fire\"","title":"FIRE Type","description":"FIRE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FIRE_IGNITE","value":"\"fire.ignite\"","title":"FIRE_IGNITE Type","description":"FIRE_IGNITE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FIZZ","value":"\"random.fizz\"","title":"FIZZ Type","description":"FIZZ Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"FUSE","value":"\"random.fuse\"","title":"FUSE Type","description":"FUSE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GLASS","value":"\"random.glass\"","title":"GLASS Type","description":"GLASS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"HURT","value":"\"random.classic_hurt\"","title":"HURT Type","description":"HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"HURT_FLESH","value":"\"damage.hit\"","title":"HURT_FLESH Type","description":"HURT_FLESH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ITEM_BREAK","value":"\"random.break\"","title":"ITEM_BREAK Type","description":"ITEM_BREAK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ITEM_PICKUP","value":"\"random.pop\"","title":"ITEM_PICKUP Type","description":"ITEM_PICKUP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"LAVA","value":"\"liquid.lava\"","title":"LAVA Type","description":"LAVA Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"LAVA_POP","value":"\"liquid.lavapop\"","title":"LAVA_POP Type","description":"LAVA_POP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"LEVEL_UP","value":"\"random.levelup\"","title":"LEVEL_UP Type","description":"LEVEL_UP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"LIQUID_SPLASH","value":"\"liquid.splash\"","title":"LIQUID_SPLASH Type","description":"LIQUID_SPLASH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"MINECART_BASE","value":"\"minecart.base\"","title":"MINECART_BASE Type","description":"MINECART_BASE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"MINECART_INSIDE","value":"\"minecart.inside\"","title":"MINECART_INSIDE Type","description":"MINECART_INSIDE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_BASS","value":"\"note.bass\"","title":"NOTE_BASS Type","description":"NOTE_BASS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_PIANO","value":"\"note.harp\"","title":"NOTE_PIANO Type","description":"NOTE_PIANO Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_BASS_DRUM","value":"\"note.bd\"","title":"NOTE_BASS_DRUM Type","description":"NOTE_BASS_DRUM Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_HAT","value":"\"note.hat\"","title":"NOTE_HAT Type","description":"NOTE_HAT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_BASS_ATTACK","value":"\"note.bassattack\"","title":"NOTE_BASS_ATTACK Type","description":"NOTE_BASS_ATTACK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_SNARE","value":"\"note.snare\"","title":"NOTE_SNARE Type","description":"NOTE_SNARE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"NOTE_PLING","value":"\"note.pling\"","title":"NOTE_PLING Type","description":"NOTE_PLING Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ORB","value":"\"random.orb\"","title":"ORB Type","description":"ORB Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PISTON_OUT","value":"\"tile.piston.out\"","title":"PISTON_OUT Type","description":"PISTON_OUT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PISTON_IN","value":"\"tile.piston.in\"","title":"PISTON_IN Type","description":"PISTON_IN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PORTAL","value":"\"portal.portal\"","title":"PORTAL Type","description":"PORTAL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PORTAL_TRAVEL","value":"\"portal.travel\"","title":"PORTAL_TRAVEL Type","description":"PORTAL_TRAVEL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PORTAL_TRIGGER","value":"\"portal.trigger\"","title":"PORTAL_TRIGGER Type","description":"PORTAL_TRIGGER Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SPLASH","value":"\"random.splash\"","title":"SPLASH Type","description":"SPLASH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_GRASS","value":"\"step.grass\"","title":"STEP_GRASS Type","description":"STEP_GRASS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_GRAVEL","value":"\"step.gravel\"","title":"STEP_GRAVEL Type","description":"STEP_GRAVEL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_LADDER","value":"\"step.ladder\"","title":"STEP_LADDER Type","description":"STEP_LADDER Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_SAND","value":"\"step.sand\"","title":"STEP_SAND Type","description":"STEP_SAND Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_SNOW","value":"\"step.snow\"","title":"STEP_SNOW Type","description":"STEP_SNOW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_STONE","value":"\"step.stone\"","title":"STEP_STONE Type","description":"STEP_STONE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_WOOD","value":"\"step.wood\"","title":"STEP_WOOD Type","description":"STEP_WOOD Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"STEP_WOOL","value":"\"step.cloth\"","title":"STEP_WOOL Type","description":"STEP_WOOL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SWIM","value":"\"liquid.swim\"","title":"SWIM Type","description":"SWIM Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WATER","value":"\"liquid.water\"","title":"WATER Type","description":"WATER Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BAT_DEATH","value":"\"mob.bat.death\"","title":"BAT_DEATH Type","description":"BAT_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BAT_HURT","value":"\"mob.bat.hurt\"","title":"BAT_HURT Type","description":"BAT_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BAT_IDLE","value":"\"mob.bat.idle\"","title":"BAT_IDLE Type","description":"BAT_IDLE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BAT_LOOP","value":"\"mob.bat.loop\"","title":"BAT_LOOP Type","description":"BAT_LOOP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BAT_TAKEOFF","value":"\"mob.bat.takeoff\"","title":"BAT_TAKEOFF Type","description":"BAT_TAKEOFF Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BLAZE_BREATH","value":"\"mob.blaze.breath\"","title":"BLAZE_BREATH Type","description":"BLAZE_BREATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BLAZE_DEATH","value":"\"mob.blaze.death\"","title":"BLAZE_DEATH Type","description":"BLAZE_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"BLAZE_HIT","value":"\"mob.blaze.hit\"","title":"BLAZE_HIT Type","description":"BLAZE_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CAT_HISS","value":"\"mob.cat.hiss\"","title":"CAT_HISS Type","description":"CAT_HISS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CAT_HIT","value":"\"mob.cat.hitt\"","title":"CAT_HIT Type","description":"CAT_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CAT_MEOW","value":"\"mob.cat.meow\"","title":"CAT_MEOW Type","description":"CAT_MEOW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CAT_PURR","value":"\"mob.cat.purr\"","title":"CAT_PURR Type","description":"CAT_PURR Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CAT_PURREOW","value":"\"mob.cat.purreow\"","title":"CAT_PURREOW Type","description":"CAT_PURREOW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHICKEN_HURT","value":"\"mob.chicken.hurt\"","title":"CHICKEN_HURT Type","description":"CHICKEN_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHICKEN_PLOP","value":"\"mob.chicken.plop\"","title":"CHICKEN_PLOP Type","description":"CHICKEN_PLOP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHICKEN_SAY","value":"\"mob.chicken.say\"","title":"CHICKEN_SAY Type","description":"CHICKEN_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CHICKEN_STEP","value":"\"mob.chicken.step\"","title":"CHICKEN_STEP Type","description":"CHICKEN_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"COW_SAY","value":"\"mob.cow.say\"","title":"COW_SAY Type","description":"COW_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"COW_HURT","value":"\"mob.cow.hurt\"","title":"COW_HURT Type","description":"COW_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"COW_STEP","value":"\"mob.cow.step\"","title":"COW_STEP Type","description":"COW_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CREEPER_DEATH","value":"\"mob.creeper.death\"","title":"CREEPER_DEATH Type","description":"CREEPER_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"CREEPER_SAY","value":"\"mob.creeper.say\"","title":"CREEPER_SAY Type","description":"CREEPER_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERDRAGON_END","value":"\"mob.enderdragon.end\"","title":"ENDERDRAGON_END Type","description":"ENDERDRAGON_END Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERDRAGON_GROWL","value":"\"mob.enderdragon.growl\"","title":"ENDERDRAGON_GROWL Type","description":"ENDERDRAGON_GROWL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERDRAGON_HIT","value":"\"mob.enderdragon.hit\"","title":"ENDERDRAGON_HIT Type","description":"ENDERDRAGON_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERDRAGON_WINGS","value":"\"mob.enderdragon.wings\"","title":"ENDERDRAGON_WINGS Type","description":"ENDERDRAGON_WINGS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_DEATH","value":"\"mob.endermen.death\"","title":"ENDERMAN_DEATH Type","description":"ENDERMAN_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_HIT","value":"\"mob.endermen.hit\"","title":"ENDERMAN_HIT Type","description":"ENDERMAN_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_IDLE","value":"\"mob.endermen.idle\"","title":"ENDERMAN_IDLE Type","description":"ENDERMAN_IDLE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_PORTAL","value":"\"mob.endermen.portal\"","title":"ENDERMAN_PORTAL Type","description":"ENDERMAN_PORTAL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_SCREAM","value":"\"mob.endermen.scream\"","title":"ENDERMAN_SCREAM Type","description":"ENDERMAN_SCREAM Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ENDERMAN_STARE","value":"\"mob.endermen.stare\"","title":"ENDERMAN_STARE Type","description":"ENDERMAN_STARE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GHAST_SCREAM","value":"\"mob.ghast.scream\"","title":"GHAST_SCREAM Type","description":"GHAST_SCREAM Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GHAST_CHARGE","value":"\"mob.ghast.charge\"","title":"GHAST_CHARGE Type","description":"GHAST_CHARGE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GHAST_DEATH","value":"\"mob.ghast.death\"","title":"GHAST_DEATH Type","description":"GHAST_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GHAST_FIREBALL","value":"\"mob.ghast.fireball\"","title":"GHAST_FIREBALL Type","description":"GHAST_FIREBALL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"GHAST_MOAN","value":"\"mob.ghast.moan\"","title":"GHAST_MOAN Type","description":"GHAST_MOAN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"IRONGOLEM_DEATH","value":"\"mob.irongolem.death\"","title":"IRONGOLEM_DEATH Type","description":"IRONGOLEM_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"IRONGOLEM_HIT","value":"\"mob.irongolem.hit\"","title":"IRONGOLEM_HIT Type","description":"IRONGOLEM_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"IRONGOLEM_THROW","value":"\"mob.irongolem.throw\"","title":"IRONGOLEM_THROW Type","description":"IRONGOLEM_THROW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"IRONGOLEM_WALK","value":"\"mob.irongolem.walk\"","title":"IRONGOLEM_WALK Type","description":"IRONGOLEM_WALK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"MAGMACUBE_BIG","value":"\"mob.magmacube.big\"","title":"MAGMACUBE_BIG Type","description":"MAGMACUBE_BIG Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"MAGMACUBE_JUMP","value":"\"mob.magmacube.jump\"","title":"MAGMACUBE_JUMP Type","description":"MAGMACUBE_JUMP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"MAGMACUBE_SMALL","value":"\"mob.magmacube.small\"","title":"MAGMACUBE_SMALL Type","description":"MAGMACUBE_SMALL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PIG_DEATH","value":"\"mob.pig.death\"","title":"PIG_DEATH Type","description":"PIG_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PIG_SAY","value":"\"mob.pig.say\"","title":"PIG_SAY Type","description":"PIG_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"PIG_STEP","value":"\"mob.pig.step\"","title":"PIG_STEP Type","description":"PIG_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SHEEP_SAY","value":"\"mob.sheep.say\"","title":"SHEEP_SAY Type","description":"SHEEP_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SHEEP_SHEAR","value":"\"mob.sheep.shear\"","title":"SHEEP_SHEAR Type","description":"SHEEP_SHEAR Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SHEEP_STEP","value":"\"mob.sheep.step\"","title":"SHEEP_STEP Type","description":"SHEEP_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SILVERFISH_HIT","value":"\"mob.silverfish.hit\"","title":"SILVERFISH_HIT Type","description":"SILVERFISH_HIT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SILVERFISH_KIL","value":"\"mob.silverfish.kill\"","title":"SILVERFISH_KIL Type","description":"SILVERFISH_KIL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SILVERFISH_SAY","value":"\"mob.silverfish.say\"","title":"SILVERFISH_SAY Type","description":"SILVERFISH_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SILVERFISH_STEP","value":"\"mob.silverfish.step\"","title":"SILVERFISH_STEP Type","description":"SILVERFISH_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SKELETON_DEATH","value":"\"mob.skeleton.death\"","title":"SKELETON_DEATH Type","description":"SKELETON_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SKELETON_HURT","value":"\"mob.skeleton.hurt\"","title":"SKELETON_HURT Type","description":"SKELETON_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SKELETON_SAY","value":"\"mob.skeleton.say\"","title":"SKELETON_SAY Type","description":"SKELETON_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SKELETON_STEP","value":"\"mob.skeleton.step\"","title":"SKELETON_STEP Type","description":"SKELETON_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SLIME_ATTACK","value":"\"mob.slime.attack\"","title":"SLIME_ATTACK Type","description":"SLIME_ATTACK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SLIME_BIG","value":"\"mob.slime.big\"","title":"SLIME_BIG Type","description":"SLIME_BIG Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SLIME_SMALL","value":"\"mob.slime.small\"","title":"SLIME_SMALL Type","description":"SLIME_SMALL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SPIDER_DEATH","value":"\"mob.spider.death\"","title":"SPIDER_DEATH Type","description":"SPIDER_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SPIDER_SAY","value":"\"mob.spider.say\"","title":"SPIDER_SAY Type","description":"SPIDER_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"SPIDER_STEP","value":"\"mob.spider.step\"","title":"SPIDER_STEP Type","description":"SPIDER_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WITHER_DEATH","value":"\"mob.wither.death\"","title":"WITHER_DEATH Type","description":"WITHER_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WITHER_HURT","value":"\"mob.wither.hurt\"","title":"WITHER_HURT Type","description":"WITHER_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WITHER_IDLE","value":"\"mob.wither.idle\"","title":"WITHER_IDLE Type","description":"WITHER_IDLE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WITHER_SHOOT","value":"\"mob.wither.shoot\"","title":"WITHER_SHOOT Type","description":"WITHER_SHOOT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WITHER_SPAWN","value":"\"mob.wither.spawn\"","title":"WITHER_SPAWN Type","description":"WITHER_SPAWN Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_BARK","value":"\"mob.wolf.bark\"","title":"WOLF_BARK Type","description":"WOLF_BARK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_DEATH","value":"\"mob.wolf.death\"","title":"WOLF_DEATH Type","description":"WOLF_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_GROWL","value":"\"mob.wolf.growl\"","title":"WOLF_GROWL Type","description":"WOLF_GROWL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_HOWL","value":"\"mob.wolf.howl\"","title":"WOLF_HOWL Type","description":"WOLF_HOWL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_HURT","value":"\"mob.wolf.hurt\"","title":"WOLF_HURT Type","description":"WOLF_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_PANT","value":"\"mob.wolf.panting\"","title":"WOLF_PANT Type","description":"WOLF_PANT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_SHAKE","value":"\"mob.wolf.shake\"","title":"WOLF_SHAKE Type","description":"WOLF_SHAKE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_STEP","value":"\"mob.wolf.step\"","title":"WOLF_STEP Type","description":"WOLF_STEP Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"WOLF_WHINE","value":"\"mob.wolf.whine\"","title":"WOLF_WHINE Type","description":"WOLF_WHINE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_METAL","value":"\"mob.zombie.metal\"","title":"ZOMBIE_METAL Type","description":"ZOMBIE_METAL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_WOOD","value":"\"mob.zombie.wood\"","title":"ZOMBIE_WOOD Type","description":"ZOMBIE_WOOD Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_WOODBREAK","value":"\"mob.zombie.woodbreak\"","title":"ZOMBIE_WOODBREAK Type","description":"ZOMBIE_WOODBREAK Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_SAY","value":"\"mob.zombie.say\"","title":"ZOMBIE_SAY Type","description":"ZOMBIE_SAY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_DEATH","value":"\"mob.zombie.death\"","title":"ZOMBIE_DEATH Type","description":"ZOMBIE_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_HURT","value":"\"mob.zombie.hurt\"","title":"ZOMBIE_HURT Type","description":"ZOMBIE_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_INFECT","value":"\"mob.zombie.infect\"","title":"ZOMBIE_INFECT Type","description":"ZOMBIE_INFECT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_UNFECT","value":"\"mob.zombie.unfect\"","title":"ZOMBIE_UNFECT Type","description":"ZOMBIE_UNFECT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_REMEDY","value":"\"mob.zombie.remedy\"","title":"ZOMBIE_REMEDY Type","description":"ZOMBIE_REMEDY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_PIG_IDLE","value":"\"mob.zombiepig.zpig\"","title":"ZOMBIE_PIG_IDLE Type","description":"ZOMBIE_PIG_IDLE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_PIG_ANGRY","value":"\"mob.zombiepig.zpigangry\"","title":"ZOMBIE_PIG_ANGRY Type","description":"ZOMBIE_PIG_ANGRY Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_PIG_DEATH","value":"\"mob.zombiepig.zpigdeath\"","title":"ZOMBIE_PIG_DEATH Type","description":"ZOMBIE_PIG_DEATH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"ZOMBIE_PIG_HURT","value":"\"mob.zombiepig.zpighurt\"","title":"ZOMBIE_PIG_HURT Type","description":"ZOMBIE_PIG_HURT Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_CLOTH","value":"\"dig.cloth\"","title":"DIG_CLOTH Type","description":"DIG_CLOTH Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_GRASS","value":"\"dig.grass\"","title":"DIG_GRASS Type","description":"DIG_GRASS Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_GRAVEL","value":"\"dig.gravel\"","title":"DIG_GRAVEL Type","description":"DIG_GRAVEL Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_SAND","value":"\"dig.sand\"","title":"DIG_SAND Type","description":"DIG_SAND Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_SNOW","value":"\"dig.snow\"","title":"DIG_SNOW Type","description":"DIG_SNOW Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_STONE","value":"\"dig.stone\"","title":"DIG_STONE Type","description":"DIG_STONE Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}},{"code":"DIG_WOOD","value":"\"dig.wood\"","title":"DIG_WOOD Type","description":"DIG_WOOD Type","doc":{"author":["Jason (darkdiplomat) /\npublic class SoundEffect {\n\n    /** The Sounds!","Jason (darkdiplomat)"]}}],"properties":[{"name":"McName","modifier":"readonly","args":[],"description":"McName property","return":"String","scope":"public","title":"McName property"}]},"io.wolfscript.api.world.position.0":{"namespace":"io.wolfscript.api.world","title":"Classes and interfaces for namespace io.wolfscript.api.world.position","description":"Classes and interfaces for namespace io.wolfscript.api.world.position","name":"position","qualifiedname":"io.wolfscript.api.world.position.0","packagename":"io.wolfscript.api.world.position","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.api.world.position.Position","io.wolfscript.api.world.position.Rotations","io.wolfscript.api.world.position.Vector3D"],"interfaces":[],"enums":["io.wolfscript.api.world.position.Direction","io.wolfscript.api.world.position.ReadMode"],"namespaces":[],"properties":[]},"io.wolfscript.api.world.position.Direction":{"namespace":"io.wolfscript.api.world.position","title":"Representation of the cardinal direction of a player","description":"Representation of the cardinal direction of a player This is a convenient way of representing degrees of yaw","doc":{"author":["Chris (damagefilter)"]},"name":"Direction","qualifiedname":"io.wolfscript.api.world.position.Direction","type":"enum","scope":"public","constructors":[],"methods":[{"title":"getFromIntValue method","description":"getFromIntValue method","scope":"public","describe":"static","return":"io.wolfscript.api.world.position.Direction","name":"getFromIntValue","args":[{"name":"value","type":"int","description":"value argument"}]}],"imports":[],"enum":[{"code":"NORTH","value":"0","title":"NORTH Direction","description":"NORTH Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"NORTHEAST","value":"1","title":"NORTHEAST Direction","description":"NORTHEAST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"EAST","value":"2","title":"EAST Direction","description":"EAST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"SOUTHEAST","value":"3","title":"SOUTHEAST Direction","description":"SOUTHEAST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"SOUTH","value":"4","title":"SOUTH Direction","description":"SOUTH Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"SOUTHWEST","value":"5","title":"SOUTHWEST Direction","description":"SOUTHWEST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"WEST","value":"6","title":"WEST Direction","description":"WEST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"NORTHWEST","value":"7","title":"NORTHWEST Direction","description":"NORTHWEST Direction","doc":{"author":["Chris (damagefilter)"]}},{"code":"ERROR","value":"8","title":"ERROR Direction","description":"ERROR Direction","doc":{"author":["Chris (damagefilter)"]}}],"properties":[{"name":"IntValue","modifier":"readonly","args":[],"description":"IntValue property","return":"int","scope":"public","title":"IntValue property"}]},"io.wolfscript.api.world.position.Position":{"namespace":"io.wolfscript.api.world.position","title":"Position is a x, y, z triple","description":"Position is a x, y, z triple","doc":{"author":["Chris (damagefilter)"]},"name":"Position","qualifiedname":"io.wolfscript.api.world.position.Position","type":"class","scope":"public","implements":["Cloneable"],"constructors":[{"title":"Position constructor","description":"Position constructor","scope":"public","name":"Position","args":[{"name":"x","type":"double","description":"x argument"},{"name":"y","type":"double","description":"y argument"},{"name":"z","type":"double","description":"z argument"}]},{"title":"Position constructor","description":"Position constructor","scope":"public","name":"Position","args":[{"name":"x","type":"int","description":"x argument"},{"name":"y","type":"int","description":"y argument"},{"name":"z","type":"int","description":"z argument"}]},{"title":"Position constructor","description":"Position constructor","scope":"public","name":"Position","args":[{"name":"x","type":"float","description":"x argument"},{"name":"y","type":"float","description":"y argument"},{"name":"z","type":"float","description":"z argument"}]},{"title":"Position constructor","description":"Position constructor","scope":"public","name":"Position","args":[]}],"methods":[{"title":"copy method","description":"copy method","scope":"public","return":"io.wolfscript.api.world.position.Position","name":"copy","args":[]},{"title":"Copy constructor copies the primitives","description":"Copy constructor copies the primitives","doc":{"param":["templ /\n    public Position(Position templ) {\n        this.x = templ.x;\n        this.y = templ.y;\n        this.z = templ.z;\n    }\n\n    /** Retrieve X component of Vector","x /\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    /** Set x component with a int2double conversion","x /\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    /** Retrieve Y component of Vector","y /\n    public void setY(double y) {\n        this.y = y;\n    }\n\n    /** Set y component with a int2double conversion","y /\n    public void setY(int y) {\n        this.y = y;\n    }\n\n    /** Retrieve Z component of Vector","z /\n    public void setZ(double z) {\n        this.z = z;\n    }\n\n    /** Set z component with a int2double conversion","z /\n    public void setZ(int z) {\n        this.z = z;\n    }\n\n    /** Transforms this position 1 block in the given {@link BlockFace} direction","face the {@link BlockFace} used to move the position /\n    public void transform(BlockFace face) {\n        switch (face) {\n            case TOP:\n                ++this.y;\n                break;\n            case BOTTOM:\n                --this.y;\n                break;\n            case NORTH: // -Z\n                --this.z;\n                break;\n            case SOUTH: // +Z\n                ++this.z;\n                break;\n            case WEST: // -X\n                --this.x;\n                break;\n            case EAST: // +X\n                ++this.x;\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** Moves the position a specified amount in the X direction","x the amount to move X-wise /\n    public void moveX(int x) {\n        this.x += x;\n    }\n\n    /** Moves the position a specified amount in the X direction","x the amount to move X-wise /\n    public void moveX(double x) {\n        this.x += x;\n    }\n\n    /** Moves the position a specified amount in the Y direction","y the amount to move Y-wise /\n    public void moveY(int y) {\n        this.y += y;\n    }\n\n    /** Moves the position a specified amount in the Y direction","y the amount to move Y-wise /\n    public void moveY(double y) {\n        this.y += y;\n    }\n\n    /** Moves the position a specified amount in the Z direction","z the amount to move Z-wise /\n    public void moveZ(int z) {\n        this.z += z;\n    }\n\n    /** Moves the position a specified amount in the Z direction","z the amount to move Z-wise /\n    public void moveZ(double z) {\n        this.z += z;\n    }\n\n    /** Moves the position a specified amount in all directions","x the amount to move X-wise","y the amount to move Y-wise","z the amount to move Z-wise /\n    public void move(int x, int y, int z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n    }\n\n    /** Moves the position a specified amount in all directions","x the amount to move X-wise","y the amount to move Y-wise","z the amount to move Z-wise /\n    public void move(double x, double y, double z) {\n        this.x += x;\n        this.y += y;\n        this.z += z;\n    }\n\n    public PositionDataAccess toDataAccess(PositionDataAccess pda) {\n        pda.posX = this.x;\n        pda.posY = this.y;\n        pda.posZ = this.z;\n        return pda;\n    }\n\n    public static Position fromDataAccess(PositionDataAccess pda) {\n        Position pos = new Position(0, 0, 0);\n        pos.setX(pda.posX);\n        pos.setY(pda.posY);\n        pos.setZ(pda.posZ);\n        return pos;\n    }\n\n    /** Checks if another object equals this one","obj"],"return":["double x /\n    public double getX() {\n        return x;\n    }\n\n    /** Returns a reliable block ordinate","double y /\n    public double getY() {\n        return y;\n    }\n\n    /** Returns a reliable block ordinate","double z /\n    public double getZ() {\n        return z;\n    }\n\n    /** Returns a reliable block ordinate","whether the other object has the same values for x,y,z /\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Position)) {\n            return false;\n        }\n        Position other = (Position)obj;\n\n        return other.getX() == this.x && other.getY() == this.y && other.getZ() == this.z;\n    }\n\n    /** Return a hashcode for this object"],"retur":["n /\n    public int getBlockX() {\n        return ToolBox.floorToBlock(x);\n    }\n\n    /** Set x component with native double","n /\n    public int getBlockY() {\n        return ToolBox.floorToBlock(y);\n    }\n\n    /** Set y component with native double","n /\n    public int getBlockZ() {\n        return ToolBox.floorToBlock(z);\n    }\n\n    /** Set y component with native double"]},"scope":"public","return":"int","name":"hashCode","args":[]},{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.ToolBox","io.wolfscript.api.world.blocks.BlockFace","io.wolfscript.database.PositionDataAccess"],"properties":[]},"io.wolfscript.api.world.position.ReadMode":{"namespace":"io.wolfscript.api.world.position","title":"A Location represents a point in the world including pitch and rotation headings.","description":"A Location represents a point in the world including pitch and rotation headings.","doc":{"author":["Chris (damagefilter) /\npublic class Location extends Vector3D {\n\n    private DimensionType dimension;\n    private String world;\n    private World cachedWorld;\n    private float pitch, rotation;\n\n    /** Constructs a new Location"],"param":["world the world of the location","x the x coordinate of the location","y the y coordinate of the location","z the z coordinate of the location","pitch the y-rotation of the location","rotation the z-rotation of the location /\n    public Location(World world, double x, double y, double z, float pitch, float rotation) {\n        super(x, y, z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = pitch;\n        this.rotation = rotation;\n    }\n\n    public Location(World world, Position template) {\n        super(template.x, template.y, template.z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = 0f;\n        this.rotation = 0f;\n    }\n\n    /** Constructs a new Location in the default world","x the x coordinate","y the y coordinate","z the z coordinate /\n    public Location(double x, double y, double z) {\n        super(x, y, z);\n        this.cachedWorld = Wolf.getServer().getDefaultWorld();\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        pitch = rotation = 0f;\n    }\n\n    /** Copy constructor copies the primitives","templ /\n    public Location(Location templ) {\n        super(templ);\n        this.cachedWorld = templ.cachedWorld;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = templ.getPitch();\n        this.rotation = templ.getRotation();\n    }\n\n    /** Get the rotation around the Y axis","rotation the rotation to set /\n    public void setRotation(float rotation) {\n        this.rotation = rotation;\n    }\n\n    /** Get the rotation around the X axis","pitch the pitch to set /\n    public void setPitch(float pitch) {\n        this.pitch = pitch;\n    }\n\n    /** The dimension ID","dimension the dimension to set /\n    public void setType(DimensionType dimension) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(cachedWorld.getName(), dimension, true);\n        this.dimension = dimension;\n    }\n\n    /** Check if this object is equal to another one /\n    @Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Location)) {\n            return false;\n        }\n        else {\n            Location l = (Location)other;\n\n            return ((l.x == x) && (l.y == y) && (l.z == z) && (l.dimension == dimension) && (l.pitch == pitch) && (l.rotation == rotation) && (l.world.equals(world)));\n        }\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 5;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        hash = (int)(hash + pitch);\n        hash = (int)(hash + rotation);\n        return hash;\n    }\n\n    /**","world the world to set /\n    public void setWorldName(String world) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(world, dimension, true);\n        this.world = world;\n    }\n\n    /** Returns the actual world this location belongs to","autoload {@code true} to auto load the world; {@code false} otherwise.","fields the string of the fields"],"return":["the rotation /\n    public float getRotation() {\n        return rotation;\n    }\n\n    /** Set the rotation around the Y axis","the pitch /\n    public float getPitch() {\n        return pitch;\n    }\n\n    /** Set the rotation around the X axis","the dimension /\n    public DimensionType getType() {\n        return cachedWorld.getType();\n    }\n\n    /**","the world /\n    public String getWorldName() {\n        return cachedWorld.getName();\n    }\n\n    /**","the location's world","the location's world /\n    public World getWorld() {\n        return this.cachedWorld;\n    }\n\n    /** Internal method to set the world after deserializing. /\n    private void setWorld() {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(this.world, this.dimension, true);\n    }\n\n    /** Returns the actual world this location belongs to Will auto load the world if the world's config has allow warp auto load set to {@code true}","the location's world","deserialized Location"],"deprecated":["Use getWorld instead. World is loaded in all cases /\n    @Deprecated\n    public World getWorld(boolean autoload) {\n        return Wolf.getServer().getWorldManager().getWorld(world, dimension, autoload);\n    }\n\n    /** Returns the actual world this location belongs to. Returns null if the world name or dimension that was specified was invalid.","use getWorld, world is already checked /\n    @Deprecated\n    public World getWorldChecked() {\n        String fqName = ToolBox.parseWorldName(world, dimension);\n        return getWorld(Configuration.getWorldConfig(fqName).allowWarpAutoLoad());\n    }\n\n    /** Return a String representation that can also be used for storing somewhere for this Location. /\n    public String toString() {\n        StringBuilder fields = new StringBuilder();\n\n        fields.append(this.x).append(\";\").append(this.y).append(\";\").append(this.z).append(\";\").append(this.pitch).append(\";\").append(this.rotation).append(\";\").append(this.dimension.getId()).append(\";\").append(this.world);\n        return fields.toString();\n    }\n\n    /** Turn a String Location that has been formatted by Location.toString() (or has a compatible format) into a Location object"],"throws":["WolfDeserializeException if the String does not contain enough information or incorrect information /\n    public static Location fromString(String fields) throws WolfDeserializeException {\n        Location loc = emptyLocation();\n        String[] split = fields.split(\";\");\n\n        if (split.length != 7) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: Expected fields are 7. Found \" + split.length, \"WolfScript\");\n        }\n        try {\n            loc.setX(Double.parseDouble(split[0]));\n            loc.setY(Double.parseDouble(split[1]));\n            loc.setZ(Double.parseDouble(split[2]));\n            loc.setPitch(Float.parseFloat(split[3]));\n            loc.setRotation(Float.parseFloat(split[4]));\n            loc.setType(DimensionType.fromId(Integer.parseInt(split[5])));\n            loc.setWorldName(split[6]);\n            loc.setWorld();\n            return loc;\n        }\n        catch (NumberFormatException e) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: \" + e.getMessage(), \"WolfScript\");\n        }\n    }\n\n    public String asReadableString(ReadMode... modes) {\n        EnumSet<ReadMode> modeSet = EnumSet.noneOf(ReadMode.class);\n        if (modes != null && modes.length != 0) {\n            modeSet.addAll(Arrays.asList(modes));\n        }\n        StringBuilder builder = new StringBuilder();\n        if (modeSet.contains(ReadMode.XYZ)) {\n            builder.append(\"X:\").append(getBlockX()).append(\" \");\n            builder.append(\"Y:\").append(getBlockY()).append(\" \");\n            builder.append(\"Z:\").append(getBlockZ()).append(\" \");\n        }\n        else if (modeSet.contains(ReadMode.XYZFLOAT)) {\n            builder.append(\"X:\").append(String.format(\"%.3f\", getX())).append(\" \");\n            builder.append(\"Y:\").append(String.format(\"%.3f\", getY())).append(\" \");\n            builder.append(\"Z:\").append(String.format(\"%.3f\", getZ())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.ROTATION)) {\n            builder.append(\"Rotation:\").append(String.format(\"%.3f\", getRotation())).append(\" \");\n            builder.append(\"Pitch:\").append(String.format(\"%.3f\", getPitch())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.WORLD)) {\n            builder.append(\"World:\").append(getWorldName()).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.DIMENSION)) {\n            builder.append(\"Dimension:\").append(getType().getName()).append(\" \");\n        }\n        return builder.toString();\n    }\n\n    public LocationDataAccess toDataAccess(LocationDataAccess lda) {\n        super.toDataAccess(lda);\n        lda.rotation = this.rotation;\n        lda.pitch = this.pitch;\n        lda.world = this.world;\n        lda.dimension = this.dimension.getName();\n        return lda;\n    }\n\n    public static Location fromDataAccess(LocationDataAccess lda) {\n        Location loc = emptyLocation();\n        loc.setX(lda.posX);\n        loc.setY(lda.posY);\n        loc.setZ(lda.posZ);\n        loc.setPitch(lda.pitch);\n        loc.setRotation(lda.rotation);\n        loc.setType(DimensionType.fromName(lda.dimension));\n        loc.setWorldName(lda.world);\n        loc.setWorld();\n        return loc;\n    }\n\n    public static Location emptyLocation() {\n        return new Location(0, 0, 0);\n    }\n\n    @Override\n    public Location clone() throws CloneNotSupportedException {\n        return (Location)super.clone();\n    }\n\n    public Location copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Location(this);\n    }\n\n    /** Used in Readable String to define what information to pass"]},"name":"ReadMode","qualifiedname":"io.wolfscript.api.world.position.ReadMode","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.Wolf","io.wolfscript.WolfDeserializeException","io.wolfscript.ToolBox","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.config.Configuration","io.wolfscript.database.LocationDataAccess","java.util.Arrays","java.util.EnumSet"],"enum":[{"code":"XYZ","value":"","title":"XYZ ReadMode","description":"XYZ ReadMode","doc":{"author":["Chris (damagefilter) /\npublic class Location extends Vector3D {\n\n    private DimensionType dimension;\n    private String world;\n    private World cachedWorld;\n    private float pitch, rotation;\n\n    /** Constructs a new Location"],"param":["world the world of the location","x the x coordinate of the location","y the y coordinate of the location","z the z coordinate of the location","pitch the y-rotation of the location","rotation the z-rotation of the location /\n    public Location(World world, double x, double y, double z, float pitch, float rotation) {\n        super(x, y, z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = pitch;\n        this.rotation = rotation;\n    }\n\n    public Location(World world, Position template) {\n        super(template.x, template.y, template.z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = 0f;\n        this.rotation = 0f;\n    }\n\n    /** Constructs a new Location in the default world","x the x coordinate","y the y coordinate","z the z coordinate /\n    public Location(double x, double y, double z) {\n        super(x, y, z);\n        this.cachedWorld = Wolf.getServer().getDefaultWorld();\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        pitch = rotation = 0f;\n    }\n\n    /** Copy constructor copies the primitives","templ /\n    public Location(Location templ) {\n        super(templ);\n        this.cachedWorld = templ.cachedWorld;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = templ.getPitch();\n        this.rotation = templ.getRotation();\n    }\n\n    /** Get the rotation around the Y axis","rotation the rotation to set /\n    public void setRotation(float rotation) {\n        this.rotation = rotation;\n    }\n\n    /** Get the rotation around the X axis","pitch the pitch to set /\n    public void setPitch(float pitch) {\n        this.pitch = pitch;\n    }\n\n    /** The dimension ID","dimension the dimension to set /\n    public void setType(DimensionType dimension) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(cachedWorld.getName(), dimension, true);\n        this.dimension = dimension;\n    }\n\n    /** Check if this object is equal to another one /\n    @Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Location)) {\n            return false;\n        }\n        else {\n            Location l = (Location)other;\n\n            return ((l.x == x) && (l.y == y) && (l.z == z) && (l.dimension == dimension) && (l.pitch == pitch) && (l.rotation == rotation) && (l.world.equals(world)));\n        }\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 5;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        hash = (int)(hash + pitch);\n        hash = (int)(hash + rotation);\n        return hash;\n    }\n\n    /**","world the world to set /\n    public void setWorldName(String world) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(world, dimension, true);\n        this.world = world;\n    }\n\n    /** Returns the actual world this location belongs to","autoload {@code true} to auto load the world; {@code false} otherwise.","fields the string of the fields"],"return":["the rotation /\n    public float getRotation() {\n        return rotation;\n    }\n\n    /** Set the rotation around the Y axis","the pitch /\n    public float getPitch() {\n        return pitch;\n    }\n\n    /** Set the rotation around the X axis","the dimension /\n    public DimensionType getType() {\n        return cachedWorld.getType();\n    }\n\n    /**","the world /\n    public String getWorldName() {\n        return cachedWorld.getName();\n    }\n\n    /**","the location's world","the location's world /\n    public World getWorld() {\n        return this.cachedWorld;\n    }\n\n    /** Internal method to set the world after deserializing. /\n    private void setWorld() {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(this.world, this.dimension, true);\n    }\n\n    /** Returns the actual world this location belongs to Will auto load the world if the world's config has allow warp auto load set to {@code true}","the location's world","deserialized Location"],"deprecated":["Use getWorld instead. World is loaded in all cases /\n    @Deprecated\n    public World getWorld(boolean autoload) {\n        return Wolf.getServer().getWorldManager().getWorld(world, dimension, autoload);\n    }\n\n    /** Returns the actual world this location belongs to. Returns null if the world name or dimension that was specified was invalid.","use getWorld, world is already checked /\n    @Deprecated\n    public World getWorldChecked() {\n        String fqName = ToolBox.parseWorldName(world, dimension);\n        return getWorld(Configuration.getWorldConfig(fqName).allowWarpAutoLoad());\n    }\n\n    /** Return a String representation that can also be used for storing somewhere for this Location. /\n    public String toString() {\n        StringBuilder fields = new StringBuilder();\n\n        fields.append(this.x).append(\";\").append(this.y).append(\";\").append(this.z).append(\";\").append(this.pitch).append(\";\").append(this.rotation).append(\";\").append(this.dimension.getId()).append(\";\").append(this.world);\n        return fields.toString();\n    }\n\n    /** Turn a String Location that has been formatted by Location.toString() (or has a compatible format) into a Location object"],"throws":["WolfDeserializeException if the String does not contain enough information or incorrect information /\n    public static Location fromString(String fields) throws WolfDeserializeException {\n        Location loc = emptyLocation();\n        String[] split = fields.split(\";\");\n\n        if (split.length != 7) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: Expected fields are 7. Found \" + split.length, \"WolfScript\");\n        }\n        try {\n            loc.setX(Double.parseDouble(split[0]));\n            loc.setY(Double.parseDouble(split[1]));\n            loc.setZ(Double.parseDouble(split[2]));\n            loc.setPitch(Float.parseFloat(split[3]));\n            loc.setRotation(Float.parseFloat(split[4]));\n            loc.setType(DimensionType.fromId(Integer.parseInt(split[5])));\n            loc.setWorldName(split[6]);\n            loc.setWorld();\n            return loc;\n        }\n        catch (NumberFormatException e) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: \" + e.getMessage(), \"WolfScript\");\n        }\n    }\n\n    public String asReadableString(ReadMode... modes) {\n        EnumSet<ReadMode> modeSet = EnumSet.noneOf(ReadMode.class);\n        if (modes != null && modes.length != 0) {\n            modeSet.addAll(Arrays.asList(modes));\n        }\n        StringBuilder builder = new StringBuilder();\n        if (modeSet.contains(ReadMode.XYZ)) {\n            builder.append(\"X:\").append(getBlockX()).append(\" \");\n            builder.append(\"Y:\").append(getBlockY()).append(\" \");\n            builder.append(\"Z:\").append(getBlockZ()).append(\" \");\n        }\n        else if (modeSet.contains(ReadMode.XYZFLOAT)) {\n            builder.append(\"X:\").append(String.format(\"%.3f\", getX())).append(\" \");\n            builder.append(\"Y:\").append(String.format(\"%.3f\", getY())).append(\" \");\n            builder.append(\"Z:\").append(String.format(\"%.3f\", getZ())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.ROTATION)) {\n            builder.append(\"Rotation:\").append(String.format(\"%.3f\", getRotation())).append(\" \");\n            builder.append(\"Pitch:\").append(String.format(\"%.3f\", getPitch())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.WORLD)) {\n            builder.append(\"World:\").append(getWorldName()).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.DIMENSION)) {\n            builder.append(\"Dimension:\").append(getType().getName()).append(\" \");\n        }\n        return builder.toString();\n    }\n\n    public LocationDataAccess toDataAccess(LocationDataAccess lda) {\n        super.toDataAccess(lda);\n        lda.rotation = this.rotation;\n        lda.pitch = this.pitch;\n        lda.world = this.world;\n        lda.dimension = this.dimension.getName();\n        return lda;\n    }\n\n    public static Location fromDataAccess(LocationDataAccess lda) {\n        Location loc = emptyLocation();\n        loc.setX(lda.posX);\n        loc.setY(lda.posY);\n        loc.setZ(lda.posZ);\n        loc.setPitch(lda.pitch);\n        loc.setRotation(lda.rotation);\n        loc.setType(DimensionType.fromName(lda.dimension));\n        loc.setWorldName(lda.world);\n        loc.setWorld();\n        return loc;\n    }\n\n    public static Location emptyLocation() {\n        return new Location(0, 0, 0);\n    }\n\n    @Override\n    public Location clone() throws CloneNotSupportedException {\n        return (Location)super.clone();\n    }\n\n    public Location copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Location(this);\n    }\n\n    /** Used in Readable String to define what information to pass"]}},{"code":"XYZFLOAT","value":"","title":"XYZFLOAT ReadMode","description":"XYZFLOAT ReadMode","doc":{"author":["Chris (damagefilter) /\npublic class Location extends Vector3D {\n\n    private DimensionType dimension;\n    private String world;\n    private World cachedWorld;\n    private float pitch, rotation;\n\n    /** Constructs a new Location"],"param":["world the world of the location","x the x coordinate of the location","y the y coordinate of the location","z the z coordinate of the location","pitch the y-rotation of the location","rotation the z-rotation of the location /\n    public Location(World world, double x, double y, double z, float pitch, float rotation) {\n        super(x, y, z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = pitch;\n        this.rotation = rotation;\n    }\n\n    public Location(World world, Position template) {\n        super(template.x, template.y, template.z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = 0f;\n        this.rotation = 0f;\n    }\n\n    /** Constructs a new Location in the default world","x the x coordinate","y the y coordinate","z the z coordinate /\n    public Location(double x, double y, double z) {\n        super(x, y, z);\n        this.cachedWorld = Wolf.getServer().getDefaultWorld();\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        pitch = rotation = 0f;\n    }\n\n    /** Copy constructor copies the primitives","templ /\n    public Location(Location templ) {\n        super(templ);\n        this.cachedWorld = templ.cachedWorld;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = templ.getPitch();\n        this.rotation = templ.getRotation();\n    }\n\n    /** Get the rotation around the Y axis","rotation the rotation to set /\n    public void setRotation(float rotation) {\n        this.rotation = rotation;\n    }\n\n    /** Get the rotation around the X axis","pitch the pitch to set /\n    public void setPitch(float pitch) {\n        this.pitch = pitch;\n    }\n\n    /** The dimension ID","dimension the dimension to set /\n    public void setType(DimensionType dimension) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(cachedWorld.getName(), dimension, true);\n        this.dimension = dimension;\n    }\n\n    /** Check if this object is equal to another one /\n    @Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Location)) {\n            return false;\n        }\n        else {\n            Location l = (Location)other;\n\n            return ((l.x == x) && (l.y == y) && (l.z == z) && (l.dimension == dimension) && (l.pitch == pitch) && (l.rotation == rotation) && (l.world.equals(world)));\n        }\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 5;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        hash = (int)(hash + pitch);\n        hash = (int)(hash + rotation);\n        return hash;\n    }\n\n    /**","world the world to set /\n    public void setWorldName(String world) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(world, dimension, true);\n        this.world = world;\n    }\n\n    /** Returns the actual world this location belongs to","autoload {@code true} to auto load the world; {@code false} otherwise.","fields the string of the fields"],"return":["the rotation /\n    public float getRotation() {\n        return rotation;\n    }\n\n    /** Set the rotation around the Y axis","the pitch /\n    public float getPitch() {\n        return pitch;\n    }\n\n    /** Set the rotation around the X axis","the dimension /\n    public DimensionType getType() {\n        return cachedWorld.getType();\n    }\n\n    /**","the world /\n    public String getWorldName() {\n        return cachedWorld.getName();\n    }\n\n    /**","the location's world","the location's world /\n    public World getWorld() {\n        return this.cachedWorld;\n    }\n\n    /** Internal method to set the world after deserializing. /\n    private void setWorld() {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(this.world, this.dimension, true);\n    }\n\n    /** Returns the actual world this location belongs to Will auto load the world if the world's config has allow warp auto load set to {@code true}","the location's world","deserialized Location"],"deprecated":["Use getWorld instead. World is loaded in all cases /\n    @Deprecated\n    public World getWorld(boolean autoload) {\n        return Wolf.getServer().getWorldManager().getWorld(world, dimension, autoload);\n    }\n\n    /** Returns the actual world this location belongs to. Returns null if the world name or dimension that was specified was invalid.","use getWorld, world is already checked /\n    @Deprecated\n    public World getWorldChecked() {\n        String fqName = ToolBox.parseWorldName(world, dimension);\n        return getWorld(Configuration.getWorldConfig(fqName).allowWarpAutoLoad());\n    }\n\n    /** Return a String representation that can also be used for storing somewhere for this Location. /\n    public String toString() {\n        StringBuilder fields = new StringBuilder();\n\n        fields.append(this.x).append(\";\").append(this.y).append(\";\").append(this.z).append(\";\").append(this.pitch).append(\";\").append(this.rotation).append(\";\").append(this.dimension.getId()).append(\";\").append(this.world);\n        return fields.toString();\n    }\n\n    /** Turn a String Location that has been formatted by Location.toString() (or has a compatible format) into a Location object"],"throws":["WolfDeserializeException if the String does not contain enough information or incorrect information /\n    public static Location fromString(String fields) throws WolfDeserializeException {\n        Location loc = emptyLocation();\n        String[] split = fields.split(\";\");\n\n        if (split.length != 7) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: Expected fields are 7. Found \" + split.length, \"WolfScript\");\n        }\n        try {\n            loc.setX(Double.parseDouble(split[0]));\n            loc.setY(Double.parseDouble(split[1]));\n            loc.setZ(Double.parseDouble(split[2]));\n            loc.setPitch(Float.parseFloat(split[3]));\n            loc.setRotation(Float.parseFloat(split[4]));\n            loc.setType(DimensionType.fromId(Integer.parseInt(split[5])));\n            loc.setWorldName(split[6]);\n            loc.setWorld();\n            return loc;\n        }\n        catch (NumberFormatException e) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: \" + e.getMessage(), \"WolfScript\");\n        }\n    }\n\n    public String asReadableString(ReadMode... modes) {\n        EnumSet<ReadMode> modeSet = EnumSet.noneOf(ReadMode.class);\n        if (modes != null && modes.length != 0) {\n            modeSet.addAll(Arrays.asList(modes));\n        }\n        StringBuilder builder = new StringBuilder();\n        if (modeSet.contains(ReadMode.XYZ)) {\n            builder.append(\"X:\").append(getBlockX()).append(\" \");\n            builder.append(\"Y:\").append(getBlockY()).append(\" \");\n            builder.append(\"Z:\").append(getBlockZ()).append(\" \");\n        }\n        else if (modeSet.contains(ReadMode.XYZFLOAT)) {\n            builder.append(\"X:\").append(String.format(\"%.3f\", getX())).append(\" \");\n            builder.append(\"Y:\").append(String.format(\"%.3f\", getY())).append(\" \");\n            builder.append(\"Z:\").append(String.format(\"%.3f\", getZ())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.ROTATION)) {\n            builder.append(\"Rotation:\").append(String.format(\"%.3f\", getRotation())).append(\" \");\n            builder.append(\"Pitch:\").append(String.format(\"%.3f\", getPitch())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.WORLD)) {\n            builder.append(\"World:\").append(getWorldName()).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.DIMENSION)) {\n            builder.append(\"Dimension:\").append(getType().getName()).append(\" \");\n        }\n        return builder.toString();\n    }\n\n    public LocationDataAccess toDataAccess(LocationDataAccess lda) {\n        super.toDataAccess(lda);\n        lda.rotation = this.rotation;\n        lda.pitch = this.pitch;\n        lda.world = this.world;\n        lda.dimension = this.dimension.getName();\n        return lda;\n    }\n\n    public static Location fromDataAccess(LocationDataAccess lda) {\n        Location loc = emptyLocation();\n        loc.setX(lda.posX);\n        loc.setY(lda.posY);\n        loc.setZ(lda.posZ);\n        loc.setPitch(lda.pitch);\n        loc.setRotation(lda.rotation);\n        loc.setType(DimensionType.fromName(lda.dimension));\n        loc.setWorldName(lda.world);\n        loc.setWorld();\n        return loc;\n    }\n\n    public static Location emptyLocation() {\n        return new Location(0, 0, 0);\n    }\n\n    @Override\n    public Location clone() throws CloneNotSupportedException {\n        return (Location)super.clone();\n    }\n\n    public Location copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Location(this);\n    }\n\n    /** Used in Readable String to define what information to pass"]}},{"code":"ROTATION","value":"","title":"ROTATION ReadMode","description":"ROTATION ReadMode","doc":{"author":["Chris (damagefilter) /\npublic class Location extends Vector3D {\n\n    private DimensionType dimension;\n    private String world;\n    private World cachedWorld;\n    private float pitch, rotation;\n\n    /** Constructs a new Location"],"param":["world the world of the location","x the x coordinate of the location","y the y coordinate of the location","z the z coordinate of the location","pitch the y-rotation of the location","rotation the z-rotation of the location /\n    public Location(World world, double x, double y, double z, float pitch, float rotation) {\n        super(x, y, z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = pitch;\n        this.rotation = rotation;\n    }\n\n    public Location(World world, Position template) {\n        super(template.x, template.y, template.z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = 0f;\n        this.rotation = 0f;\n    }\n\n    /** Constructs a new Location in the default world","x the x coordinate","y the y coordinate","z the z coordinate /\n    public Location(double x, double y, double z) {\n        super(x, y, z);\n        this.cachedWorld = Wolf.getServer().getDefaultWorld();\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        pitch = rotation = 0f;\n    }\n\n    /** Copy constructor copies the primitives","templ /\n    public Location(Location templ) {\n        super(templ);\n        this.cachedWorld = templ.cachedWorld;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = templ.getPitch();\n        this.rotation = templ.getRotation();\n    }\n\n    /** Get the rotation around the Y axis","rotation the rotation to set /\n    public void setRotation(float rotation) {\n        this.rotation = rotation;\n    }\n\n    /** Get the rotation around the X axis","pitch the pitch to set /\n    public void setPitch(float pitch) {\n        this.pitch = pitch;\n    }\n\n    /** The dimension ID","dimension the dimension to set /\n    public void setType(DimensionType dimension) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(cachedWorld.getName(), dimension, true);\n        this.dimension = dimension;\n    }\n\n    /** Check if this object is equal to another one /\n    @Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Location)) {\n            return false;\n        }\n        else {\n            Location l = (Location)other;\n\n            return ((l.x == x) && (l.y == y) && (l.z == z) && (l.dimension == dimension) && (l.pitch == pitch) && (l.rotation == rotation) && (l.world.equals(world)));\n        }\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 5;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        hash = (int)(hash + pitch);\n        hash = (int)(hash + rotation);\n        return hash;\n    }\n\n    /**","world the world to set /\n    public void setWorldName(String world) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(world, dimension, true);\n        this.world = world;\n    }\n\n    /** Returns the actual world this location belongs to","autoload {@code true} to auto load the world; {@code false} otherwise.","fields the string of the fields"],"return":["the rotation /\n    public float getRotation() {\n        return rotation;\n    }\n\n    /** Set the rotation around the Y axis","the pitch /\n    public float getPitch() {\n        return pitch;\n    }\n\n    /** Set the rotation around the X axis","the dimension /\n    public DimensionType getType() {\n        return cachedWorld.getType();\n    }\n\n    /**","the world /\n    public String getWorldName() {\n        return cachedWorld.getName();\n    }\n\n    /**","the location's world","the location's world /\n    public World getWorld() {\n        return this.cachedWorld;\n    }\n\n    /** Internal method to set the world after deserializing. /\n    private void setWorld() {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(this.world, this.dimension, true);\n    }\n\n    /** Returns the actual world this location belongs to Will auto load the world if the world's config has allow warp auto load set to {@code true}","the location's world","deserialized Location"],"deprecated":["Use getWorld instead. World is loaded in all cases /\n    @Deprecated\n    public World getWorld(boolean autoload) {\n        return Wolf.getServer().getWorldManager().getWorld(world, dimension, autoload);\n    }\n\n    /** Returns the actual world this location belongs to. Returns null if the world name or dimension that was specified was invalid.","use getWorld, world is already checked /\n    @Deprecated\n    public World getWorldChecked() {\n        String fqName = ToolBox.parseWorldName(world, dimension);\n        return getWorld(Configuration.getWorldConfig(fqName).allowWarpAutoLoad());\n    }\n\n    /** Return a String representation that can also be used for storing somewhere for this Location. /\n    public String toString() {\n        StringBuilder fields = new StringBuilder();\n\n        fields.append(this.x).append(\";\").append(this.y).append(\";\").append(this.z).append(\";\").append(this.pitch).append(\";\").append(this.rotation).append(\";\").append(this.dimension.getId()).append(\";\").append(this.world);\n        return fields.toString();\n    }\n\n    /** Turn a String Location that has been formatted by Location.toString() (or has a compatible format) into a Location object"],"throws":["WolfDeserializeException if the String does not contain enough information or incorrect information /\n    public static Location fromString(String fields) throws WolfDeserializeException {\n        Location loc = emptyLocation();\n        String[] split = fields.split(\";\");\n\n        if (split.length != 7) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: Expected fields are 7. Found \" + split.length, \"WolfScript\");\n        }\n        try {\n            loc.setX(Double.parseDouble(split[0]));\n            loc.setY(Double.parseDouble(split[1]));\n            loc.setZ(Double.parseDouble(split[2]));\n            loc.setPitch(Float.parseFloat(split[3]));\n            loc.setRotation(Float.parseFloat(split[4]));\n            loc.setType(DimensionType.fromId(Integer.parseInt(split[5])));\n            loc.setWorldName(split[6]);\n            loc.setWorld();\n            return loc;\n        }\n        catch (NumberFormatException e) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: \" + e.getMessage(), \"WolfScript\");\n        }\n    }\n\n    public String asReadableString(ReadMode... modes) {\n        EnumSet<ReadMode> modeSet = EnumSet.noneOf(ReadMode.class);\n        if (modes != null && modes.length != 0) {\n            modeSet.addAll(Arrays.asList(modes));\n        }\n        StringBuilder builder = new StringBuilder();\n        if (modeSet.contains(ReadMode.XYZ)) {\n            builder.append(\"X:\").append(getBlockX()).append(\" \");\n            builder.append(\"Y:\").append(getBlockY()).append(\" \");\n            builder.append(\"Z:\").append(getBlockZ()).append(\" \");\n        }\n        else if (modeSet.contains(ReadMode.XYZFLOAT)) {\n            builder.append(\"X:\").append(String.format(\"%.3f\", getX())).append(\" \");\n            builder.append(\"Y:\").append(String.format(\"%.3f\", getY())).append(\" \");\n            builder.append(\"Z:\").append(String.format(\"%.3f\", getZ())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.ROTATION)) {\n            builder.append(\"Rotation:\").append(String.format(\"%.3f\", getRotation())).append(\" \");\n            builder.append(\"Pitch:\").append(String.format(\"%.3f\", getPitch())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.WORLD)) {\n            builder.append(\"World:\").append(getWorldName()).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.DIMENSION)) {\n            builder.append(\"Dimension:\").append(getType().getName()).append(\" \");\n        }\n        return builder.toString();\n    }\n\n    public LocationDataAccess toDataAccess(LocationDataAccess lda) {\n        super.toDataAccess(lda);\n        lda.rotation = this.rotation;\n        lda.pitch = this.pitch;\n        lda.world = this.world;\n        lda.dimension = this.dimension.getName();\n        return lda;\n    }\n\n    public static Location fromDataAccess(LocationDataAccess lda) {\n        Location loc = emptyLocation();\n        loc.setX(lda.posX);\n        loc.setY(lda.posY);\n        loc.setZ(lda.posZ);\n        loc.setPitch(lda.pitch);\n        loc.setRotation(lda.rotation);\n        loc.setType(DimensionType.fromName(lda.dimension));\n        loc.setWorldName(lda.world);\n        loc.setWorld();\n        return loc;\n    }\n\n    public static Location emptyLocation() {\n        return new Location(0, 0, 0);\n    }\n\n    @Override\n    public Location clone() throws CloneNotSupportedException {\n        return (Location)super.clone();\n    }\n\n    public Location copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Location(this);\n    }\n\n    /** Used in Readable String to define what information to pass"]}},{"code":"WORLD","value":"","title":"WORLD ReadMode","description":"WORLD ReadMode","doc":{"author":["Chris (damagefilter) /\npublic class Location extends Vector3D {\n\n    private DimensionType dimension;\n    private String world;\n    private World cachedWorld;\n    private float pitch, rotation;\n\n    /** Constructs a new Location"],"param":["world the world of the location","x the x coordinate of the location","y the y coordinate of the location","z the z coordinate of the location","pitch the y-rotation of the location","rotation the z-rotation of the location /\n    public Location(World world, double x, double y, double z, float pitch, float rotation) {\n        super(x, y, z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = pitch;\n        this.rotation = rotation;\n    }\n\n    public Location(World world, Position template) {\n        super(template.x, template.y, template.z);\n        this.cachedWorld = world;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = 0f;\n        this.rotation = 0f;\n    }\n\n    /** Constructs a new Location in the default world","x the x coordinate","y the y coordinate","z the z coordinate /\n    public Location(double x, double y, double z) {\n        super(x, y, z);\n        this.cachedWorld = Wolf.getServer().getDefaultWorld();\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        pitch = rotation = 0f;\n    }\n\n    /** Copy constructor copies the primitives","templ /\n    public Location(Location templ) {\n        super(templ);\n        this.cachedWorld = templ.cachedWorld;\n        this.dimension = cachedWorld.getType();\n        this.world = cachedWorld.getName();\n        this.pitch = templ.getPitch();\n        this.rotation = templ.getRotation();\n    }\n\n    /** Get the rotation around the Y axis","rotation the rotation to set /\n    public void setRotation(float rotation) {\n        this.rotation = rotation;\n    }\n\n    /** Get the rotation around the X axis","pitch the pitch to set /\n    public void setPitch(float pitch) {\n        this.pitch = pitch;\n    }\n\n    /** The dimension ID","dimension the dimension to set /\n    public void setType(DimensionType dimension) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(cachedWorld.getName(), dimension, true);\n        this.dimension = dimension;\n    }\n\n    /** Check if this object is equal to another one /\n    @Override\n    public boolean equals(Object other) {\n        if (!(other instanceof Location)) {\n            return false;\n        }\n        else {\n            Location l = (Location)other;\n\n            return ((l.x == x) && (l.y == y) && (l.z == z) && (l.dimension == dimension) && (l.pitch == pitch) && (l.rotation == rotation) && (l.world.equals(world)));\n        }\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 5;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        hash = (int)(hash + pitch);\n        hash = (int)(hash + rotation);\n        return hash;\n    }\n\n    /**","world the world to set /\n    public void setWorldName(String world) {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(world, dimension, true);\n        this.world = world;\n    }\n\n    /** Returns the actual world this location belongs to","autoload {@code true} to auto load the world; {@code false} otherwise.","fields the string of the fields"],"return":["the rotation /\n    public float getRotation() {\n        return rotation;\n    }\n\n    /** Set the rotation around the Y axis","the pitch /\n    public float getPitch() {\n        return pitch;\n    }\n\n    /** Set the rotation around the X axis","the dimension /\n    public DimensionType getType() {\n        return cachedWorld.getType();\n    }\n\n    /**","the world /\n    public String getWorldName() {\n        return cachedWorld.getName();\n    }\n\n    /**","the location's world","the location's world /\n    public World getWorld() {\n        return this.cachedWorld;\n    }\n\n    /** Internal method to set the world after deserializing. /\n    private void setWorld() {\n        this.cachedWorld = Wolf.getServer().getWorldManager().getWorld(this.world, this.dimension, true);\n    }\n\n    /** Returns the actual world this location belongs to Will auto load the world if the world's config has allow warp auto load set to {@code true}","the location's world","deserialized Location"],"deprecated":["Use getWorld instead. World is loaded in all cases /\n    @Deprecated\n    public World getWorld(boolean autoload) {\n        return Wolf.getServer().getWorldManager().getWorld(world, dimension, autoload);\n    }\n\n    /** Returns the actual world this location belongs to. Returns null if the world name or dimension that was specified was invalid.","use getWorld, world is already checked /\n    @Deprecated\n    public World getWorldChecked() {\n        String fqName = ToolBox.parseWorldName(world, dimension);\n        return getWorld(Configuration.getWorldConfig(fqName).allowWarpAutoLoad());\n    }\n\n    /** Return a String representation that can also be used for storing somewhere for this Location. /\n    public String toString() {\n        StringBuilder fields = new StringBuilder();\n\n        fields.append(this.x).append(\";\").append(this.y).append(\";\").append(this.z).append(\";\").append(this.pitch).append(\";\").append(this.rotation).append(\";\").append(this.dimension.getId()).append(\";\").append(this.world);\n        return fields.toString();\n    }\n\n    /** Turn a String Location that has been formatted by Location.toString() (or has a compatible format) into a Location object"],"throws":["WolfDeserializeException if the String does not contain enough information or incorrect information /\n    public static Location fromString(String fields) throws WolfDeserializeException {\n        Location loc = emptyLocation();\n        String[] split = fields.split(\";\");\n\n        if (split.length != 7) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: Expected fields are 7. Found \" + split.length, \"WolfScript\");\n        }\n        try {\n            loc.setX(Double.parseDouble(split[0]));\n            loc.setY(Double.parseDouble(split[1]));\n            loc.setZ(Double.parseDouble(split[2]));\n            loc.setPitch(Float.parseFloat(split[3]));\n            loc.setRotation(Float.parseFloat(split[4]));\n            loc.setType(DimensionType.fromId(Integer.parseInt(split[5])));\n            loc.setWorldName(split[6]);\n            loc.setWorld();\n            return loc;\n        }\n        catch (NumberFormatException e) {\n            throw new WolfDeserializeException(\"Failed to deserialize Location: \" + e.getMessage(), \"WolfScript\");\n        }\n    }\n\n    public String asReadableString(ReadMode... modes) {\n        EnumSet<ReadMode> modeSet = EnumSet.noneOf(ReadMode.class);\n        if (modes != null && modes.length != 0) {\n            modeSet.addAll(Arrays.asList(modes));\n        }\n        StringBuilder builder = new StringBuilder();\n        if (modeSet.contains(ReadMode.XYZ)) {\n            builder.append(\"X:\").append(getBlockX()).append(\" \");\n            builder.append(\"Y:\").append(getBlockY()).append(\" \");\n            builder.append(\"Z:\").append(getBlockZ()).append(\" \");\n        }\n        else if (modeSet.contains(ReadMode.XYZFLOAT)) {\n            builder.append(\"X:\").append(String.format(\"%.3f\", getX())).append(\" \");\n            builder.append(\"Y:\").append(String.format(\"%.3f\", getY())).append(\" \");\n            builder.append(\"Z:\").append(String.format(\"%.3f\", getZ())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.ROTATION)) {\n            builder.append(\"Rotation:\").append(String.format(\"%.3f\", getRotation())).append(\" \");\n            builder.append(\"Pitch:\").append(String.format(\"%.3f\", getPitch())).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.WORLD)) {\n            builder.append(\"World:\").append(getWorldName()).append(\" \");\n        }\n\n        if (modeSet.contains(ReadMode.DIMENSION)) {\n            builder.append(\"Dimension:\").append(getType().getName()).append(\" \");\n        }\n        return builder.toString();\n    }\n\n    public LocationDataAccess toDataAccess(LocationDataAccess lda) {\n        super.toDataAccess(lda);\n        lda.rotation = this.rotation;\n        lda.pitch = this.pitch;\n        lda.world = this.world;\n        lda.dimension = this.dimension.getName();\n        return lda;\n    }\n\n    public static Location fromDataAccess(LocationDataAccess lda) {\n        Location loc = emptyLocation();\n        loc.setX(lda.posX);\n        loc.setY(lda.posY);\n        loc.setZ(lda.posZ);\n        loc.setPitch(lda.pitch);\n        loc.setRotation(lda.rotation);\n        loc.setType(DimensionType.fromName(lda.dimension));\n        loc.setWorldName(lda.world);\n        loc.setWorld();\n        return loc;\n    }\n\n    public static Location emptyLocation() {\n        return new Location(0, 0, 0);\n    }\n\n    @Override\n    public Location clone() throws CloneNotSupportedException {\n        return (Location)super.clone();\n    }\n\n    public Location copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Location(this);\n    }\n\n    /** Used in Readable String to define what information to pass"]}}],"properties":[]},"io.wolfscript.api.world.position.Rotations":{"namespace":"io.wolfscript.api.world.position","title":"class Rotations","description":"class Rotations","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Rotations","qualifiedname":"io.wolfscript.api.world.position.Rotations","type":"class","scope":"public","constructors":[{"title":"Rotations constructor","description":"Rotations constructor","scope":"public","name":"Rotations","args":[{"name":"x","type":"float","description":"x argument"},{"name":"y","type":"float","description":"y argument"},{"name":"z","type":"float","description":"z argument"}]}],"methods":[{"title":"Gets the X-axis rotation","description":"Gets the X-axis rotation","doc":{"return":["X-axis rotation /\n    public float getX() {\n        return x;\n    }\n\n    /** Sets the X-axis rotation","Y-axis rotation /\n    public float getY() {\n        return y;\n    }\n\n    /** Sets the Y-axis rotation","Z-axis rotation /\n    public float getZ() {\n        return z;\n    }\n\n    /** Sets the Z-axis rotation","ListTag /\n    public ListTag<FloatTag> toNBT() {\n        ListTag<FloatTag> tag = nbtFactory.newListTag();\n        tag.add(nbtFactory.newFloatTag(x));\n        tag.add(nbtFactory.newFloatTag(y));\n        tag.add(nbtFactory.newFloatTag(z));\n        return tag;\n    }\n\n    /** Deserialized from a {@link io.wolfscript.api.nbt.ListTag}","a new {@link io.wolfscript.api.world.position.Rotations} object"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.position.Rotations","name":"fromNBT","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.MathHelp","io.wolfscript.api.factory.NBTFactory","io.wolfscript.api.nbt.FloatTag","io.wolfscript.api.nbt.ListTag"],"properties":[]},"io.wolfscript.api.world.position.Vector3D":{"namespace":"io.wolfscript.api.world.position","title":"A Vector3D represents a point ins in the 3D space.","description":"A Vector3D represents a point ins in the 3D space. That can be a block or a player coodinate","doc":{"author":["chris, Tobias (Toble_Miner)"]},"name":"Vector3D","qualifiedname":"io.wolfscript.api.world.position.Vector3D","type":"class","scope":"public","extends":["io.wolfscript.api.world.position.Position"],"constructors":[],"fields":[{"title":"This is the nullvector (0,0,0)","description":"This is the nullvector (0,0,0) /\n    public static final Vector3D zero = new Vector3D(0, 0, 0);\n\n    /** Shortcut to Vector3D(0,0,1)","doc":{},"name":"forward","scope":"public","type":"io.wolfscript.api.world.position.Vector3D","describe":"static final"}],"methods":[{"title":"fromString method","description":"fromString method","scope":"public","describe":"static","return":"io.wolfscript.api.world.position.Vector3D","name":"fromString","args":[{"name":"in","type":"String","description":"in argument"}]},{"title":"This is the nullvector (0,0,0)","description":"This is the nullvector (0,0,0) /\n    public static final Vector3D zero = new Vector3D(0, 0, 0);\n\n    /** Shortcut to Vector3D(0,0,1) /\n    public static final Vector3D forward = new Vector3D(0, 0, 1);\n\n    public Vector3D(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public Vector3D(int x, int y, int z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public Vector3D(float x, float y, float z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public Vector3D() {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n\n    /** Copy constructor copies the primitives","doc":{"retur":["n /\n    public double getDistance(Position v) {\n        double diffX = v.getX() - this.getX();\n        double diffY = v.getY() - this.getY();\n        double diffZ = v.getZ() - this.getZ();\n\n        return Math.sqrt(diffX diffX + diffY diffY + diffZ diffZ);\n    }\n\n    /** Get the square distance between this and the given vector. This is substantially faster than the standard getDistance but you'll have to squre the numbers you're checking against yourself","n /\n    public double getSquareDistance(Position v) {\n        double diffX = v.getX() - this.getX();\n        double diffY = v.getY() - this.getY();\n        double diffZ = v.getZ() - this.getZ();\n\n        return (diffX diffX + diffY diffY + diffZ diffZ);\n    }\n\n    /** Retrieve the distance between 2 given vectors","n /\n    public boolean isWithin(Position min, Position max) {\n        return (min.x <= this.x && this.x <= max.x) &&\n                (min.y <= this.y && this.y <= max.y) &&\n                (min.z <= this.z && this.z <= max.z);\n\n//        return this.getBlockX() >= min.getBlockX() && this.getBlockX() <= max.getBlockX() && this.getBlockY() >= min.getBlockY() && this.getBlockY() <= max.getBlockY() && this.getBlockZ() >= min.getBlockZ() && this.getBlockZ() <= max.getBlockZ();\n    }\n\n    /** Add the given Vector to this Vector and return the result as new Vector3D","n /\n    public double getMagnitude() {\n        return Math.sqrt(x x + y y + z z);\n    }\n\n    @Override\n    public Vector3D clone() throws CloneNotSupportedException {\n        return (Vector3D)super.clone();\n    }\n\n    public Vector3D copy() {\n        try {\n            return this.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            // it is supported...\n        }\n        return new Vector3D(this);\n    }\n\n    /** Gets the minimum components of two vectors."],"return":["double The Distance /\n    public static double getDistance(Vector3D v1, Vector3D v2) {\n        return v2.getDistance(v1);\n    }\n\n    /** Checks if another object equals this one","whether the other object has the same values for x,y,z /\n    @Override\n    public boolean equals(Object obj) {\n        if (!(obj instanceof Vector3D)) {\n            return false;\n        }\n        Vector3D other = (Vector3D)obj;\n\n        return other.getX() == this.x && other.getY() == this.y && other.getZ() == this.z;\n    }\n\n    /** Return a hashcode for this object /\n    @Override\n    public int hashCode() {\n        int hash = 3;\n\n        hash = (int)(hash + x);\n        hash = (int)(hash + y);\n        hash = (int)(hash + z);\n        return hash;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder format = new StringBuilder();\n\n        format.append(this.x).append(\":\").append(this.y).append(\":\").append(this.z);\n        return format.toString();\n    }\n\n    /** Check if this vector is contained within the range of the given two. It can be seen as a AABB collision test.","Vector3D result of addition /\n    public Vector3D add(Vector3D toAdd) {\n        return new Vector3D(this.x + toAdd.x, this.y + toAdd.y, this.z + toAdd.z);\n    }\n\n    /** Subtract the given Vector from this Vector and return the result as new Vector3D","Vector3D result of subtraction /\n    public Vector3D subtract(Vector3D toRemove) {\n        return new Vector3D(this.x - toRemove.x, this.y - toRemove.y, this.z - toRemove.z);\n    }\n\n    /** Scalar multiply this vector with a given factor and return the result as new Vector3D","scalar product as Vector3D /\n    public Vector3D multiply(double scalar) {\n        return new Vector3D(this.x scalar, this.y scalar, this.z scalar);\n    }\n\n    /** Calculates the dot product of this vector with another","dot product /\n    public double dot(Vector3D v) {\n        return this.x v.x + this.y v.y + this.z v.z;\n    }\n\n    /** Calculates the angle between this vector and another","angle between vectors /\n    public double angle(Vector3D v) {\n        return Math.acos(this.dot(v) / (this.getMagnitude() v.getMagnitude()));\n    }\n\n\n    /** Get the length (or magnitude) of this vector","minimum /\n    public static Vector3D getMinimum(Position v1, Position v2) {\n        return new Vector3D(Math.min(v1.getX(), v2.getX()), Math.min(v1.getY(), v2.getY()), Math.min(v1.getZ(), v2.getZ()));\n    }\n\n    /** Gets the maximum components of two vectors.","minimum /\n    public static Vector3D getMaximum(Position v1, Position v2) {\n        return new Vector3D(Math.max(v1.getX(), v2.getX()), Math.max(v1.getY(), v2.getY()), Math.max(v1.getZ(), v2.getZ()));\n    }\n\n    /** Calculates the center point between 2 points","Vector between p1 and p2 /\n    public static Vector3D getCenterPoint(Position p1, Position p2) {\n        double x = (p1.getX() + p2.getX()) / 2;\n        double y = (p1.getY() + p2.getY()) / 2;\n        double z = (p1.getZ() + p2.getZ()) / 2;\n        return new Vector3D(x, y, z);\n    }\n\n    /** Retrieve the major of two vectors (the one farther away from 0,0,0)","Major Vector, null if something went wrong /\n    public static Vector3D getMajor(Vector3D v1, Vector3D v2) {\n        double dv1 = v1.getMagnitude();\n        double dv2 = v2.getMagnitude();\n        double max = Math.max(v1.getMagnitude(), v2.getMagnitude());\n        if (max == dv1) {\n            return v1;\n        }\n        else if (max == dv2) {\n            return v2;\n        }\n        else {\n            return null;\n        }\n    }\n\n    /** Retrieve the minor of two vectors (the one nearer to 0,0,0","Minor Vector, null if something went wrong"]},"scope":"public","describe":"static","return":"io.wolfscript.api.world.position.Vector3D","name":"getMinor","args":[{"name":"v1","type":"io.wolfscript.api.world.position.Vector3D","description":"v1 argument"},{"name":"v2","type":"io.wolfscript.api.world.position.Vector3D","description":"v2 argument"}]}],"imports":["io.wolfscript.WolfDeserializeException"],"properties":[]},"io.wolfscript.backbone.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.backbone","description":"Classes and interfaces for namespace io.wolfscript.backbone","name":"backbone","qualifiedname":"io.wolfscript.backbone.0","packagename":"io.wolfscript.backbone","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.backbone.Backbone","io.wolfscript.backbone.BackboneBans","io.wolfscript.backbone.BackboneGroups","io.wolfscript.backbone.BackboneKits","io.wolfscript.backbone.BackboneOperators","io.wolfscript.backbone.BackbonePermissions","io.wolfscript.backbone.BackboneReservelist","io.wolfscript.backbone.BackboneUsers","io.wolfscript.backbone.BackboneWarps","io.wolfscript.backbone.BackboneWhitelist","io.wolfscript.backbone.BanDataAccess","io.wolfscript.backbone.GroupDataAccess","io.wolfscript.backbone.KitDataAccess","io.wolfscript.backbone.OperatorsDataAccess","io.wolfscript.backbone.PermissionDataAccess","io.wolfscript.backbone.PlayerDataAccess","io.wolfscript.backbone.ReservelistDataAccess","io.wolfscript.backbone.WarpDataAccess","io.wolfscript.backbone.WhitelistDataAccess"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.backbone.Backbone":{"namespace":"io.wolfscript.backbone","title":"The backbone system.","description":"The backbone system.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Backbone","qualifiedname":"io.wolfscript.backbone.Backbone","type":"class","scope":"public","constructors":[{"title":"Backbone constructor","description":"Backbone constructor","scope":"public","name":"Backbone","args":[{"name":"system","type":"System","description":"system argument"}]}],"methods":[],"imports":[],"properties":[{"name":"System","modifier":"readonly","args":[],"description":"Get: Get the System of this backbone","doc":{"return":["The System instance."]},"return":"System","scope":"public","title":"Get: Get the System of this backbone"}]},"io.wolfscript.backbone.BackboneBans":{"namespace":"io.wolfscript.backbone","title":"Backbone to the ban System. This contains NO logic, it is only the data","description":"Backbone to the ban System. This contains NO logic, it is only the data source access!","doc":{"author":["Chris"]},"name":"BackboneBans","qualifiedname":"io.wolfscript.backbone.BackboneBans","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneBans constructor","description":"BackboneBans constructor","scope":"public","name":"BackboneBans","args":[]}],"methods":[{"title":"Add a new Ban to the list of bans.","description":"Add a new Ban to the list of bans.","doc":{"param":["ban The ban to add. /\n    public void addBan(Ban ban) {\n        if (banExists(ban)) {\n            updateBan(ban);\n            return;\n        }\n        BanDataAccess data = new BanDataAccess();\n\n        data.uuid = ban.getUUID();\n        data.player = ban.getSubject();\n        data.banningPlayer = ban.getBanningPlayer();\n        data.unbanDate = ban.getExpiration();\n        data.reason = ban.getReason();\n        data.ip = ban.getIp();\n        data.issuedDate = ban.getIssuedDate();\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Lift a ban that was issued for the player with the given uuid","uuid Player uuid to unban. /\n    public void liftBan(String uuid) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", uuid);\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Lift an IP ban.","subject IP Address to unban. /\n    public void liftIpBan(String subject) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"ip\", subject);\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Get a ban for this player uuid. This may return null if the ban does not exist","uuid Ban for the player with the given uuid or null if none.","ban Ban instance to update. /\n    public void updateBan(Ban ban) {\n        BanDataAccess data = new BanDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", ban.getUUID());\n            Database.get().load(data, filter);\n            if (data.hasData()) {\n                data.uuid = ban.getUUID();\n                data.banningPlayer = ban.getBanningPlayer();\n                data.ip = ban.getIp();\n                data.player = ban.getSubject();\n                data.reason = ban.getReason();\n                data.unbanDate = ban.getExpiration();\n                data.issuedDate = ban.getIssuedDate();\n                Database.get().update(data, filter);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all recorded bans"],"return":["Returns a ban object if that ban was found, null otherwise /\n    public Ban getBan(String uuid) {\n        BanDataAccess data = new BanDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", uuid);\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        if (!data.hasData()) {\n            return null;\n        }\n        Ban newBan = new Ban();\n        newBan.setUUID(data.uuid);\n        newBan.setIp(data.ip);\n        newBan.setIsIpBan(!data.ip.contains(\"xxx\"));\n        newBan.setReason(data.reason);\n        newBan.setSubject(data.player);\n        newBan.setExpiration(data.unbanDate);\n        newBan.setIssuedDate(data.issuedDate);\n        newBan.setBanningPlayer(data.banningPlayer);\n        return newBan;\n    }\n\n    /** Update a ban.","An array list of all recorded ban instances."]},"scope":"public","return":"List<Ban>","name":"loadBans","args":[]}],"imports":["io.wolfscript.bansystem.Ban","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneGroups":{"namespace":"io.wolfscript.backbone","title":"Backbone to the groups System. This contains NO logic, it is only the data","description":"Backbone to the groups System. This contains NO logic, it is only the data source access!","doc":{"author":["Chris"]},"name":"BackboneGroups","qualifiedname":"io.wolfscript.backbone.BackboneGroups","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneGroups constructor","description":"BackboneGroups constructor","scope":"public","name":"BackboneGroups","args":[]}],"methods":[{"title":"Add a new Group to the list of Groups.","description":"Add a new Group to the list of Groups.","doc":{"param":["group The group instance to add. /\n    public void addGroup(Group group) {\n        if (groupExists(group)) {\n            updateGroup(group);\n            return;\n        }\n        GroupDataAccess data = group.toDataAccess();\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    private boolean groupExists(Group group) {\n        GroupDataAccess data = new GroupDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", group.getName());\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return data.hasData();\n    }\n\n    /** Remove a group from the data source","group the Group instance to remove. /\n    public void removeGroup(Group group) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", group.getName());\n            Database.get().remove(schema, filter);\n            // Additionally remove all permissions belonging to a group!\n            Wolf.permissionManager().removeAllGroupPermissions(group);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    public void renameGroup(Group subject, String newname) {\n        GroupDataAccess group = subject.toDataAccess();\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"id\", group.id);\n            filter.put(\"world\", group.worldName);\n            group.name = newname;\n            Database.get().update(group, filter);\n            subject.setName(newname);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Update a Group and all its child groups. This will not perform rename operations properly. For renaming groups, use renameGroup()","group The group instance to update to the database. /\n    public void updateGroup(Group group) {\n        if (!groupExists(group)) {\n            log.warn(\"Group \" + group.getName() + \" was not updated, it does not exist!\");\n            return;\n        }\n        GroupDataAccess updatedData = group.toDataAccess();\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"id\", updatedData.id);\n            filter.put(\"name\", updatedData.name);\n            Database.get().update(updatedData, filter);\n            for (Group g : group.getChildren()) {\n                updateGroup(g);\n            }\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    private Group loadParents(String parent, BiMap<String, Group> existingGroups) {\n        if (ToolBox.stringToNull(parent) == null || parent.isEmpty()) {\n            return null;\n        }\n        if (existingGroups.containsKey(parent)) {\n            return existingGroups.get(parent);\n        }\n        GroupDataAccess data = new GroupDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", parent);\n            Database.get().load(data, filter);\n            if (data.hasData()) {\n                Group g = new Group();\n                g.setDefaultGroup(data.isDefault);\n                g.setId(data.id);\n                g.setName(data.name);\n                g.setWorldName(ToolBox.stringToNull(data.worldName));\n                g.setPrefix(data.prefix);\n                g.setParent(loadParents(data.parent, existingGroups));\n                existingGroups.put(g.getName(), g);\n                return g;\n            }\n            else {\n                log.warn(parent + \" group was requested but could not be loaded! DataAccess was empty!\");\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    /** Check if group with this name is already in the list. That can happen because the list gets filled by 2 methods,","name name of the group to check.","list list of groups to check in."],"return":["true - the group is in the list<br> false - the group is not in the list. /\n    private boolean alreadyInList(String name, List<Group> list) {\n        for (Group g : list) {\n            if (g.getName().equals(name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Load and return all recorded groups","An ArrayList containing all recorded groups. /\n    public BiMap<String, Group> loadGroups() {\n        List<DataAccess> dataList = new ArrayList<DataAccess>();\n        BiMap<String, Group> groups = HashBiMap.create();\n\n        try {\n            Database.get().loadAll(schema, dataList, new HashMap<String, Object>());\n            for (DataAccess da : dataList) {\n                GroupDataAccess data = (GroupDataAccess)da;\n                if (groups.containsKey(data.name)) {\n                    continue;\n                }\n                Group g = new Group();\n\n                g.setDefaultGroup(data.isDefault);\n                g.setId(data.id);\n                g.setName(data.name);\n                g.setWorldName(ToolBox.stringToNull(data.worldName));\n                g.setPrefix(data.prefix);\n                if (!data.isDefault || !data.name.equals(data.parent)) {\n                    g.setParent(loadParents(data.parent, groups));\n                }\n                groups.put(g.getName(), g);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return groups;\n    }\n\n    /** Creates a set of default groups and puts them into the database"]},"scope":"public","describe":"static","return":"void","name":"createDefaults","args":[]}],"imports":["com.google.common.collect.BiMap","com.google.common.collect.HashBiMap","io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.chat.ChatFormat","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.user.Group","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneKits":{"namespace":"io.wolfscript.backbone","title":"Backbone to the kits System. This contains NO logic, it is only the data","description":"Backbone to the kits System. This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)"]},"name":"BackboneKits","qualifiedname":"io.wolfscript.backbone.BackboneKits","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneKits constructor","description":"BackboneKits constructor","scope":"public","name":"BackboneKits","args":[]}],"methods":[{"title":"Add a new Kit to the list of Kits.","description":"Add a new Kit to the list of Kits.","doc":{"param":["kit Adds the kit instance to the list of kits. /\n    public void addKit(Kit kit) {\n        if (kitExists(kit)) {\n            updateKit(kit);\n            return;\n        }\n        KitDataAccess data = new KitDataAccess();\n\n        data.groups = kit.getGroups() != null ? new ArrayList<String>(Arrays.asList(kit.getGroups())) : new ArrayList<String>();\n        data.items = kit.getItemsAsStringList();\n        data.name = kit.getName();\n        data.owners = kit.getOwner() != null ? new ArrayList<String>(Arrays.asList(kit.getOwner())) : new ArrayList<String>();\n        data.useDelay = kit.getDelay();\n        data.id = 0;\n\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Remove a Kit from the data source","kit Removes the kit instance from the list of kits. /\n    public void removeKit(Kit kit) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", kit.getName());\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Get a Kit with the given name","name Name of the kit to get.","kit Update this kit instance to the database. /\n    public void updateKit(Kit kit) {\n        KitDataAccess data = new KitDataAccess();\n\n        data.groups = kit.getGroups() != null ? new ArrayList<String>(Arrays.asList(kit.getGroups())) : new ArrayList<String>();\n        data.items = kit.getItemsAsStringList();\n        data.name = kit.getName();\n        data.owners = kit.getOwner() != null ? new ArrayList<String>(Arrays.asList(kit.getOwner())) : new ArrayList<String>();\n        data.useDelay = kit.getDelay();\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", kit.getName());\n            Database.get().update(data, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all kits"],"return":["a Kit object if that Kit was found, null otherwise /\n    public Kit getKit(String name) {\n        KitDataAccess data = new KitDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", name);\n            Database.get().load(data, filter);\n            if (!data.hasData()) {\n                return null;\n            }\n            Kit kit = new Kit();\n\n            kit.setContentFromStrings(data.items);\n            kit.setDelay(data.useDelay);\n            kit.setGroups(data.groups.toArray(new String[data.groups.size()]));\n            kit.setName(data.name);\n            kit.setOwner(data.owners.toArray(new String[data.owners.size()]));\n            kit.setId(data.id);\n            return kit;\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return null;\n    }\n\n    /** Update a Kit","An ArrayList of all kits."]},"scope":"public","return":"List<Kit>","name":"loadKits","args":[]}],"imports":["io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.kit.Kit","java.util.ArrayList","java.util.Arrays","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneOperators":{"namespace":"io.wolfscript.backbone","title":"Backbone to the ops system. This contains NO logic, it is only the data","description":"Backbone to the ops system. This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"BackboneOperators","qualifiedname":"io.wolfscript.backbone.BackboneOperators","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneOperators constructor","description":"BackboneOperators constructor","scope":"public","name":"BackboneOperators","args":[]}],"fields":[{"title":"schema field","description":"schema field","name":"schema","scope":"public","type":"io.wolfscript.backbone.OperatorsDataAccess","describe":"static"}],"methods":[{"title":"isOpped method","description":"isOpped method","scope":"public","return":"boolean","name":"isOpped","args":[{"name":"player","type":"String","description":"player argument"}]},{"title":"Add a new ops entry","description":"Add a new ops entry","doc":{"param":["player the name of the player to op /\n    public void addOpEntry(String player) {\n        if (isOpped(player)) {\n            return;\n        }\n        OperatorsDataAccess data = new OperatorsDataAccess();\n\n        data.player = player;\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Removes a player from the op list","subject the name of the player to de-op /\n    public void removeOpEntry(String subject) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"player\", subject);\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all recorded bans"],"return":["An array list of all recorded ban instances."]},"scope":"public","return":"List<String>","name":"loadOps","args":[]}],"imports":["io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackbonePermissions":{"namespace":"io.wolfscript.backbone","title":"Backbone to the permissions System. This contains NO logic, it is only the","description":"Backbone to the permissions System. This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)"]},"name":"BackbonePermissions","qualifiedname":"io.wolfscript.backbone.BackbonePermissions","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackbonePermissions constructor","description":"BackbonePermissions constructor","scope":"public","name":"BackbonePermissions","args":[]}],"methods":[{"title":"Load permissions for a group","description":"Load permissions for a group","doc":{"return":["PermissionsProvider instance for this group. /\n    public PermissionProvider loadGroupPermissions(String name, String world) {\n        if (world != null && world.isEmpty()) {\n            world = null;\n        }\n        PermissionProvider provider = new MultiworldPermissionProvider(world, false, name);\n        ArrayList<DataAccess> dataList = new ArrayList<DataAccess>();\n        log.debug(\"Loading permissions for \" + name + \". World: \" + ((world != null && !world.isEmpty()) ? world : \"none\"));\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"owner\", name);\n            filter.put(\"type\", \"group\");\n            Database.get().loadAll(new PermissionDataAccess(world), dataList, filter);\n            for (DataAccess da : dataList) {\n                PermissionDataAccess data = (PermissionDataAccess)da;\n\n                provider.addPermission(data.path, data.value, data.id);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return provider;\n    }\n\n    /** Load permissions for a player","PermissionProvider for this player. /\n    public PermissionProvider loadPlayerPermissions(String uuid, String world) {\n        if (world != null && world.isEmpty()) {\n            world = null;\n        }\n        // Validate player permissions\n        this.validatePlayerPermissions(world);\n        // Database.get().remove(\"permission\", new String[] {\"owner\", \"type\"}, new Object[] {group.getName(), \"group\"});\n        PermissionProvider provider = new MultiworldPermissionProvider(world, true, uuid);\n        ArrayList<DataAccess> dataList = new ArrayList<DataAccess>();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"owner\", uuid);\n            filter.put(\"type\", \"player\");\n            Database.get().loadAll(new PermissionDataAccess(world), dataList, filter);\n            for (DataAccess da : dataList) {\n                PermissionDataAccess data = (PermissionDataAccess)da;\n\n                provider.addPermission(data.path, data.value, data.id);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return provider;\n    }\n\n    /** Saves group permissions. This also adds new permissions + relations if there are any and and updates existing ones","The ID for the permission. /\n    public int addPermission(String path, boolean value, String owner, String type, String world) {\n        if (pathExists(path, owner, type, world)) {\n            return updatePermission(path, owner, type, world, value);\n        }\n        PermissionDataAccess data = new PermissionDataAccess(world);\n\n        data.path = path;\n        data.value = value;\n        data.owner = owner;\n        data.type = type;\n\n        try {\n            Database.get().insert(data);\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"path\", path);\n            filter.put(\"owner\", owner);\n            filter.put(\"type\", type);\n            Database.get().load(data, filter);\n            return data.id;\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return data.id;\n    }\n\n    /** Update a permission node with the given values. The values given must clearly identify the node to update.","The ID of the updated permission /\n    public int updatePermission(String path, String owner, String type, String world, boolean value) {\n        PermissionDataAccess data = new PermissionDataAccess(world);\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"path\", path);\n            filter.put(\"owner\", owner);\n            filter.put(\"type\", type);\n            Database.get().load(data, filter);\n            if (!data.hasData()) {\n                throw new DatabaseReadException(\"Could not load a permission path! (\" + path + \")\");\n            }\n            data.value = value;\n            Database.get().update(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n        return data.id;\n    }\n\n    public boolean pathExists(String path, String owner, String type, String world) {\n        PermissionDataAccess data = new PermissionDataAccess(world);\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"path\", path);\n            filter.put(\"owner\", owner);\n            filter.put(\"type\", type);\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return data.hasData();\n    }\n\n    /** Creates a range of default permissions for the default groups defined in BackboneGroups /\n    public static void createDefaultPermissionSet() {\n        PermissionDataAccess admin = new PermissionDataAccess(null);\n        PermissionDataAccess mods = new PermissionDataAccess(null);\n        PermissionDataAccess players = new PermissionDataAccess(null);\n\n        admin.owner = \"admins\";\n        admin.type = \"group\";\n        admin.path = \"*\";\n        admin.value = true;\n\n        mods.owner = \"mods\";\n        mods.type = \"group\";\n        mods.path = \"wolf.super.ignoreRestrictions\";\n        mods.value = true;\n\n        players.owner = \"players\";\n        players.type = \"group\";\n        players.path = \"wolf.world.build\";\n        players.value = true;\n\n        try {\n            Database.get().insert(admin);\n            Database.get().insert(mods);\n            Database.get().insert(players);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Validate that player permissions have a UUID and not a playername."]},"scope":"public","return":"void","name":"validatePlayerPermissions","args":[{"name":"world","type":"String","description":"the world name"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.World","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.permissionsystem.MultiworldPermissionProvider","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.permissionsystem.PermissionProvider","io.wolfscript.user.Group","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneReservelist":{"namespace":"io.wolfscript.backbone","title":"Backbone to the reservelist system. This contains NO logic, it is only the data","description":"Backbone to the reservelist system. This contains NO logic, it is only the data source access!","doc":{"author":["Jason (darkdiplomat)"]},"name":"BackboneReservelist","qualifiedname":"io.wolfscript.backbone.BackboneReservelist","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneReservelist constructor","description":"BackboneReservelist constructor","scope":"public","name":"BackboneReservelist","args":[]}],"methods":[{"title":"Checks if the player has a reserved slot","description":"Checks if the player has a reserved slot","doc":{"param":["player the player's name to check","player the player's name or uuid /\n    public void addSlotReservation(String player) {\n        if (isSlotReserved(player)) {\n            return;\n        }\n        ReservelistDataAccess data = new ReservelistDataAccess();\n        if (ToolBox.isUUID(player)) {\n            data.player = \"\";\n            data.uuid = player;\n        }\n        else {\n            data.player = player;\n            data.uuid = ToolBox.usernameToUUID(player);\n        }\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Removes a player from the reservelist","subject the player's name or uuid /\n    public void removeReservelistEntry(String subject) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            if (ToolBox.isUUID(subject)) {\n                filter.put(\"uuid\", subject);\n            }\n            else {\n                filter.put(\"uuid\", ToolBox.usernameToUUID(subject));\n            }\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all recorded reservelist entries"],"return":["{@code true} if slot reserved; {@code false} otherwise /\n    public boolean isSlotReserved(String player) {\n        WhitelistDataAccess data = new WhitelistDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            if (ToolBox.isUUID(player)) {\n                filter.put(\"uuid\", player);\n            }\n            else {\n                filter.put(\"player\", player);\n            }\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return data.hasData();\n    }\n\n    /** Add a new reservelist entry","An array list of all recorded reserve entries. /\n    public List<String> loadReservelist() {\n        List<String> reservelist = new ArrayList<String>();\n        List<DataAccess> dataList = new ArrayList<DataAccess>();\n\n        try {\n            Database.get().loadAll(schema, dataList, new HashMap<String, Object>());\n            for (DataAccess da : dataList) {\n                ReservelistDataAccess data = (ReservelistDataAccess)da;\n                reservelist.add(data.uuid);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return reservelist;\n    }\n\n    /** Validate all user entries in the database. At this time it merely checks that all entries have a valid UUID.  If an entry does not, it attempts to retrieve it from Mojang's web service and"]},"scope":"public","return":"void","name":"validateReserveList","args":[]}],"imports":["io.wolfscript.ToolBox","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneUsers":{"namespace":"io.wolfscript.backbone","title":"Backbone to the Player System. This contains NO logic, it is only the data","description":"Backbone to the Player System. This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)"]},"name":"BackboneUsers","qualifiedname":"io.wolfscript.backbone.BackboneUsers","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneUsers constructor","description":"BackboneUsers constructor","scope":"public","name":"BackboneUsers","args":[]}],"methods":[{"title":"Add a new Player to the data source.","description":"Add a new Player to the data source.","doc":{"param":["player Player to add to the data source. /\n    public void addUser(Player player) {\n        if (userExists(player.getUUIDString())) {\n            log.debug(\"Player \" + player.getName() + \" already exists. Updating it instead!\");\n            updatePlayer(player);\n            return;\n        }\n        PlayerDataAccess data = new PlayerDataAccess();\n        ArrayList<String> groupNames = new ArrayList<String>();\n        for (Group g : player.getPlayerGroups()) {\n            groupNames.add(g.getName());\n        }\n        data.uuid = player.getUUIDString();\n        data.name = player.getName();\n        data.group = groupNames.get(0);\n        groupNames.remove(0);\n        data.subgroups = groupNames;\n\n        String prefix = player.getPrefix();\n        if (prefix.equals(player.getGroup().getPrefix())) {\n            data.prefix = null;\n        }\n        else {\n            data.prefix = prefix;\n        }\n        data.isMuted = player.isMuted();\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Used to update a player. This can not override existing player entries. If there is a player with the uuid name, nothing will happen","nameOrUUID the player's name or uuid","group the group's name /\n    public void addUser(String nameOrUUID, String group) {\n        String uuid = ToolBox.isUUID(nameOrUUID) ? nameOrUUID : ToolBox.usernameToUUID(nameOrUUID);\n        if (uuid == null) {\n            log.debug(\"Player name or uuid is 'null'. Skipping!\");\n            return;\n        }\n        if (userExists(uuid)) {\n            log.debug(\"Player \" + uuid + \" already exists. Attempting update...\");\n            updatePlayer(Wolf.getServer().matchKnownPlayer(nameOrUUID));\n            return;\n        }\n        PlayerDataAccess data = new PlayerDataAccess();\n        if (!ToolBox.isUUID(nameOrUUID)) {\n            data.name = nameOrUUID;\n        }\n        data.uuid = uuid;\n        data.group = group;\n        data.prefix = null;\n        data.isMuted = false;\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Get whether a user exists","uuid Player to check if they exist.","uuid Player to remove from the data source. /\n    public void removeUser(String uuid) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", uuid);\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Update a Player.","player Player to update to the data source. /\n    public void updatePlayer(PlayerReference player) {\n        if (player == null) {\n            log.debug(\"No PlayerReference to update...\");\n            return;\n        }\n\n        PlayerDataAccess data = new PlayerDataAccess();\n        ArrayList<String> groupNames = new ArrayList<String>();\n        for (Group g : player.getPlayerGroups()) {\n            groupNames.add(g.getName());\n        }\n        data.uuid = player.getUUIDString();\n        data.name = player.getName();\n        data.group = groupNames.get(0);\n        groupNames.remove(0);\n        data.subgroups = groupNames;\n\n        String prefix = player.getPrefix();\n        if (prefix != null && prefix.equals(player.getGroup().getPrefix())) {\n            data.prefix = null;\n        }\n        else {\n            data.prefix = prefix;\n        }\n        data.isMuted = player.isMuted();\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", player.getUUIDString());\n            // filter.put(\"name\", player.getName()); // Can't update a name if its filtered in...\n            Database.get().update(data, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return String array sets. Each Array in the hashMap value has prefix, group and isMuted for a player, in that order.","uuid the player's name"],"return":["true if user exists, false otherwise /\n    private boolean userExists(String uuid) {\n        PlayerDataAccess data = new PlayerDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", uuid);\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return data.hasData();\n    }\n\n    /** Remove a player from the data source","A hashmap with a key of player name, and string array value with a prefix and group for a player, in that order. /\n    public Map<String, String[]> loadUsers() {\n        Map<String, String[]> players = new HashMap<String, String[]>();\n        List<DataAccess> daos = new ArrayList<DataAccess>();\n\n        try {\n            Database.get().loadAll(schema, daos, new HashMap<String, Object>());\n            for (DataAccess dao : daos) {\n                PlayerDataAccess data = (PlayerDataAccess)dao;\n                String[] row = new String[3];\n\n                row[0] = data.prefix;\n                row[1] = data.group;\n                row[2] = Boolean.toString(data.isMuted);\n                players.put(data.uuid == null ? \"\" : data.uuid, row);\n            }\n            return players;\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n\n        return null;\n    }\n\n    /** Returns the additional groups for the given player","Group array /\n    public Group[] getModularGroups(String uuid) {\n        PlayerDataAccess data = new PlayerDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"uuid\", uuid);\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        if (!data.hasData()) {\n            return new Group[0];\n        }\n        Group[] groups = new Group[data.subgroups.size()];\n        for (int i = 0; i < data.subgroups.size(); ++i) {\n            groups[i] = Wolf.usersAndGroups().getGroup(data.subgroups.get(i));\n        }\n        return groups;\n    }\n\n    public static void createDefaults() {\n        PlayerDataAccess player = new PlayerDataAccess();\n\n        player.group = \"players\";\n        player.uuid = \"\";\n        player.name = \"Bob the Builder\";\n\n        PlayerDataAccess mod = new PlayerDataAccess();\n\n        mod.group = \"mods\";\n        mod.uuid = \"\";\n        mod.name = \"Moderator Person\";\n\n        PlayerDataAccess admin = new PlayerDataAccess();\n\n        admin.group = \"admins\";\n        admin.uuid = \"\";\n        admin.name = \"Evil Uber Administrator\";\n\n        try {\n            Database.get().insert(player);\n            Database.get().insert(mod);\n            Database.get().insert(admin);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Validate all user entries in the database. At this time it merely checks that all entries have a valid UUID.  If an entry does not, it attempts to retrieve it from Mojang's web service and"]},"scope":"public","return":"void","name":"validateUsers","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.user.Group","java.util.ArrayList","java.util.HashMap","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneWarps":{"namespace":"io.wolfscript.backbone","title":"Backbone to the warps system This contains NO logic, it is only the data","description":"Backbone to the warps system This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"BackboneWarps","qualifiedname":"io.wolfscript.backbone.BackboneWarps","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneWarps constructor","description":"BackboneWarps constructor","scope":"public","name":"BackboneWarps","args":[]}],"methods":[{"title":"Creates a groups array.","description":"Creates a groups array. IMPORTANT NOTE: This requires the groups backbone to be loaded already!","doc":{"param":["groups the {@link Group}(s)","warp Warp instance to add to the data source. /\n    public void addWarp(Warp warp) {\n        if (warpExists(warp)) {\n            updateWarp(warp);\n            return;\n        }\n        WarpDataAccess data = schema.getInstance();\n\n        data.groups = warp.getGroupsAsString();\n        data.isPlayerHome = warp.isPlayerHome();\n\n        // data.location = warp.getLocation().toString(); deprecated\n        data.location = \"N/A\";\n        warp.getLocation().toDataAccess(data); // Replacing data.location\n        data.name = warp.getName();\n        data.owner = warp.getOwner();\n\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Remove a Warp from the data source","warp Warp instance to remove from the data source. /\n    public void removeWarp(Warp warp) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", warp.getName());\n            // filter.put(\"location\", warp.getLocation().toString()); // Location is a bad filter, mkay\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Update a Warp","warp Warp instance to update to the data source. /\n    public void updateWarp(Warp warp) {\n        WarpDataAccess data = schema.getInstance();\n\n        data.groups = warp.getGroupsAsString();\n        data.isPlayerHome = warp.isPlayerHome();\n        // data.location = warp.getLocation().toString(); Deprecated\n        data.location = \"N/A\";\n        warp.getLocation().toDataAccess(data); // Replacing data.location\n        data.name = warp.getName();\n        data.owner = warp.getOwner();\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            filter.put(\"name\", warp.getName());\n            Database.get().update(data, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all warps"],"return":["group array /\n    private Group[] makeGroupArray(List<String> groups) {\n        Group[] data = new Group[groups.size()];\n\n        for (int i = 0; i < groups.size(); ++i) {\n            data[i] = Wolf.usersAndGroups().getGroup(groups.get(i));\n        }\n        return data;\n    }\n\n    /** Add a new Warp to the list of Warps.","An ArrayList containing all loaded Warp instances."]},"scope":"public","return":"List<Warp>","name":"loadWarps","args":[]}],"imports":["com.google.common.collect.Lists","io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.world.position.Location","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.LocationDataAccess","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.user.Group","io.wolfscript.warp.Warp","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BackboneWhitelist":{"namespace":"io.wolfscript.backbone","title":"Backbone to the whitelist system. This contains NO logic, it is only the data","description":"Backbone to the whitelist system. This contains NO logic, it is only the data source access!","doc":{"author":["Chris (damagefilter)"]},"name":"BackboneWhitelist","qualifiedname":"io.wolfscript.backbone.BackboneWhitelist","type":"class","scope":"public","extends":["io.wolfscript.backbone.Backbone"],"constructors":[{"title":"BackboneWhitelist constructor","description":"BackboneWhitelist constructor","scope":"public","name":"BackboneWhitelist","args":[]}],"methods":[{"title":"Checks if the player is whitelisted","description":"Checks if the player is whitelisted","doc":{"param":["player the player's name or uuid to check","player the player's name or uuid /\n    public void addWhitelistEntry(String player) {\n        if (isWhitelisted(player)) {\n            return;\n        }\n        WhitelistDataAccess data = new WhitelistDataAccess();\n\n        if (ToolBox.isUUID(player)) {\n            data.player = \"\";\n            data.uuid = player;\n        }\n        else {\n            data.player = player;\n            data.uuid = ToolBox.usernameToUUID(player);\n        }\n        data.player = player;\n        try {\n            Database.get().insert(data);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Removes a player from the whitelist","subject the player's name or uuid /\n    public void removeWhitelistEntry(String subject) {\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            if (ToolBox.isUUID(subject)) {\n                filter.put(\"uuid\", subject);\n            }\n            else {\n                filter.put(\"uuid\", ToolBox.usernameToUUID(subject));\n            }\n            Database.get().remove(schema, filter);\n        }\n        catch (DatabaseWriteException e) {\n            log.error(e.getMessage(), e);\n        }\n    }\n\n    /** Load and return all recorded bans"],"return":["{@code true} if whitelisted; {@code false} otherwise /\n    public boolean isWhitelisted(String player) {\n        WhitelistDataAccess data = new WhitelistDataAccess();\n\n        try {\n            HashMap<String, Object> filter = new HashMap<String, Object>();\n            if (ToolBox.isUUID(player)) {\n                filter.put(\"uuid\", player);\n            }\n            else {\n                filter.put(\"uuid\", ToolBox.usernameToUUID(player));\n            }\n            Database.get().load(data, filter);\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return data.hasData();\n    }\n\n    /** Add a new whitelist entry","An array list of all recorded ban instances. /\n    public List<String> loadWhitelist() {\n        List<String> whiteList = new ArrayList<String>();\n        List<DataAccess> dataList = new ArrayList<DataAccess>();\n\n        try {\n            Database.get().loadAll(schema, dataList, new HashMap<String, Object>());\n            for (DataAccess da : dataList) {\n                WhitelistDataAccess data = (WhitelistDataAccess)da;\n                whiteList.add(data.uuid);\n            }\n        }\n        catch (DatabaseReadException e) {\n            log.error(e.getMessage(), e);\n        }\n        return whiteList;\n    }\n\n    /** Validate all user entries in the database. At this time it merely checks that all entries have a valid UUID.  If an entry does not, it attempts to retrieve it from Mojang's web service and"]},"scope":"public","return":"void","name":"validateReserveList","args":[]}],"imports":["io.wolfscript.ToolBox","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","java.util.ArrayList","java.util.HashMap","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.backbone.BanDataAccess":{"namespace":"io.wolfscript.backbone","title":"Ban Data Access","description":"Ban Data Access","doc":{"author":["Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"BanDataAccess","qualifiedname":"io.wolfscript.backbone.BanDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"BanDataAccess constructor","description":"BanDataAccess constructor","scope":"public","name":"BanDataAccess","args":[]}],"fields":[{"title":"Player uuid for this ban.","description":"Player uuid for this ban. /\n    @Column(columnName = \"uuid\", dataType = DataType.STRING)\n    public String uuid;\n\n    /** Player name for this ban. /\n    @Column(columnName = \"player\", dataType = DataType.STRING)\n    public String player;\n\n    /** IP Address for this ban. /\n    @Column(columnName = \"ip\", dataType = DataType.STRING)\n    public String ip;\n\n    /** Reason for this ban. /\n    @Column(columnName = \"reason\", dataType = DataType.STRING)\n    public String reason;\n\n    /** Player who banned this player. /\n    @Column(columnName = \"banningPlayer\", dataType = DataType.STRING)\n    public String banningPlayer;\n\n    /** Date to unban. /\n    @Column(columnName = \"unbanDate\", dataType = DataType.LONG)\n    public long unbanDate = -1;\n\n    /** Date ban issued.","doc":{},"name":"issuedDate","scope":"public","type":"long"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.GroupDataAccess":{"namespace":"io.wolfscript.backbone","title":"Group Data Access","description":"Group Data Access","doc":{"author":["Chris (damagefilter)"]},"name":"GroupDataAccess","qualifiedname":"io.wolfscript.backbone.GroupDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"GroupDataAccess constructor","description":"GroupDataAccess constructor","scope":"public","name":"GroupDataAccess","args":[]}],"fields":[{"title":"Name of this group.","description":"Name of this group. /\n    @Column(columnName = \"name\", dataType = DataType.STRING)\n    public String name;\n\n    /** Chat prefix for this group. /\n    @Column(columnName = \"prefix\", dataType = DataType.STRING)\n    public String prefix;\n\n    /** Parent group for this group. /\n    @Column(columnName = \"parent\", dataType = DataType.STRING)\n    public String parent;\n\n    /** Is this the default group? /\n    @Column(columnName = \"isDefault\", dataType = DataType.BOOLEAN)\n    public boolean isDefault;\n\n    /** Then world name for this group. May be null if group is global","doc":{},"name":"worldName","scope":"public","type":"String"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.KitDataAccess":{"namespace":"io.wolfscript.backbone","title":"Kit Data Access","description":"Kit Data Access","doc":{"author":["Chris (damagefilter)"]},"name":"KitDataAccess","qualifiedname":"io.wolfscript.backbone.KitDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"KitDataAccess constructor","description":"KitDataAccess constructor","scope":"public","name":"KitDataAccess","args":[]}],"fields":[{"title":"Delay in seconds to receive this kit.","description":"Delay in seconds to receive this kit. /\n    @Column(columnName = \"useDelay\", dataType = DataType.INTEGER)\n    public int useDelay;\n\n    /** List of Users names who can use this kit. /\n    @Column(columnName = \"owners\", dataType = DataType.STRING, isList = true)\n    public List<String> owners;\n\n    /** List of groups who can use this kit. /\n    @Column(columnName = \"groups\", dataType = DataType.STRING, isList = true)\n    public List<String> groups;\n\n    /** Name of this kit. /\n    @Column(columnName = \"name\", dataType = DataType.STRING)\n    public String name;\n\n    /** Items to give from this kit.","doc":{},"name":"items","scope":"public","type":"List<String>"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess","java.util.List"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.OperatorsDataAccess":{"namespace":"io.wolfscript.backbone","title":"Operators Data Access","description":"Operators Data Access","doc":{"author":["Jason (darkdiplomat)"]},"name":"OperatorsDataAccess","qualifiedname":"io.wolfscript.backbone.OperatorsDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"OperatorsDataAccess constructor","description":"OperatorsDataAccess constructor","scope":"public","name":"OperatorsDataAccess","args":[]}],"fields":[{"title":"Playername for this operator entry","description":"Playername for this operator entry","doc":{},"name":"player","scope":"public","type":"String"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.PermissionDataAccess":{"namespace":"io.wolfscript.backbone","title":"Permission Data Access","description":"Permission Data Access","doc":{"author":["Chris (damagefilter)"]},"name":"PermissionDataAccess","qualifiedname":"io.wolfscript.backbone.PermissionDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"Create this data access with an additional suffix","description":"Create this data access with an additional suffix","scope":"public","name":"PermissionDataAccess","args":[{"name":"suffix","type":"String","description":"the suffix"}]}],"fields":[{"title":"Create this data access with an additional suffix","description":"Create this data access with an additional suffix","doc":{"param":["suffix the suffix /\n    public PermissionDataAccess(String suffix) {\n        super(Configuration.getDbConfig().getPermissionsTableName(), suffix);\n        this.suffix = suffix;\n    }\n\n    /** Node for this Permission. /\n    @Column(columnName = \"path\", dataType = DataType.STRING)\n    public String path;\n\n    /** Whether or not this permission is true or false. /\n    @Column(columnName = \"value\", dataType = DataType.BOOLEAN)\n    public boolean value;\n\n    /** The name of the owner of this node (group or player uuid ) /\n    @Column(columnName = \"owner\", dataType = DataType.STRING)\n    public String owner;\n\n    /** The permission node type (player or group)"]},"name":"type","scope":"public","type":"String"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.PlayerDataAccess":{"namespace":"io.wolfscript.backbone","title":"Player Data Access","description":"Player Data Access","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerDataAccess","qualifiedname":"io.wolfscript.backbone.PlayerDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"PlayerDataAccess constructor","description":"PlayerDataAccess constructor","scope":"public","name":"PlayerDataAccess","args":[]}],"fields":[{"title":"Player uuid for this ban.","description":"Player uuid for this ban. /\n    @Column(columnName = \"uuid\", dataType = DataType.STRING)\n    public String uuid;\n\n    /** name of the player. /\n    @Column(columnName = \"name\", dataType = DataType.STRING)\n    public String name;\n\n    /** Player prefix. /\n    @Column(columnName = \"prefix\", dataType = DataType.STRING)\n    public String prefix;\n\n    /** Player group. /\n    @Column(columnName = \"group\", dataType = DataType.STRING)\n    public String group;\n\n    /** Is this player muted? /\n    @Column(columnName = \"isMuted\", dataType = DataType.BOOLEAN)\n    public boolean isMuted = false;\n\n    /** A list of additional sub groups. Permissions will be solved according to first to come, first to rule. Unless specified otherwise, a players color will be the one of the main group","doc":{},"name":"subgroups","scope":"public","type":"List<String>"}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess","java.util.Arrays","java.util.List"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.ReservelistDataAccess":{"namespace":"io.wolfscript.backbone","title":"Reserve List Data Access","description":"Reserve List Data Access","doc":{"author":["Jason (darkdiplomat)"]},"name":"ReservelistDataAccess","qualifiedname":"io.wolfscript.backbone.ReservelistDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"ReservelistDataAccess constructor","description":"ReservelistDataAccess constructor","scope":"public","name":"ReservelistDataAccess","args":[]}],"fields":[{"title":"UUID for this reservelist entry","description":"UUID for this reservelist entry /\n    @Column(columnName = \"uuid\", dataType = DataType.STRING)\n    public String uuid;\n\n    /** Playername for this reservelist entry","doc":{},"name":"player","scope":"public","type":"String"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.WarpDataAccess":{"namespace":"io.wolfscript.backbone","title":"Warp Data Access","description":"Warp Data Access","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"WarpDataAccess","qualifiedname":"io.wolfscript.backbone.WarpDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.LocationDataAccess"],"constructors":[{"title":"WarpDataAccess constructor","description":"WarpDataAccess constructor","scope":"public","name":"WarpDataAccess","args":[]}],"fields":[{"title":"Name of this warp.","description":"Name of this warp. /\n    @Column(columnName = \"name\", notNull = true, dataType = DataType.STRING)\n    public String name;\n\n    /** Is this warp a player home? /\n    @Column(columnName = \"isPlayerHome\", dataType = DataType.BOOLEAN)\n    public boolean isPlayerHome;\n\n    /** Owner of this warp. /\n    @Column(columnName = \"owner\", dataType = DataType.STRING)\n    public String owner; // Converting to UUID\n\n    /** groups that can use this warp. /\n    @Column(columnName = \"groups\", dataType = DataType.STRING, isList = true)\n    public List<String> groups;\n\n    /** Serialised location of this warp.","doc":{},"name":"location","scope":"public","type":"String","deprecated":true}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.LocationDataAccess","java.util.List"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.backbone.WarpDataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.backbone.WhitelistDataAccess":{"namespace":"io.wolfscript.backbone","title":"Permission Data Access","description":"Permission Data Access","doc":{"author":["Chris (damagefilter)"]},"name":"WhitelistDataAccess","qualifiedname":"io.wolfscript.backbone.WhitelistDataAccess","type":"class","scope":"public","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"WhitelistDataAccess constructor","description":"WhitelistDataAccess constructor","scope":"public","name":"WhitelistDataAccess","args":[]}],"fields":[{"title":"UUID for this reservelist entry","description":"UUID for this reservelist entry /\n    @Column(columnName = \"uuid\", dataType = DataType.STRING)\n    public String uuid;\n\n    /** Playername for this <p/> /** Playername for this whitelist entry","doc":{},"name":"player","scope":"public","type":"String"}],"methods":[],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"description":"Instance property","return":"io.wolfscript.database.DataAccess","scope":"public","title":"Instance property"}]},"io.wolfscript.bansystem.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.bansystem","description":"Classes and interfaces for namespace io.wolfscript.bansystem","name":"bansystem","qualifiedname":"io.wolfscript.bansystem.0","packagename":"io.wolfscript.bansystem","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.bansystem.Ban","io.wolfscript.bansystem.BanManager"],"interfaces":[],"enums":["io.wolfscript.bansystem.BanType"],"namespaces":[],"properties":[]},"io.wolfscript.bansystem.Ban":{"namespace":"io.wolfscript.bansystem","title":"Contains information regarding a ban","description":"Contains information regarding a ban","doc":{"author":["Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"Ban","qualifiedname":"io.wolfscript.bansystem.Ban","type":"class","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.backbone.BackboneBans"],"properties":[{"name":"IssuedDate","modifier":"writeonly","args":[{"name":"issued","type":"long","description":"UNIX timestamp"}],"description":"Set: Create a default ban object. It's highly recommended to override the values before saving to db /\n    public Ban() {\n        this.uuid = \"f84c6a790a4e45e0879bcd49ebd4c4e2\";\n        this.subject = \"John Doe\";\n        this.reason = \"Impersonating fictive characters\";\n    }\n\n    public Ban(PlayerReference player, String reason, boolean ipBan) {\n        this(player, reason, -1, ipBan);\n    }\n\n    public Ban(PlayerReference player, String reason, long expiration, boolean ipBan) {\n        this(player, reason, expiration, ipBan ? BanType.IP : BanType.UUID);\n    }\n\n    public Ban(PlayerReference player, String reason, BanType banType) {\n        this(player, reason, -1, banType);\n    }\n\n    public Ban(PlayerReference player, String reason, long expiration, BanType banType) {\n        this.uuid = player.getUUIDString();\n        this.subject = player.getName();\n        this.reason = reason;\n        this.expiration = expiration;\n\n        if(banType == BanType.IP) {\n            this.ip = player.getIP();\n            this.banType = BanType.IP;\n        }\n    }\n\n    /** Get the banned subject (usually a player name)","doc":{"return":["subject name /\n    public String getSubject() {\n        return subject;\n    }\n\n    /** Set the banned Subject (usually a player name)","the ip address or null if this is not an ip ban /\n    public String getIp() {\n        return ip;\n    }\n\n    /** If this is an IP Ban, set the IP address","the ban reason /\n    public String getReason() {\n        return reason;\n    }\n\n    /** Set the ban reason","UNIX timestamp","UNIX timestamp /\n    public long getExpiration() {\n        return expiration;\n    }\n\n    /** Set the UNIX timestamp of when this ban will expire","{@code true} if expired; {@code false} if not /\n    public boolean isExpired() {\n        return expiration != -1 && ToolBox.getUnixTimestamp() >= expiration;\n    }\n\n    /** Checks if the Ban is an IP Ban","{@code true} if IP Ban; {@code false} if not /\n    public boolean isIpBan() {\n        return banType == BanType.IP;\n    }\n\n    /** Sets if the Ban is an IP Ban","the correct ban type for this ban /\n    public BanType getBanType() {\n        return banType;\n    }\n\n    /** Sets the ban type","the moderator /\n    public String getBanningPlayer() {\n        return moderator;\n    }\n\n    /** Sets the moderator who issued the Ban","UUID of user /\n    public String getUUID() {\n        if (this.uuid == null) {\n            this.uuid = ToolBox.usernameToUUID(this.subject);\n            new BackboneBans().updateBan(this);\n        }\n        return this.uuid;\n    }\n\n    /** Sets the UUID for the ban on this user","UNIX timestamp /\n    public long getIssuedDate() {\n        return issued;\n    }\n\n    /** Sets the UNIX timestamp of when this ban was issued."],"deprecated":["Use {@link Ban#getExpiration} instead /\n    @Deprecated\n    public long getTimestamp() {\n        return expiration;\n    }\n\n    /** Get the UNIX timestamp of when this ban will expire. You can use that with a date formatter if you need to."]},"return":"void","scope":"public","title":"Set: Create a default ban object."}]},"io.wolfscript.bansystem.BanManager":{"namespace":"io.wolfscript.bansystem","title":"Used to issue bans","description":"Used to issue bans","doc":{"author":["Chris (damagefilter)"]},"name":"BanManager","qualifiedname":"io.wolfscript.bansystem.BanManager","type":"class","scope":"public","constructors":[{"title":"BanManager constructor","description":"BanManager constructor","scope":"public","name":"BanManager","args":[]}],"methods":[{"title":"Issue a permanent ban for this player with a given reason","description":"Issue a permanent ban for this player with a given reason","doc":{"param":["player the {@link Player} being banned","reason the reason for the ban /\n    public void issueBan(Player player, String reason) {\n        Ban ban = new Ban(player, reason, false);\n\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    /** Issues a ban using the given {@link Ban}","ban the {@link Ban} to be issued /\n    public void issueBan(Ban ban) {\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    /** Issue a temporary ban.","player the {@link Player} being banned","reason the reason for the ban","time The time component must be NUMBER HOUR/DAY/WEEK/MONTH. <br> Example: /ban player Being incredibly stupid 5 HOURS If you put nothing as time unit, it will evaluate as HOURS! /\n    public void issueBan(Player player, String reason, String time) {\n        long timeToAdd;\n\n        try {\n            timeToAdd = parseTimeSpec(time);\n        }\n        catch (NumberFormatException e) {\n            log.warn(\"Invalid time for temp ban specified(\" + time + \"). Skipping!\");\n            return;\n        }\n        Ban ban = new Ban(player, reason, ToolBox.getUnixTimestamp() + timeToAdd, false);\n\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    /** Ban player by IP","player the {@link Player} who's IP is being banned","reason the reason for the ban /\n    public void issueIpBan(Player player, String reason) {\n        Ban ban = new Ban(player, reason, true);\n\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    /** Issue an IP Ban with the given amount of time","player the {@link Player} who's IP is being banned","reason the reason for the ban","time The time component must be NUMBER HOUR/DAY/WEEK/MONTH. <br> Example: /ban player Being incredibly stupid 5 HOURS If you put nothing as time unit, it will evaluate as HOURS! /\n    public void issueIpBan(Player player, String reason, String time) {\n        long timeToAdd = 0L;\n\n        try {\n            timeToAdd = parseTimeSpec(time);\n        }\n        catch (NumberFormatException e) {\n            log.warn(\"Invalid time for temp ban specified. Skipping!\");\n        }\n        Ban ban = new Ban(player, reason, ToolBox.getUnixTimestamp() + timeToAdd, true);\n\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    public void issueIpBan(Player player, String reason, long bantime) {\n\n        Ban ban = new Ban(player, reason, ToolBox.getUnixTimestamp() + bantime, false);\n\n        bans.add(ban);\n        backbone.addBan(ban);\n    }\n\n    /** Check if banned and unban if ban has expired. Returns true if still banned, false otherwise. THIS WILL ALSO WORK FOR IP!","subject the uuid/ip of the subject who was banned","ip the IP address","player the name of the player","uuid the uuid of the player","subject the uuid/ip of the subject /\n    public void unban(String subject) {\n        Ban test = null;\n\n        for (Ban b : bans) {\n            if (b.getUUID().equals(subject)) {\n                test = b;\n                break;\n            }\n            else if (b.getIp().equals(subject)) {\n                test = b;\n                break;\n            }\n        }\n        if (test == null) {\n            return;\n        }\n        if (test.isIpBan()) {\n            backbone.liftIpBan(test.getIp());\n        }\n        else {\n            backbone.liftBan(test.getUUID());\n        }\n        bans.remove(test);\n    }\n\n    /** Unban this player (this will NOT work with IPBans!)","player the {@link Player} to unban /\n    public void unban(Player player) {\n        Ban test = null;\n\n        for (Ban b : bans) {\n            if (!b.isIpBan()) {\n                if (b.getUUID().equals(player.getUUID())) {\n                    test = b;\n                    break;\n                }\n            }\n        }\n        if (test == null) {\n            return;\n        }\n        backbone.liftBan(test.getUUID());\n        bans.remove(test);\n    }\n\n    /** Get all bans","banType The BanType the ban will be sorted by","ts timestring"],"return":["{@code true} if banned; {@code false} if not /\n    public boolean isBanned(String subject) {\n        Ban test = null;\n\n        for (Ban b : bans) {\n            if (b.getUUID().equals(subject)) {\n                test = b;\n                break;\n            }\n            else if (b.getIp().equals(subject)) {\n                test = b;\n                break;\n            }\n        }\n        if (test == null) {\n            return false;\n        }\n        else if (test.isExpired()) {\n            if (test.isIpBan()) {\n                backbone.liftIpBan(test.getIp());\n            }\n            else {\n                backbone.liftBan(test.getUUID());\n            }\n            bans.remove(test);\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    /** Check if the given IP is banned","{@code true} if banned; {@code false} if not /\n    public boolean isIpBanned(String ip) {\n        for (Ban b : bans) {\n            if (b.getIp().equals(ip)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Gets a {@link io.wolfscript.bansystem.Ban} for a given player's name","the Ban if exists; {@code null} otherwise /\n    public Ban getBanFromName(String player) {\n        for (Ban b : bans) {\n            if (b.getSubject().equalsIgnoreCase(player)) {\n                return b;\n            }\n        }\n        return null;\n    }\n\n    /** Gets a {@link io.wolfscript.bansystem.Ban} for a given player's uuid","the Ban if exists; {@code null} otherwise /\n    public Ban getBan(String uuid) {\n        for (Ban b : bans) {\n            if (b.getUUID().equalsIgnoreCase(uuid)) {\n                return b;\n            }\n        }\n        return null;\n    }\n\n    /** Unban a subject, player or ip","an Array of {@link io.wolfscript.bansystem.Ban}(s) /\n    public Ban[] getAllBans() {\n        Ban[] retT = {};\n\n        return bans.toArray(retT);\n    }\n\n    /** Get all bans of a certain BanType","an Array of {@link io.wolfscript.bansystem.Ban}(s) /\n    public Ban[] getAllBans(BanType banType) {\n        List<Ban> typeBans = new ArrayList<Ban>();\n\n        for (Ban b : bans) {\n            if (b.getBanType() == banType) {\n                typeBans.add(b);\n            }\n        }\n\n        Ban[] retT = {};\n        return typeBans.toArray(retT);\n    }\n\n    /** Take a string and parse an amount of seconds. A String should be formatted like this: number hours|days|months Ex: 1 month and it will return the amount of seconds that contain one month","long amount of seconds /\n    private long parseTimeSpec(String ts) throws NumberFormatException {\n        String[] split = ts.split(\" \");\n\n        if (split.length < 2) {\n            return -1;\n        }\n        long seconds = Integer.parseInt(split[0]);\n\n        if (split[1].toLowerCase().startsWith(\"hour\")) {\n            seconds = 3600;\n        }\n        else if (split[1].toLowerCase().startsWith(\"day\")) {\n            seconds = 86400;\n        }\n        else if (split[1].toLowerCase().startsWith(\"week\")) {\n            seconds = 604800;\n        }\n        else if (split[1].toLowerCase().startsWith(\"month\")) {\n            seconds = 2629743;\n        }\n        return seconds;\n    }\n\n    /** Reloads the bans from datasource"]},"scope":"public","return":"void","name":"reload","args":[]}],"imports":["io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.backbone.BackboneBans","java.util.ArrayList","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.bansystem.BanType":{"namespace":"io.wolfscript.bansystem","title":"The enum of ban types","description":"The enum of ban types","doc":{"author":["Jamie (jamierocks)"]},"name":"BanType","qualifiedname":"io.wolfscript.bansystem.BanType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"UUID","value":"","title":"A ban applied to a UUID","description":"A ban applied to a UUID","doc":{}}],"properties":[]},"io.wolfscript.channels.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.channels","description":"Classes and interfaces for namespace io.wolfscript.channels","name":"channels","qualifiedname":"io.wolfscript.channels.0","packagename":"io.wolfscript.channels","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.channels.ChannelListener","io.wolfscript.channels.ChannelManager","io.wolfscript.channels.CustomPayloadChannelException","io.wolfscript.channels.RegisteredChannelListener"],"interfaces":["io.wolfscript.channels.ChannelManagerInterface"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.channels.ChannelListener":{"namespace":"io.wolfscript.channels","title":"class ChannelListener","description":"class ChannelListener","doc":{"author":["Somners"]},"name":"ChannelListener","qualifiedname":"io.wolfscript.channels.ChannelListener","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[{"title":"Receives the input from Packet250CustomPayload on the registered channels.","description":"Receives the input from Packet250CustomPayload on the registered channels.","scope":"public","describe":"abstract","return":"void","name":"onChannelInput","args":[{"name":"channel","type":"String","description":"The name of the channel."},{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"The client who sent this byte stream."}]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.channels.ChannelManager":{"namespace":"io.wolfscript.channels","title":"This class manages incoming and outgoing Packet250CustomPayload's. This allows","description":"This class manages incoming and outgoing Packet250CustomPayload's. This allows custom communication between the client and server. <br> <br> <b>NOTE:</b><br> - Channel names must be 20 characters long or less.<br> - Byte data can be no larger than 32 kb.<br> - Neither the channel, plugin, listener, player or byte[] can be null in any case.<br> - The channels 'REGISTER' and 'UNREGISTER' are reserved by the server and invalid.<br> - no name or and empty String is an invalid channel name.<br> - To register and unregister the client, send packets with the names 'REGISTER' and 'UNREGISTER' respectively, with a message of the actual channel name to register/unregister.<br>","doc":{"author":["Somners"]},"name":"ChannelManager","qualifiedname":"io.wolfscript.channels.ChannelManager","type":"class","scope":"public","describe":"abstract","implements":["io.wolfscript.channels.ChannelManagerInterface"],"constructors":[],"methods":[{"title":"{@inheritDoc}","description":"{@inheritDoc} /\n    @Override\n    public void registerListener(Plugin plugin, String channel, ChannelListener listener) {\n        try {\n            if (plugin == null) {\n                throw new CustomPayloadChannelException(\"Invalid Registered Listener: Plugin is null.\");\n            }\n            if (channel == null || channel.trim().equals(\"\") || channel.equalsIgnoreCase(\"REGISTER\") || channel.equalsIgnoreCase(\"UNREGISTER\")) {\n                throw new CustomPayloadChannelException(String.format(\"Invalid Registered Listener: Invalid channel name of '%s'\", channel));\n            }\n            if (channel.length() > 20) {\n                throw new CustomPayloadChannelException(String.format(\"Invalid Custom Payload: Channel Name too long '%s'\", channel));\n            }\n            if (listener == null) {\n                throw new CustomPayloadChannelException(\"Invalid Registered Listener: Channel Listener is null.\");\n            }\n\n            synchronized (listener) {\n                listeners.put(channel, new RegisteredChannelListener(plugin, listener));\n            }\n        }\n        catch (CustomPayloadChannelException ex) {\n            log.error(ex.getMessage(), ex);\n        }\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public boolean unregisterListeners(Plugin plugin) {\n        boolean toRet = false;\n        synchronized (listeners) {\n            Iterator<RegisteredChannelListener> itr = listeners.values().iterator();\n            while (itr.hasNext()) {\n                if (itr.next().getPlugin().equals(plugin)) {\n                    itr.remove();\n                    toRet = true;\n                }\n            }\n        }\n        return toRet;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public abstract boolean sendCustomPayloadToAllPlayers(String channel, byte[] bytestream);\n\n    /** {@inheritDoc} /\n    @Override\n    public abstract boolean sendCustomPayloadToPlayer(String channel, byte[] bytestream, Player player);\n\n    /** {@inheritDoc} /\n    @Override\n    public void sendCustomPayloadToListeners(String channel, byte[] byteStream, Player player) {\n        if (listeners.containsKey(channel)) {\n            for (RegisteredChannelListener listener : listeners.get(channel)) {\n                listener.getChannelListener().onChannelInput(channel, player, byteStream);\n            }\n        }\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public void registerClient(String channel, NetServerHandler handler) {\n        try {\n            if (handler == null) {\n                throw new CustomPayloadChannelException(\"Invalid Registered Client: NetServerHandler is null.\");\n            }\n            synchronized (clients) {\n                clients.put(channel, handler);\n            }\n        }\n        catch (CustomPayloadChannelException ex) {\n            log.error(ex.getMessage(), ex);\n        }\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public boolean unregisterClient(String channel, NetServerHandler handler) {\n        synchronized (clients) {\n            if (clients.containsKey(channel) && clients.get(channel).remove(handler)) {\n                log.info(String.format(\"Client Custom Payload channel '%s' has been unregistered for client '%s'\", channel, handler.getUser().getName()));\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** {@inheritDoc}","doc":{},"scope":"public","return":"boolean","name":"unregisterClientAll","args":[{"name":"handler","type":"io.wolfscript.api.NetServerHandler","description":"handler argument"}]}],"imports":["com.google.common.collect.ArrayListMultimap","io.wolfscript.api.NetServerHandler","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.plugin.Plugin","java.util.Iterator","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.channels.ChannelManagerInterface":{"namespace":"io.wolfscript.channels","title":"interface ChannelManagerInterface","description":"interface ChannelManagerInterface","doc":{"author":["Somners"]},"name":"ChannelManagerInterface","qualifiedname":"io.wolfscript.channels.ChannelManagerInterface","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.NetServerHandler","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.plugin.Plugin"],"properties":[]},"io.wolfscript.channels.CustomPayloadChannelException":{"namespace":"io.wolfscript.channels","title":"class CustomPayloadChannelException","description":"class CustomPayloadChannelException","doc":{"author":["Somners"]},"name":"CustomPayloadChannelException","qualifiedname":"io.wolfscript.channels.CustomPayloadChannelException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"CustomPayloadChannelException constructor","description":"CustomPayloadChannelException constructor","scope":"public","name":"CustomPayloadChannelException","args":[{"name":"message","type":"String","description":"message argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.channels.RegisteredChannelListener":{"namespace":"io.wolfscript.channels","title":"class RegisteredChannelListener","description":"class RegisteredChannelListener","doc":{"author":["Somners"]},"name":"RegisteredChannelListener","qualifiedname":"io.wolfscript.channels.RegisteredChannelListener","type":"class","scope":"public","constructors":[{"title":"RegisteredChannelListener constructor","description":"RegisteredChannelListener constructor","scope":"public","name":"RegisteredChannelListener","args":[{"name":"plugin","type":"io.wolfscript.plugin.Plugin","description":"plugin argument"},{"name":"listener","type":"io.wolfscript.channels.ChannelListener","description":"listener argument"}]}],"methods":[],"imports":["io.wolfscript.plugin.Plugin"],"properties":[{"name":"ChannelListener","modifier":"readonly","args":[],"description":"Get: Get the plugin associated with this registered channel listener.","doc":{"return":["plugin /\n    public Plugin getPlugin() {\n        return this.plugin;\n    }\n\n    /** Get the ChannelListener instance associated with this registered channel listener.","{@link io.wolfscript.channels.ChannelListener}"]},"return":"io.wolfscript.channels.ChannelListener","scope":"public","title":"Get: Get the plugin associated with this registered channel listener."}]},"io.wolfscript.chat.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.chat","description":"Classes and interfaces for namespace io.wolfscript.chat","name":"chat","qualifiedname":"io.wolfscript.chat.0","packagename":"io.wolfscript.chat","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.chat.Colors","io.wolfscript.chat.TextFormat"],"interfaces":["io.wolfscript.chat.MessageReceiver"],"enums":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.ReceiverType"],"namespaces":[],"properties":[]},"io.wolfscript.chat.ChatFormat":{"namespace":"io.wolfscript.chat","title":"Enum containing all chat styles and colors.","description":"Enum containing all chat styles and colors.","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChatFormat","qualifiedname":"io.wolfscript.chat.ChatFormat","type":"enum","scope":"public","constructors":[],"methods":[{"title":"<b>MARKER §</b>","description":"<b>MARKER §</b> /\n    MARKER('\\u00A7'),\n\n    /** <FONT COLOR=000000><b>BLACK</b></FONT> /\n    BLACK('0'),\n\n    /** <font color=\"000066\"><b>DARK_BLUE</b></font> /\n    DARK_BLUE('1'),\n\n    /** <font color=\"006600\"><b>DARK_GREEN</b></font> /\n    DARK_GREEN('2'),\n\n    /** <font color=\"006666\"><b>DARK_AQUA</b></font> /\n    DARK_AQUA('3'),\n\n    /** <font color=\"990000\"><b>DARK_RED</b></font> /\n    DARK_RED('4'),\n\n    /** <font color=\"540054\"><b>DARK_PURPLE</b></font> /\n    DARK_PURPLE('5'),\n\n    /** <font color=\"FF9933\"><b>GOLD</b></font> /\n    GOLD('6'),\n\n    /** <font color=\"CCCCCC\"><b>GRAY</b></font> /\n    GRAY('7'),\n\n    /** <font color=\"333333\"><b>DARK_GRAY</b></font> /\n    DARK_GRAY('8'),\n\n    /** <font color=\"2A2A7F\"><b>BLUE</b></font> /\n    BLUE('9'),\n\n    /** <font color=\"33FF33\"><b>GREEN</b></font> /\n    GREEN('A'),\n\n    /** <font color=\"00FFFF\"><b>AQUA</b></font> /\n    AQUA('B'),\n\n    /** <font color=\"FF0022\"><b>RED</b></font> /\n    RED('C'),\n\n    /** <font color=\"FF00FF\"><b>LIGHT_PURPLE</b></font> /\n    LIGHT_PURPLE('D'),\n\n    /** <font color=\"FFFF00\"><b>YELLOW</b></font> /\n    YELLOW('E'),\n\n    /** <font color=\"000000\"><b>WHITE</b></font> /\n    WHITE('F'),\n\n    /** <b>OBFUSCATED</b> /\n    OBFUSCATED('K'),\n\n    /** <b>BOLD</b> /\n    BOLD('L'),\n\n    /** <s>STRIKED</s> /\n    STRIKED('M'),\n\n    /** <u>UNDERLINED</u> /\n    UNDERLINED('N'),\n\n    /** <i>ITALIC</i> /\n    ITALIC('O'),\n\n    /** RESET /\n    RESET('R');\n\n    private final char code;\n\n    private ChatFormat(char code) {\n        this.code = code;\n    }\n\n    public final String concat(String str) {\n        if (this == MARKER) {\n            return stringValue().concat(str);\n        }\n        else {\n            return toString().concat(str);\n        }\n    }\n\n    public final String concat(ChatFormat format) {\n        if (this == MARKER) {\n            return stringValue().concat(format.toString());\n        }\n        else {\n            return toString().concat(format.toString());\n        }\n    }\n\n    /** Returns the char value of the {@code ChatFormat}","doc":{"return":["char value of the {@code ChatFormat} /\n    public final char charValue() {\n        return code;\n    }\n\n    /** Returns the {@code ChatFormat} as a {@link String}","String value of {@code ChatFormat} /\n    public final String stringValue() {\n        return String.valueOf(code);\n    }\n\n    /** Returns a string of the {@code ChatFormat}<br> If the {@code ChatFormat} is that other than {@code MARKER} then {@code MARKER} is appended to the front.","{@code MARKER} or {@code MARKER} + code /\n    public final String toString() {\n        if (this == MARKER) {\n            return String.valueOf(code);\n        }\n        else {\n            return MARKER.concat(stringValue());\n        }\n    }\n\n    /** removes all color formatting from a line","str with formatting removed /\n    public static String removeFormatting(String str) {\n        return str.replaceAll(\"(?i)\\u00A7[a-fk-nr0-9]\", \"\");\n    }\n\n    /** Formats a given {@link String} by replacing the specified marker with the Section Symbol (§)","the formatted {@link String} /\n    public static String formatString(String str, String marker) {\n        marker = marker.replaceAll(\"(\\\\$|\\\\^|\\\\.|\\\\*|\\\\?|\\\\+)\", \"\\\\\\\\$1\");// Clean the string of anything that could disrupt the regex\n        return str.replaceAll(\"(?i)\" + marker + \"([a-fk-nr0-9])\", MARKER.concat(\"$1\"));\n    }\n\n    /** Replaces all Color formatting with an & symbol","the formatted text"]},"scope":"public","describe":"final","return":"String","name":"consoleFormat","args":[{"name":"text","type":"String","description":"the text to be formatted"}]}],"imports":[],"enum":[{"code":"RESET","value":"'R'","title":"<b>MARKER §</b>","description":"<b>MARKER §</b> /\n    MARKER('\\u00A7'),\n\n    /** <FONT COLOR=000000><b>BLACK</b></FONT> /\n    BLACK('0'),\n\n    /** <font color=\"000066\"><b>DARK_BLUE</b></font> /\n    DARK_BLUE('1'),\n\n    /** <font color=\"006600\"><b>DARK_GREEN</b></font> /\n    DARK_GREEN('2'),\n\n    /** <font color=\"006666\"><b>DARK_AQUA</b></font> /\n    DARK_AQUA('3'),\n\n    /** <font color=\"990000\"><b>DARK_RED</b></font> /\n    DARK_RED('4'),\n\n    /** <font color=\"540054\"><b>DARK_PURPLE</b></font> /\n    DARK_PURPLE('5'),\n\n    /** <font color=\"FF9933\"><b>GOLD</b></font> /\n    GOLD('6'),\n\n    /** <font color=\"CCCCCC\"><b>GRAY</b></font> /\n    GRAY('7'),\n\n    /** <font color=\"333333\"><b>DARK_GRAY</b></font> /\n    DARK_GRAY('8'),\n\n    /** <font color=\"2A2A7F\"><b>BLUE</b></font> /\n    BLUE('9'),\n\n    /** <font color=\"33FF33\"><b>GREEN</b></font> /\n    GREEN('A'),\n\n    /** <font color=\"00FFFF\"><b>AQUA</b></font> /\n    AQUA('B'),\n\n    /** <font color=\"FF0022\"><b>RED</b></font> /\n    RED('C'),\n\n    /** <font color=\"FF00FF\"><b>LIGHT_PURPLE</b></font> /\n    LIGHT_PURPLE('D'),\n\n    /** <font color=\"FFFF00\"><b>YELLOW</b></font> /\n    YELLOW('E'),\n\n    /** <font color=\"000000\"><b>WHITE</b></font> /\n    WHITE('F'),\n\n    /** <b>OBFUSCATED</b> /\n    OBFUSCATED('K'),\n\n    /** <b>BOLD</b> /\n    BOLD('L'),\n\n    /** <s>STRIKED</s> /\n    STRIKED('M'),\n\n    /** <u>UNDERLINED</u> /\n    UNDERLINED('N'),\n\n    /** <i>ITALIC</i> /\n    ITALIC('O'),\n\n    /** RESET","doc":{}}],"properties":[]},"io.wolfscript.chat.Colors":{"namespace":"io.wolfscript.chat","title":"Class containing all possible chat colors. This is kind of legacy support!","description":"Class containing all possible chat colors. This is kind of legacy support!","doc":{"author":["Jason (darkdiplomat)","James"],"deprecated":["use {@link ChatFormat} instead"]},"name":"Colors","qualifiedname":"io.wolfscript.chat.Colors","deprecated":true,"type":"class","scope":"public","constructors":[],"fields":[{"title":"BLACK field","description":"BLACK field","name":"BLACK","scope":"public","type":"String","describe":"static final"},{"title":"DARK field","description":"DARK field","name":"DARK","scope":"public","type":"String","describe":"static final"},{"title":"GREEN field","description":"GREEN field","name":"GREEN","scope":"public","type":"String","describe":"static final"},{"title":"TURQUIOSE field","description":"TURQUIOSE field","name":"TURQUIOSE","scope":"public","type":"String","describe":"static final"},{"title":"RED field","description":"RED field","name":"RED","scope":"public","type":"String","describe":"static final"},{"title":"PURPLE field","description":"PURPLE field","name":"PURPLE","scope":"public","type":"String","describe":"static final"},{"title":"ORANGE field","description":"ORANGE field","name":"ORANGE","scope":"public","type":"String","describe":"static final"},{"title":"LIGHT field","description":"LIGHT field","name":"LIGHT","scope":"public","type":"String","describe":"static final"},{"title":"GRAY field","description":"GRAY field","name":"GRAY","scope":"public","type":"String","describe":"static final"},{"title":"BLUE field","description":"BLUE field","name":"BLUE","scope":"public","type":"String","describe":"static final"},{"title":"LIGHT field","description":"LIGHT field","name":"LIGHT","scope":"public","type":"String","describe":"static final"},{"title":"CYAN field","description":"CYAN field","name":"CYAN","scope":"public","type":"String","describe":"static final"},{"title":"LIGHT field","description":"LIGHT field","name":"LIGHT","scope":"public","type":"String","describe":"static final"},{"title":"PINK field","description":"PINK field","name":"PINK","scope":"public","type":"String","describe":"static final"},{"title":"YELLOW field","description":"YELLOW field","name":"YELLOW","scope":"public","type":"String","describe":"static final"},{"title":"WHITE field","description":"WHITE field","name":"WHITE","scope":"public","type":"String","describe":"static final"},{"title":"MARKER field","description":"MARKER field","name":"MARKER","scope":"public","type":"String","describe":"static final"}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.chat.MessageReceiver":{"namespace":"io.wolfscript.chat","title":"Callback interface for commands.","description":"Callback interface for commands.","doc":{"author":["Willem (l4mRh4X0r)","Larry1123","Jason (darkdiplomat)"]},"name":"MessageReceiver","qualifiedname":"io.wolfscript.chat.MessageReceiver","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.CommandBlockLogic","io.wolfscript.api.Server","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.living.humanoid.Player"],"properties":[]},"io.wolfscript.chat.ReceiverType":{"namespace":"io.wolfscript.chat","title":"Message Receiver Types","description":"Message Receiver Types","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReceiverType","qualifiedname":"io.wolfscript.chat.ReceiverType","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"SERVER","value":"","title":"SERVER ReceiverType","description":"SERVER ReceiverType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"PLAYER","value":"","title":"PLAYER ReceiverType","description":"PLAYER ReceiverType","doc":{"author":["Jason Jones (darkdiplomat)"]}},{"code":"COMMANDBLOCK","value":"","title":"COMMANDBLOCK ReceiverType","description":"COMMANDBLOCK ReceiverType","doc":{"author":["Jason Jones (darkdiplomat)"]}}],"properties":[]},"io.wolfscript.chat.TextFormat":{"namespace":"io.wolfscript.chat","title":"This class contains James' color list and additionally formatting options for","description":"This class contains James' color list and additionally formatting options for underlining, bolding, striking text etc etc","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","James"],"deprecated":["use {@link ChatFormat} instead."]},"name":"TextFormat","qualifiedname":"io.wolfscript.chat.TextFormat","deprecated":true,"type":"class","scope":"public","extends":["io.wolfscript.chat.Colors"],"constructors":[],"fields":[{"title":"The character sequence to make the following text bold.","description":"The character sequence to make the following text bold. /\n    public static final String BOLD = \"\\u00A7l\";\n\n    /** The character seqence to make the following text striked. /\n    public static final String STRIKE = \"\\u00A7m\";\n\n    /** The characted sequence to make the following text underlined. /\n    public static final String UNDERLINED = \"\\u00A7n\";\n\n    /** The character sequence to make the following text italic. /\n    public static final String ITALICS = \"\\u00A7o\";\n\n    /** The character sequence to display everything as completely random /\n    public static final String RANDOM = \"\\u00A7k\";\n    /** The character sequence to create a new line of text /\n    public static final String NEW_LINE = \"\\n\";\n\n    /** The character sequence to reset all text formatting.","doc":{},"name":"RESET","scope":"public","type":"String","describe":"static final"}],"methods":[{"title":"The character sequence to make the following text bold.","description":"The character sequence to make the following text bold. /\n    public static final String BOLD = \"\\u00A7l\";\n\n    /** The character seqence to make the following text striked. /\n    public static final String STRIKE = \"\\u00A7m\";\n\n    /** The characted sequence to make the following text underlined. /\n    public static final String UNDERLINED = \"\\u00A7n\";\n\n    /** The character sequence to make the following text italic. /\n    public static final String ITALICS = \"\\u00A7o\";\n\n    /** The character sequence to display everything as completely random /\n    public static final String RANDOM = \"\\u00A7k\";\n    /** The character sequence to create a new line of text /\n    public static final String NEW_LINE = \"\\n\";\n\n    /** The character sequence to reset all text formatting. /\n    public static final String RESET = \"\\u00A7r\";\n\n    /** Removes all minecraft-style formatting from <tt>text</tt>.","doc":{"return":["<tt>text</tt> with all color/style tags stripped. /\n    public static final String removeFormatting(String text) {\n        return text.replaceAll(\"\\u00A7[A-FK-NRa-fk-nr0-9]\", \"\");\n    }\n\n    /** Replaces all Color formatting with an & symbol","the formatted text /\n    public static final String consoleFormat(String text) {\n        return text.replaceAll(\"\\u00A7([A-FK-NRa-fk-nr0-9])\", \"&$1\");\n    }\n\n    /** Gets the last Color of a String","the last Color"]},"scope":"public","describe":"static","return":"String","name":"getLastColor","args":[{"name":"input","type":"String","description":"the string to get the last color for"}]}],"imports":[],"properties":[]},"io.wolfscript.commandsys.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.commandsys","description":"Classes and interfaces for namespace io.wolfscript.commandsys","name":"commandsys","qualifiedname":"io.wolfscript.commandsys.0","packagename":"io.wolfscript.commandsys","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.CommandDependencyException","io.wolfscript.commandsys.CommandException","io.wolfscript.commandsys.CommandList","io.wolfscript.commandsys.CommandManager","io.wolfscript.commandsys.DuplicateCommandException","io.wolfscript.commandsys.DynamicCommandAnnotation","io.wolfscript.commandsys.DynamicTabCompleteAnnotation","io.wolfscript.commandsys.TabCompleteException","io.wolfscript.commandsys.TabCompleteHelper","io.wolfscript.commandsys.WolfCommand"],"interfaces":["io.wolfscript.commandsys.CommandListener","io.wolfscript.commandsys.CommandOwner","io.wolfscript.commandsys.NativeCommand","io.wolfscript.commandsys.PlayerSelector","io.wolfscript.commandsys.TabCompleteDispatch"],"enums":["io.wolfscript.commandsys.WolfCommandPermissions"],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.CommandDependencyException":{"namespace":"io.wolfscript.commandsys","title":"Thrown when a commands parent command is not registered upon attempting","description":"Thrown when a commands parent command is not registered upon attempting to register the child command","doc":{"author":["Chris (damagefilter)"]},"name":"CommandDependencyException","qualifiedname":"io.wolfscript.commandsys.CommandDependencyException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"CommandDependencyException constructor","description":"CommandDependencyException constructor","scope":"public","name":"CommandDependencyException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.CommandException":{"namespace":"io.wolfscript.commandsys","title":"General catch-all class for exceptions that occur in commands.","description":"General catch-all class for exceptions that occur in commands.","doc":{"author":["Willem (l4mRh4X0r)"]},"name":"CommandException","qualifiedname":"io.wolfscript.commandsys.CommandException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"Constructs a new command exception with the specified cause and a","description":"Constructs a new command exception with the specified cause and a detail message of <tt>(cause==null ? null : cause.toString())</tt> (which typically contains the class and detail message of <tt>cause</tt>). Used to wrap exceptions that commands throw.","scope":"public","name":"CommandException","args":[{"name":"msg","type":"String","description":"the detail message."}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.CommandList":{"namespace":"io.wolfscript.commandsys","title":"Wolf \"native\" commands","description":"Wolf \"native\" commands","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)","Aaron (somners)"]},"name":"CommandList","qualifiedname":"io.wolfscript.commandsys.CommandList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.CommandListener"],"constructors":[],"methods":[{"title":"whitelistAddCommand method","description":"whitelistAddCommand method","scope":"public","return":"void","name":"whitelistAddCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupBase method","description":"groupBase method","scope":"public","return":"void","name":"groupBase","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupAdd method","description":"groupAdd method","scope":"public","return":"void","name":"groupAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"deleteworldTabComplete method","description":"deleteworldTabComplete method","scope":"public","return":"List<String>","name":"deleteworldTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"deleteworld method","description":"deleteworld method","scope":"public","return":"void","name":"deleteworld","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"createWorldTabComplete method","description":"createWorldTabComplete method","scope":"public","return":"List<String>","name":"createWorldTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"createWorld method","description":"createWorld method","scope":"public","return":"void","name":"createWorld","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"delWarpCommand method","description":"delWarpCommand method","scope":"public","return":"void","name":"delWarpCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"give method","description":"give method","scope":"public","return":"void","name":"give","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"gamerule method","description":"gamerule method","scope":"public","return":"void","name":"gamerule","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"gamemode method","description":"gamemode method","scope":"public","return":"void","name":"gamemode","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"fill method","description":"fill method","scope":"public","return":"void","name":"fill","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"entitydata method","description":"entitydata method","scope":"public","return":"void","name":"entitydata","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"enchant method","description":"enchant method","scope":"public","return":"void","name":"enchant","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"emote method","description":"emote method","scope":"public","return":"void","name":"emote","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"effect method","description":"effect method","scope":"public","return":"void","name":"effect","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"difficulty method","description":"difficulty method","scope":"public","return":"void","name":"difficulty","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"defaultspawnpoint method","description":"defaultspawnpoint method","scope":"public","return":"void","name":"defaultspawnpoint","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"defaultgamemode method","description":"defaultgamemode method","scope":"public","return":"void","name":"defaultgamemode","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"compassCommand method","description":"compassCommand method","scope":"public","return":"void","name":"compassCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"getPosCommand method","description":"getPosCommand method","scope":"public","return":"void","name":"getPosCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"godCommand method","description":"godCommand method","scope":"public","return":"void","name":"godCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"debug method","description":"debug method","scope":"public","return":"void","name":"debug","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"clone method","description":"clone method","scope":"public","return":"void","name":"clone","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"clear method","description":"clear method","scope":"public","return":"void","name":"clear","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"broadcast method","description":"broadcast method","scope":"public","return":"void","name":"broadcast","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"blockdata method","description":"blockdata method","scope":"public","return":"void","name":"blockdata","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"achievement method","description":"achievement method","scope":"public","return":"void","name":"achievement","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"disablePluginCommand method","description":"disablePluginCommand method","scope":"public","return":"void","name":"disablePluginCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"enablePluginCommand method","description":"enablePluginCommand method","scope":"public","return":"void","name":"enablePluginCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"deopTabComplete method","description":"deopTabComplete method","scope":"public","return":"List<String>","name":"deopTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"deop method","description":"deop method","scope":"public","return":"void","name":"deop","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"createVanillaCommand method","description":"createVanillaCommand method","scope":"public","return":"void","name":"createVanillaCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"banTabComplete method","description":"banTabComplete method","scope":"public","return":"List<String>","name":"banTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"banCommand method","description":"banCommand method","scope":"public","return":"void","name":"banCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupCheck method","description":"groupCheck method","scope":"public","return":"void","name":"groupCheck","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchOnlinePlayer method","description":"matchOnlinePlayer method","scope":"public","return":"List<String>","name":"matchOnlinePlayer","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchKnownPlayer method","description":"matchKnownPlayer method","scope":"public","return":"List<String>","name":"matchKnownPlayer","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"loadWorld method","description":"loadWorld method","scope":"public","return":"void","name":"loadWorld","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupmodAddTabComplete method","description":"groupmodAddTabComplete method","scope":"public","return":"List<String>","name":"groupmodAddTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPerms method","description":"groupPerms method","scope":"public","return":"void","name":"groupPerms","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupmodPermissionTabComplete method","description":"groupmodPermissionTabComplete method","scope":"public","return":"List<String>","name":"groupmodPermissionTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPermissionsAdd method","description":"groupPermissionsAdd method","scope":"public","return":"void","name":"groupPermissionsAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPermissionsRemove method","description":"groupPermissionsRemove method","scope":"public","return":"void","name":"groupPermissionsRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"listWarpsCommand method","description":"listWarpsCommand method","scope":"public","return":"void","name":"listWarpsCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"homeCommand method","description":"homeCommand method","scope":"public","return":"void","name":"homeCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPermissionsCheck method","description":"groupPermissionsCheck method","scope":"public","return":"void","name":"groupPermissionsCheck","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupmodPermissionAddRemoveCheckTabComplete method","description":"groupmodPermissionAddRemoveCheckTabComplete method","scope":"public","return":"List<String>","name":"groupmodPermissionAddRemoveCheckTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPermissionsList method","description":"groupPermissionsList method","scope":"public","return":"void","name":"groupPermissionsList","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"helpCommand method","description":"helpCommand method","scope":"public","return":"void","name":"helpCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"ipBanCommand method","description":"ipBanCommand method","scope":"public","return":"void","name":"ipBanCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kickCommand method","description":"kickCommand method","scope":"public","return":"void","name":"kickCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitCommand method","description":"kitCommand method","scope":"public","return":"void","name":"kitCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitCreateCommand method","description":"kitCreateCommand method","scope":"public","return":"void","name":"kitCreateCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitGiveCommand method","description":"kitGiveCommand method","scope":"public","return":"void","name":"kitGiveCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitListCommand method","description":"kitListCommand method","scope":"public","return":"void","name":"kitListCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitDeleteCommand method","description":"kitDeleteCommand method","scope":"public","return":"void","name":"kitDeleteCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"kitTabComplete method","description":"kitTabComplete method","scope":"public","return":"List<String>","name":"kitTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"listPluginsCommand method","description":"listPluginsCommand method","scope":"public","return":"void","name":"listPluginsCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupFlush method","description":"groupFlush method","scope":"public","return":"void","name":"groupFlush","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupList method","description":"groupList method","scope":"public","return":"void","name":"groupList","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupRemove method","description":"groupRemove method","scope":"public","return":"void","name":"groupRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupRename method","description":"groupRename method","scope":"public","return":"void","name":"groupRename","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupPrefix method","description":"groupPrefix method","scope":"public","return":"void","name":"groupPrefix","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupParent method","description":"groupParent method","scope":"public","return":"void","name":"groupParent","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupmodParentTabComplete method","description":"groupmodParentTabComplete method","scope":"public","return":"List<String>","name":"groupmodParentTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"killCommand method","description":"killCommand method","scope":"public","return":"void","name":"killCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"groupBaseTabComplete method","description":"groupBaseTabComplete method","scope":"public","return":"List<String>","name":"groupBaseTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"spawnpoint method","description":"spawnpoint method","scope":"public","return":"void","name":"spawnpoint","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchPluginName method","description":"matchPluginName method","scope":"public","return":"List<String>","name":"matchPluginName","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"spreadplayers method","description":"spreadplayers method","scope":"public","return":"void","name":"spreadplayers","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerRemove method","description":"playerRemove method","scope":"public","return":"void","name":"playerRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupSet method","description":"playerGroupSet method","scope":"public","return":"void","name":"playerGroupSet","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobspawnerTabComplete method","description":"mobspawnerTabComplete method","scope":"public","return":"List<String>","name":"mobspawnerTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobspawnercheck method","description":"mobspawnercheck method","scope":"public","return":"void","name":"mobspawnercheck","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobspawnerset method","description":"mobspawnerset method","scope":"public","return":"void","name":"mobspawnerset","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobspawner method","description":"mobspawner method","scope":"public","return":"void","name":"mobspawner","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobTabComplete method","description":"mobTabComplete method","scope":"public","return":"List<String>","name":"mobTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobcount method","description":"mobcount method","scope":"public","return":"void","name":"mobcount","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mobclear method","description":"mobclear method","scope":"public","return":"void","name":"mobclear","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"mob method","description":"mob method","scope":"public","return":"void","name":"mob","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchWorldNameDimension method","description":"matchWorldNameDimension method","scope":"public","return":"List<String>","name":"matchWorldNameDimension","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupAdd method","description":"playerGroupAdd method","scope":"public","return":"void","name":"playerGroupAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupList method","description":"playerGroupList method","scope":"public","return":"void","name":"playerGroupList","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupCheck method","description":"playerGroupCheck method","scope":"public","return":"void","name":"playerGroupCheck","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupRemove method","description":"playerGroupRemove method","scope":"public","return":"void","name":"playerGroupRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchWarpNames method","description":"matchWarpNames method","scope":"public","return":"List<String>","name":"matchWarpNames","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPrefix method","description":"playerPrefix method","scope":"public","return":"void","name":"playerPrefix","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPermissions method","description":"playerPermissions method","scope":"public","return":"void","name":"playerPermissions","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerAddTabComplete method","description":"playerAddTabComplete method","scope":"public","return":"List<String>","name":"playerAddTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerAdd method","description":"playerAdd method","scope":"public","return":"void","name":"playerAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerBaseTabComplete method","description":"playerBaseTabComplete method","scope":"public","return":"List<String>","name":"playerBaseTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerBase method","description":"playerBase method","scope":"public","return":"void","name":"playerBase","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPermissionsAdd method","description":"playerPermissionsAdd method","scope":"public","return":"void","name":"playerPermissionsAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchToGroupTabComplete method","description":"matchToGroupTabComplete method","scope":"public","return":"List<String>","name":"matchToGroupTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPermissionsRemove method","description":"playerPermissionsRemove method","scope":"public","return":"void","name":"playerPermissionsRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerListCommand method","description":"playerListCommand method","scope":"public","return":"void","name":"playerListCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroupTabComplete method","description":"playerGroupTabComplete method","scope":"public","return":"List<String>","name":"playerGroupTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"oplist method","description":"oplist method","scope":"public","return":"void","name":"oplist","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerGroup method","description":"playerGroup method","scope":"public","return":"void","name":"playerGroup","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"op method","description":"op method","scope":"public","return":"void","name":"op","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"muteCommand method","description":"muteCommand method","scope":"public","return":"void","name":"muteCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"motdCommand method","description":"motdCommand method","scope":"public","return":"void","name":"motdCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"matchWorldNamePlayerName method","description":"matchWorldNamePlayerName method","scope":"public","return":"List<String>","name":"matchWorldNamePlayerName","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPermissionsCheck method","description":"playerPermissionsCheck method","scope":"public","return":"void","name":"playerPermissionsCheck","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerPermissionsList method","description":"playerPermissionsList method","scope":"public","return":"void","name":"playerPermissionsList","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"message method","description":"message method","scope":"public","return":"void","name":"message","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"messageraw method","description":"messageraw method","scope":"public","return":"void","name":"messageraw","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"particle method","description":"particle method","scope":"public","return":"void","name":"particle","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistTabComplete method","description":"whitelistTabComplete method","scope":"public","return":"List<String>","name":"whitelistTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playsound method","description":"playsound method","scope":"public","return":"void","name":"playsound","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playermodGroupAddRemoveSet method","description":"playermodGroupAddRemoveSet method","scope":"public","return":"List<String>","name":"playermodGroupAddRemoveSet","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playerinfo method","description":"playerinfo method","scope":"public","return":"void","name":"playerinfo","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"playermodPermissionRemove method","description":"playermodPermissionRemove method","scope":"public","return":"List<String>","name":"playermodPermissionRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistReloadCommand method","description":"whitelistReloadCommand method","scope":"public","return":"void","name":"whitelistReloadCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reservelistCommand method","description":"reservelistCommand method","scope":"public","return":"void","name":"reservelistCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reloadCommand method","description":"reloadCommand method","scope":"public","return":"void","name":"reloadCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reservelistAdd method","description":"reservelistAdd method","scope":"public","return":"void","name":"reservelistAdd","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reloadPluginCommand method","description":"reloadPluginCommand method","scope":"public","return":"void","name":"reloadPluginCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"replaceitem method","description":"replaceitem method","scope":"public","return":"void","name":"replaceitem","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldCreate method","description":"worldCreate method","scope":"public","return":"void","name":"worldCreate","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"scoreboard method","description":"scoreboard method","scope":"public","return":"void","name":"scoreboard","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reservelistRemove method","description":"reservelistRemove method","scope":"public","return":"void","name":"reservelistRemove","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reservelistShow method","description":"reservelistShow method","scope":"public","return":"void","name":"reservelistShow","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"reservelistTabComplete method","description":"reservelistTabComplete method","scope":"public","return":"List<String>","name":"reservelistTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"saveall method","description":"saveall method","scope":"public","return":"void","name":"saveall","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"saveoff method","description":"saveoff method","scope":"public","return":"void","name":"saveoff","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"saveon method","description":"saveon method","scope":"public","return":"void","name":"saveon","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistShowCommand method","description":"whitelistShowCommand method","scope":"public","return":"void","name":"whitelistShowCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"teleport method","description":"teleport method","scope":"public","return":"void","name":"teleport","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"stopCommand method","description":"stopCommand method","scope":"public","return":"void","name":"stopCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"sysinfo method","description":"sysinfo method","scope":"public","return":"void","name":"sysinfo","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"spawnCommand method","description":"spawnCommand method","scope":"public","return":"void","name":"spawnCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"stats method","description":"stats method","scope":"public","return":"void","name":"stats","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"summon method","description":"summon method","scope":"public","return":"void","name":"summon","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"unloadWorld method","description":"unloadWorld method","scope":"public","return":"void","name":"unloadWorld","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"warpUse method","description":"warpUse method","scope":"public","return":"void","name":"warpUse","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"testforblock method","description":"testforblock method","scope":"public","return":"void","name":"testforblock","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"title method","description":"title method","scope":"public","return":"void","name":"title","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"testfor method","description":"testfor method","scope":"public","return":"void","name":"testfor","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"testforblocks method","description":"testforblocks method","scope":"public","return":"void","name":"testforblocks","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"time method","description":"time method","scope":"public","return":"void","name":"time","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"unbanCommand method","description":"unbanCommand method","scope":"public","return":"void","name":"unbanCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"unbanTabComplete method","description":"unbanTabComplete method","scope":"public","return":"List<String>","name":"unbanTabComplete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"uptime method","description":"uptime method","scope":"public","return":"void","name":"uptime","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"trigger method","description":"trigger method","scope":"public","return":"void","name":"trigger","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"toggledownfall method","description":"toggledownfall method","scope":"public","return":"void","name":"toggledownfall","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldDelete method","description":"worldDelete method","scope":"public","return":"void","name":"worldDelete","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"weather method","description":"weather method","scope":"public","return":"void","name":"weather","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"wolfscriptInfoCommand method","description":"wolfscriptInfoCommand method","scope":"public","return":"void","name":"wolfscriptInfoCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldLoad method","description":"worldLoad method","scope":"public","return":"void","name":"worldLoad","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistCommand method","description":"whitelistCommand method","scope":"public","return":"void","name":"whitelistCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldInfo method","description":"worldInfo method","scope":"public","return":"void","name":"worldInfo","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"world method","description":"world method","scope":"public","return":"void","name":"world","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistRemoveCommand method","description":"whitelistRemoveCommand method","scope":"public","return":"void","name":"whitelistRemoveCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldList method","description":"worldList method","scope":"public","return":"void","name":"worldList","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistDisableCommand method","description":"whitelistDisableCommand method","scope":"public","return":"void","name":"whitelistDisableCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"whitelistEnableCommand method","description":"whitelistEnableCommand method","scope":"public","return":"void","name":"whitelistEnableCommand","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldUnload method","description":"worldUnload method","scope":"public","return":"void","name":"worldUnload","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"worldborder method","description":"worldborder method","scope":"public","return":"void","name":"worldborder","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"xp method","description":"xp method","scope":"public","return":"void","name":"xp","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.commands.groupmod.GroupCheck","io.wolfscript.commandsys.commands.groupmod.GroupCreate","io.wolfscript.commandsys.commands.groupmod.GroupList","io.wolfscript.commandsys.commands.groupmod.GroupParent","io.wolfscript.commandsys.commands.groupmod.GroupPermissionAdd","io.wolfscript.commandsys.commands.groupmod.GroupPermissionCheck","io.wolfscript.commandsys.commands.groupmod.GroupPermissionFlush","io.wolfscript.commandsys.commands.groupmod.GroupPermissionList","io.wolfscript.commandsys.commands.groupmod.GroupPermissionRemove","io.wolfscript.commandsys.commands.groupmod.GroupPrefix","io.wolfscript.commandsys.commands.groupmod.GroupRemove","io.wolfscript.commandsys.commands.groupmod.GroupRename","io.wolfscript.commandsys.commands.player.Compass","io.wolfscript.commandsys.commands.player.GetPosition","io.wolfscript.commandsys.commands.player.GodCommand","io.wolfscript.commandsys.commands.playermod.PlayerCreate","io.wolfscript.commandsys.commands.playermod.PlayerGroupAdd","io.wolfscript.commandsys.commands.playermod.PlayerGroupCheck","io.wolfscript.commandsys.commands.playermod.PlayerGroupList","io.wolfscript.commandsys.commands.playermod.PlayerGroupRemove","io.wolfscript.commandsys.commands.playermod.PlayerGroupSet","io.wolfscript.commandsys.commands.playermod.PlayerPermissionAdd","io.wolfscript.commandsys.commands.playermod.PlayerPermissionCheck","io.wolfscript.commandsys.commands.playermod.PlayerPermissionList","io.wolfscript.commandsys.commands.playermod.PlayerPermissionRemove","io.wolfscript.commandsys.commands.playermod.PlayerPrefix","io.wolfscript.commandsys.commands.playermod.PlayerRemove","io.wolfscript.commandsys.commands.playermod.PlayermodBase","io.wolfscript.commandsys.commands.system.CreateVanilla","io.wolfscript.commandsys.commands.system.HelpCommand","io.wolfscript.commandsys.commands.system.Kick","io.wolfscript.commandsys.commands.system.ListPlugins","io.wolfscript.commandsys.commands.system.Motd","io.wolfscript.commandsys.commands.system.Mute","io.wolfscript.commandsys.commands.system.PlayerInformation","io.wolfscript.commandsys.commands.system.PlayerList","io.wolfscript.commandsys.commands.system.PluginCommand","io.wolfscript.commandsys.commands.system.ReloadCommand","io.wolfscript.commandsys.commands.system.StopServer","io.wolfscript.commandsys.commands.system.bans.BanCommand","io.wolfscript.commandsys.commands.system.bans.IpBanCommand","io.wolfscript.commandsys.commands.system.bans.UnbanCommand","io.wolfscript.commandsys.commands.system.informational.WolfScriptCommand","io.wolfscript.commandsys.commands.system.informational.SystemInformation","io.wolfscript.commandsys.commands.system.informational.Uptime","io.wolfscript.commandsys.commands.system.kits.KitCreate","io.wolfscript.commandsys.commands.system.kits.KitDelete","io.wolfscript.commandsys.commands.system.kits.KitGive","io.wolfscript.commandsys.commands.system.kits.KitList","io.wolfscript.commandsys.commands.system.operator.DeOp","io.wolfscript.commandsys.commands.system.operator.Op","io.wolfscript.commandsys.commands.system.operator.OpList","io.wolfscript.commandsys.commands.system.reservelist.ReservelistAdd","io.wolfscript.commandsys.commands.system.reservelist.ReservelistRemove","io.wolfscript.commandsys.commands.system.reservelist.ReservelistShow","io.wolfscript.commandsys.commands.system.whitelist.WhitelistAdd","io.wolfscript.commandsys.commands.system.whitelist.WhitelistDisable","io.wolfscript.commandsys.commands.system.whitelist.WhitelistEnable","io.wolfscript.commandsys.commands.system.whitelist.WhitelistReload","io.wolfscript.commandsys.commands.system.whitelist.WhitelistRemove","io.wolfscript.commandsys.commands.system.whitelist.WhitelistShow","io.wolfscript.commandsys.commands.vanilla.Achievement","io.wolfscript.commandsys.commands.vanilla.BlockData","io.wolfscript.commandsys.commands.vanilla.Broadcast","io.wolfscript.commandsys.commands.vanilla.Clear","io.wolfscript.commandsys.commands.vanilla.Clone","io.wolfscript.commandsys.commands.vanilla.Debug","io.wolfscript.commandsys.commands.vanilla.DefaultGameMode","io.wolfscript.commandsys.commands.vanilla.DefaultSpawnpoint","io.wolfscript.commandsys.commands.vanilla.Difficulty","io.wolfscript.commandsys.commands.vanilla.Effect","io.wolfscript.commandsys.commands.vanilla.Emote","io.wolfscript.commandsys.commands.vanilla.Enchant","io.wolfscript.commandsys.commands.vanilla.EntityData","io.wolfscript.commandsys.commands.vanilla.Execute","io.wolfscript.commandsys.commands.vanilla.Fill","io.wolfscript.commandsys.commands.vanilla.GameMode","io.wolfscript.commandsys.commands.vanilla.GameRule","io.wolfscript.commandsys.commands.vanilla.Give","io.wolfscript.commandsys.commands.vanilla.Kill","io.wolfscript.commandsys.commands.vanilla.Message","io.wolfscript.commandsys.commands.vanilla.MessageRaw","io.wolfscript.commandsys.commands.vanilla.Particle","io.wolfscript.commandsys.commands.vanilla.PlaySound","io.wolfscript.commandsys.commands.vanilla.ReplaceItem","io.wolfscript.commandsys.commands.vanilla.SaveAll","io.wolfscript.commandsys.commands.vanilla.SaveOff","io.wolfscript.commandsys.commands.vanilla.SaveOn","io.wolfscript.commandsys.commands.vanilla.Scoreboard","io.wolfscript.commandsys.commands.vanilla.SetBlock","io.wolfscript.commandsys.commands.vanilla.SpawnPoint","io.wolfscript.commandsys.commands.vanilla.SpreadPlayers","io.wolfscript.commandsys.commands.vanilla.Stats","io.wolfscript.commandsys.commands.vanilla.Summon","io.wolfscript.commandsys.commands.vanilla.Teleport","io.wolfscript.commandsys.commands.vanilla.TestFor","io.wolfscript.commandsys.commands.vanilla.TestForBlock","io.wolfscript.commandsys.commands.vanilla.TestForBlocks","io.wolfscript.commandsys.commands.vanilla.Time","io.wolfscript.commandsys.commands.vanilla.Title","io.wolfscript.commandsys.commands.vanilla.ToggleDownfall","io.wolfscript.commandsys.commands.vanilla.Trigger","io.wolfscript.commandsys.commands.vanilla.Weather","io.wolfscript.commandsys.commands.vanilla.WorldBorder","io.wolfscript.commandsys.commands.vanilla.XP","io.wolfscript.commandsys.commands.warp.Home","io.wolfscript.commandsys.commands.warp.SetHome","io.wolfscript.commandsys.commands.warp.SpawnCommand","io.wolfscript.commandsys.commands.warp.WarpList","io.wolfscript.commandsys.commands.warp.WarpRemove","io.wolfscript.commandsys.commands.warp.WarpSet","io.wolfscript.commandsys.commands.warp.WarpUse","io.wolfscript.commandsys.commands.world.CreateWorldCommand","io.wolfscript.commandsys.commands.world.DeleteWorldCommand","io.wolfscript.commandsys.commands.world.ListWorldsCommand","io.wolfscript.commandsys.commands.world.LoadWorldCommand","io.wolfscript.commandsys.commands.world.MobClear","io.wolfscript.commandsys.commands.world.MobCount","io.wolfscript.commandsys.commands.world.MobSpawnerCheck","io.wolfscript.commandsys.commands.world.MobSpawnerSet","io.wolfscript.commandsys.commands.world.UnloadWorldCommand","io.wolfscript.commandsys.commands.world.WorldInfoCommand","java.util.Collections","java.util.HashMap","java.util.List","java.util.Map","io.wolfscript.commandsys.WolfCommandPermissions.ACHIEVEMENT","io.wolfscript.commandsys.WolfCommandPermissions.BAN","io.wolfscript.commandsys.WolfCommandPermissions.BLOCKDATA","io.wolfscript.commandsys.WolfCommandPermissions.BROADCAST","io.wolfscript.commandsys.WolfCommandPermissions.CANARYMOD","io.wolfscript.commandsys.WolfCommandPermissions.CLEAR","io.wolfscript.commandsys.WolfCommandPermissions.CLONE","io.wolfscript.commandsys.WolfCommandPermissions.COMPASS","io.wolfscript.commandsys.WolfCommandPermissions.CREATEVANILLA","io.wolfscript.commandsys.WolfCommandPermissions.DEBUG","io.wolfscript.commandsys.WolfCommandPermissions.DEFAULTGAMEMODE","io.wolfscript.commandsys.WolfCommandPermissions.DIFFICULTY","io.wolfscript.commandsys.WolfCommandPermissions.EFFECT","io.wolfscript.commandsys.WolfCommandPermissions.EMOTE","io.wolfscript.commandsys.WolfCommandPermissions.ENCHANT","io.wolfscript.commandsys.WolfCommandPermissions.ENTITYDATA","io.wolfscript.commandsys.WolfCommandPermissions.EXECUTE","io.wolfscript.commandsys.WolfCommandPermissions.FILL","io.wolfscript.commandsys.WolfCommandPermissions.GAMEMODE","io.wolfscript.commandsys.WolfCommandPermissions.GAMERULE","io.wolfscript.commandsys.WolfCommandPermissions.GETPOS","io.wolfscript.commandsys.WolfCommandPermissions.GIVE","io.wolfscript.commandsys.WolfCommandPermissions.GOD","io.wolfscript.commandsys.WolfCommandPermissions.GOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.GROUPMOD","io.wolfscript.commandsys.WolfCommandPermissions.HELP","io.wolfscript.commandsys.WolfCommandPermissions.HOME","io.wolfscript.commandsys.WolfCommandPermissions.HOME","io.wolfscript.commandsys.WolfCommandPermissions.IPBAN","io.wolfscript.commandsys.WolfCommandPermissions.KICK","io.wolfscript.commandsys.WolfCommandPermissions.KILL","io.wolfscript.commandsys.WolfCommandPermissions.KILL","io.wolfscript.commandsys.WolfCommandPermissions.KIT","io.wolfscript.commandsys.WolfCommandPermissions.KIT","io.wolfscript.commandsys.WolfCommandPermissions.KIT","io.wolfscript.commandsys.WolfCommandPermissions.KIT","io.wolfscript.commandsys.WolfCommandPermissions.MESSAGE","io.wolfscript.commandsys.WolfCommandPermissions.MESSAGERAW","io.wolfscript.commandsys.WolfCommandPermissions.MOB","io.wolfscript.commandsys.WolfCommandPermissions.MOB","io.wolfscript.commandsys.WolfCommandPermissions.MOB","io.wolfscript.commandsys.WolfCommandPermissions.MOBSPAWNER","io.wolfscript.commandsys.WolfCommandPermissions.MOBSPAWNER","io.wolfscript.commandsys.WolfCommandPermissions.MOBSPAWNER","io.wolfscript.commandsys.WolfCommandPermissions.MOTD","io.wolfscript.commandsys.WolfCommandPermissions.MUTE","io.wolfscript.commandsys.WolfCommandPermissions.PARTICLE","io.wolfscript.commandsys.WolfCommandPermissions.PLAYER","io.wolfscript.commandsys.WolfCommandPermissions.PLAYER","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYERMOD","io.wolfscript.commandsys.WolfCommandPermissions.PLAYSOUND","io.wolfscript.commandsys.WolfCommandPermissions.PLUGIN","io.wolfscript.commandsys.WolfCommandPermissions.PLUGIN","io.wolfscript.commandsys.WolfCommandPermissions.PLUGIN","io.wolfscript.commandsys.WolfCommandPermissions.PLUGIN","io.wolfscript.commandsys.WolfCommandPermissions.RELOAD","io.wolfscript.commandsys.WolfCommandPermissions.REPLACEITEM","io.wolfscript.commandsys.WolfCommandPermissions.RESERVELIST","io.wolfscript.commandsys.WolfCommandPermissions.SAVE","io.wolfscript.commandsys.WolfCommandPermissions.SAVE","io.wolfscript.commandsys.WolfCommandPermissions.SAVE","io.wolfscript.commandsys.WolfCommandPermissions.SCOREBOARD","io.wolfscript.commandsys.WolfCommandPermissions.SETBLOCK","io.wolfscript.commandsys.WolfCommandPermissions.SETWORLDSPAWN","io.wolfscript.commandsys.WolfCommandPermissions.SPAWN","io.wolfscript.commandsys.WolfCommandPermissions.SPAWNPOINT","io.wolfscript.commandsys.WolfCommandPermissions.SPREADPLAYERS","io.wolfscript.commandsys.WolfCommandPermissions.STATS","io.wolfscript.commandsys.WolfCommandPermissions.STOP","io.wolfscript.commandsys.WolfCommandPermissions.SUMMON","io.wolfscript.commandsys.WolfCommandPermissions.SYSINFO","io.wolfscript.commandsys.WolfCommandPermissions.TELEPORT","io.wolfscript.commandsys.WolfCommandPermissions.TELEPORT","io.wolfscript.commandsys.WolfCommandPermissions.TESTFOR","io.wolfscript.commandsys.WolfCommandPermissions.TESTFORBLOCK","io.wolfscript.commandsys.WolfCommandPermissions.TESTFORBLOCKS","io.wolfscript.commandsys.WolfCommandPermissions.TIME","io.wolfscript.commandsys.WolfCommandPermissions.TITLE","io.wolfscript.commandsys.WolfCommandPermissions.TOGGLEDOWNFALL","io.wolfscript.commandsys.WolfCommandPermissions.TRIGGER","io.wolfscript.commandsys.WolfCommandPermissions.UNBAN","io.wolfscript.commandsys.WolfCommandPermissions.UPTIME","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WEATHER","io.wolfscript.commandsys.WolfCommandPermissions.WHITELIST","io.wolfscript.commandsys.WolfCommandPermissions.WHITELIST","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLD","io.wolfscript.commandsys.WolfCommandPermissions.WORLDBORDER","io.wolfscript.commandsys.WolfCommandPermissions.XP","io.wolfscript.commandsys.TabCompleteHelper.matchTo","io.wolfscript.commandsys.TabCompleteHelper.matchToBannedSubject","io.wolfscript.commandsys.TabCompleteHelper.matchToDimension","io.wolfscript.commandsys.TabCompleteHelper.matchToGroup","io.wolfscript.commandsys.TabCompleteHelper.matchToKitNames","io.wolfscript.commandsys.TabCompleteHelper.matchToKnownPlayer","io.wolfscript.commandsys.TabCompleteHelper.matchToKnownWorld","io.wolfscript.commandsys.TabCompleteHelper.matchToLoadedWorld","io.wolfscript.commandsys.TabCompleteHelper.matchToOnlinePlayer","io.wolfscript.commandsys.TabCompleteHelper.matchToPlayerPermission","io.wolfscript.commandsys.TabCompleteHelper.matchToWarpNames","io.wolfscript.commandsys.TabCompleteHelper.matchToWorldType"],"properties":[{"name":"HomeCommand","modifier":"writeonly","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}],"description":"HomeCommand property","return":"void","scope":"public","title":"HomeCommand property"},{"name":"block","modifier":"writeonly","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}],"description":"block property","return":"void","scope":"public","title":"block property"},{"name":"WarpCommand","modifier":"writeonly","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}],"description":"WarpCommand property","return":"void","scope":"public","title":"WarpCommand property"}]},"io.wolfscript.commandsys.CommandListener":{"namespace":"io.wolfscript.commandsys","title":"Listener interface to mark a class a command class.","description":"Listener interface to mark a class a command class.","doc":{"author":["Chris (damagefilter)"]},"name":"CommandListener","qualifiedname":"io.wolfscript.commandsys.CommandListener","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.CommandManager":{"namespace":"io.wolfscript.commandsys","title":"Manages all commands.","description":"Manages all commands. Add commands using one of the methods below.","doc":{"author":["Willem (14mRh4X0r)","Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"CommandManager","qualifiedname":"io.wolfscript.commandsys.CommandManager","type":"class","scope":"public","constructors":[],"methods":[{"title":"Remove a command from the command list.","description":"Remove a command from the command list.","doc":{"return":["<tt>true</tt> if the command was removed, <tt>false</tt> otherwise. /\n    public boolean unregisterCommand(String name) {\n\n        if (name == null) {\n            return false;\n        }\n\n        String[] commandchain = name.split(\"\\\\.\");\n        WolfCommand temp = null;\n        for (int i = 0; i < commandchain.length; i++) {\n            if (i == 0) {\n                temp = commands.get(commandchain[i]);\n            }\n            else {\n                if (temp == null) {\n                    break;\n                }\n                if (temp.hasSubCommand(commandchain[i])) {\n                    temp = temp.getSubCommand(commandchain[i]);\n                }\n                else {\n                    temp = null;\n                    break;\n                }\n            }\n        }\n        if (temp == null) {\n            return false;\n        }\n        else {\n            if (!temp.meta.helpLookup().isEmpty() && Wolf.help().hasHelp(temp.meta.helpLookup())) {\n                Wolf.help().unregisterCommand(temp.owner, temp.meta.helpLookup());\n            }\n            else {\n                Wolf.help().unregisterCommand(temp.owner, temp.meta.aliases()[0]);\n            }\n            if (temp.getParent() != null) {\n                temp.getParent().removeSubCommand(temp);\n                return true;\n            }\n            else {\n                for (int i = 0; i < temp.meta.aliases().length; i++) {\n                    commands.remove(temp.meta.aliases()[i].toLowerCase());\n                }\n                return true;\n            }\n        }\n    }\n\n    /** Remove all commands that belong to the specified command owner.","<tt>true</tt> if this manager has <tt>command</tt>, <tt>false</tt> otherwise. /\n    public boolean hasCommand(String command) {\n        return commands.containsKey(command.toLowerCase());\n    }\n\n    public boolean canUseCommand(MessageReceiver user, String command) {\n        WolfCommand cmd = commands.get(command);\n        return cmd != null && cmd.canUse(user);\n    }\n\n    /** Performs a lookup for a command of the given name and executes it if found. Returns false if the command wasn't found or if the caller doesn't have the permission to run it. <br> In Short: Use this to fire commands.","true if {@code command} executed successfully, false otherwise /\n    public boolean parseCommand(MessageReceiver caller, String command, String[] args) {\n        WolfCommand baseCommand = commands.get(command.toLowerCase());\n        WolfCommand subCommand = null;\n        if (baseCommand == null) {\n            return false;\n        }\n        // Parse args to find sub-command if there are any.\n        int argumentIndex = 0; // Index from which we should truncate args array\n        WolfCommand tmp = null;\n        for (int i = 0; i < args.length; ++i) {\n            if (i + 1 >= args.length) {\n                break;\n            }\n            if (i == 0) {\n                tmp = baseCommand.getSubCommand(args[1]);\n                if (tmp != null) {\n                    subCommand = tmp;\n                    ++argumentIndex;\n                }\n                continue;\n            }\n            if (tmp != null) {\n                if (tmp.hasSubCommand(args[i + 1])) {\n                    tmp = tmp.getSubCommand(args[i + 1]);\n                    ++argumentIndex;\n                }\n                if (argumentIndex >= args.length) {\n                    // Clearly some invalid crazy thing\n                    argumentIndex = args.length - 1;\n                    break;\n                }\n                if (subCommand != tmp) {\n                    subCommand = tmp;\n                }\n            }\n        }\n\n        if (subCommand == null) {\n            if (args[args.length - 1].toLowerCase().equals(\"--help\")) {\n                Wolf.help().getHelp(caller, baseCommand.meta.helpLookup().isEmpty() ? baseCommand.meta.aliases()[0] : baseCommand.meta.helpLookup());\n                return true;\n            }\n            else if (baseCommand.meta.version() == 1) {\n                return baseCommand.parseCommand(caller, args);\n            }\n            else {\n                return baseCommand.parseCommand(caller, Arrays.copyOfRange(args, 1, args.length));\n            }\n        }\n        else {\n            if (args[args.length - 1].toLowerCase().equals(\"--help\")) {\n                Wolf.help().getHelp(caller, subCommand.meta.helpLookup().isEmpty() ? subCommand.meta.aliases()[0] : subCommand.meta.helpLookup());\n                return true;\n            }\n            else if (baseCommand.meta.version() == 1) {\n                return subCommand.parseCommand(caller, Arrays.copyOfRange(args, argumentIndex, args.length));\n            }\n            else {\n                return subCommand.parseCommand(caller, Arrays.copyOfRange(args, argumentIndex + 1, args.length));\n            }\n        }\n    }\n\n    public void registerCommands(final CommandListener listener, CommandOwner owner, boolean force) throws CommandDependencyException {\n        registerCommands(listener, owner, Translator.getInstance(), force);\n    }\n\n    /** Register an already implemented WolfCommand to the help system. This will automatically update the help system as well.","nullchar separated stringbuilder /\n    public StringBuilder matchCommand(MessageReceiver caller, String command, boolean onlySubcommands) {\n        int matches = 0;\n        int maxMatches = 4;\n        StringBuilder matching = new StringBuilder();\n        command = command.toLowerCase();\n        // Match base commands\n        for (String key : commands.keySet()) {\n            if (!onlySubcommands) {\n                if (key.toLowerCase().equals(command)) {\n                    // Perfect match\n                    if (matching.indexOf(\"/\".concat(key)) == -1) {\n                        if (commands.get(key).canUse(caller) && matches <= maxMatches) {\n                            ++matches;\n                            matching.append(\"/\").append(key).append(\"\\u0000\");\n                        }\n                    }\n                }\n                else if (key.toLowerCase().startsWith(command)) {\n                    // Partial match\n                    if (matching.indexOf(\"/\".concat(key)) == -1) {\n                        if (commands.get(key).canUse(caller) && matches <= maxMatches) {\n                            ++matches;\n                            matching.append(\"/\").append(key).append(\"\\u0000\");\n                        }\n                    }\n                }\n            }\n            // Match sub commands\n            for (WolfCommand cmd : commands.get(key).getSubCommands(new ArrayList<WolfCommand>())) {\n                for (String alias : cmd.meta.aliases()) {\n                    if (alias.toLowerCase().equals(command)) {\n                        // full match\n                        if (matching.indexOf(alias) == -1) {\n                            if (cmd.canUse(caller) && matches <= maxMatches) {\n                                ++matches;\n                                matching.append(alias).append(\"\\u0000\");\n                            }\n                        }\n                    }\n                    else if (alias.toLowerCase().startsWith(command)) {\n                        // partial match\n                        if (matching.indexOf(alias) == -1) {\n                            if (cmd.canUse(caller) && matches <= maxMatches) {\n                                ++matches;\n                                matching.append(alias).append(\"\\u0000\");\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return matching;\n    }\n\n    /** Gets a list of matching {@link io.wolfscript.commandsys.WolfCommand} names a {@link io.wolfscript.chat.MessageReceiver} can use","a list of matching command names /\n    public List<String> matchCommandNames(MessageReceiver caller, String partial, boolean includeSubs) {\n        ArrayList<String> names = new ArrayList<String>();\n        for (Map.Entry<String, WolfCommand> entry : commands.entrySet()) {\n            if (entry.getValue().getParent() != null && !includeSubs) {\n                continue;\n            }\n            if (entry.getValue().canUse(caller) && TabCompleteHelper.startsWith(partial, entry.getKey())) {\n                names.add(entry.getKey());\n            }\n        }\n        return names;\n    }\n\n    /** Gets the tabComplete for a specified Command name","list string of possible completion"],"throws":["CommandDependencyException /\n    public void registerCommand(WolfCommand com, CommandOwner owner, boolean force) throws CommandDependencyException {\n        // Check for dependencies\n        sortDependencies(com, commands.values());\n        updateCommandList(com, owner, force);\n    }\n\n    private void updateCommandList(WolfCommand com, CommandOwner owner, boolean force) {\n        boolean hasDuplicate = false;\n        StringBuilder dupes = new StringBuilder();\n        for (String alias : com.meta.aliases()) {\n            boolean currentIsDupe = false;\n            if (commands.containsKey(alias.toLowerCase()) && com.meta.parent().isEmpty() && !force) {\n                hasDuplicate = true;\n                currentIsDupe = true;\n                dupes.append(alias).append(\" \");\n            }\n            if (!currentIsDupe || force) {\n                if (com.meta.parent().isEmpty()) { // Only add root commands\n                    commands.put(alias.toLowerCase(), com);\n                }\n                if (!com.meta.helpLookup().isEmpty() && !Wolf.help().hasHelp(com.meta.helpLookup())) {\n                    Wolf.help().registerCommand(owner, com, com.meta.helpLookup());\n                }\n                else {\n                    Wolf.help().registerCommand(owner, com);\n                }\n            }\n        }\n        if (hasDuplicate && !force) {\n            throw new DuplicateCommandException(dupes.toString());\n        }\n    }\n\n    private void sortDependencies(WolfCommand cmd, Collection<WolfCommand> possibles) throws CommandDependencyException {\n        if (cmd.meta.parent().isEmpty()) {\n            return;\n        }\n        String[] cmdp = cmd.meta.parent().split(\"\\\\.\");\n        boolean depMissing = true;\n        // Check for local dependencies\n        // Needs looping one more time because the list isn't keyed (and shouldn't be anyway)\n        for (WolfCommand parent : possibles) {\n            if (parent.hasAlias(cmdp[0])) {\n                // addSubCommand returns true on success.\n                depMissing = !parent.addSubCommand(cmdp, 1, cmd);\n                break;\n            }\n        }\n\n        if (depMissing) {\n            throw new CommandDependencyException(cmd.meta.aliases()[0] + \" has an unsatisfied dependency, \" +\n                                                         \"( \" + cmd.meta.parent() + \" )\" +\n                                                         \"please adjust registration order of your listeners or fix your plugins dependencies\"\n            );\n        }\n    }\n\n    /** Register your CommandListener. This will make all annotated commands available to WolfScript and the help system. Sub Command relations can only be sorted out after availability. That means if you try to register a command that is a sub-command of something that is not registered yet, it will fail. So make sure you add commands in the correct order.","CommandDependencyException /\n    public void registerCommands(final CommandListener listener, CommandOwner owner, LocaleHelper translator, boolean force) throws CommandDependencyException {\n        Method[] methods = listener.getClass().getDeclaredMethods();\n        ArrayList<WolfCommand> newCommands = new ArrayList<WolfCommand>();\n\n        for (final Method method : methods) {\n            if (!method.isAnnotationPresent(Command.class)) {\n                continue;\n            }\n            Class<?>[] params = method.getParameterTypes();\n            if (params.length != 2) {\n                log.warn(\"You have a Command method with invalid number of arguments! - \" + method.getName());\n                continue;\n            }\n            if (!(MessageReceiver.class.isAssignableFrom(params[0]) && String[].class.isAssignableFrom(params[1]))) {\n                log.warn(\"You have a Command method with invalid argument types! - \" + method.getName());\n                continue;\n            }\n\n            Command meta = method.getAnnotation(Command.class);\n            WolfCommand command = new WolfCommand(meta, owner, translator, TabCompleteHelper.findDispatcherFor(listener, meta.aliases(), meta.parent().isEmpty() ? null : meta.parent())) {\n                @Override\n                protected void execute(MessageReceiver caller, String[] parameters) {\n                    try {\n                        method.invoke(listener, new Object[]{ caller, parameters });\n                    }\n                    catch (Exception ex) {\n                        log.error(\"Could not execute command...\", ex.getCause());\n                    }\n                }\n            };\n            newCommands.add(command);\n        }\n        // Sort load order so dependencies can be resolved properly\n        Collections.sort(newCommands);\n\n        for (WolfCommand cmd : newCommands) {\n            try {\n                // First try local dependency\n                sortDependencies(cmd, newCommands);\n                this.updateCommandList(cmd, owner, force);\n            }\n            catch (CommandDependencyException e) {\n                // Now try existing commands.\n                // If this throws, dependency is definitely unresolved\n                sortDependencies(cmd, commands.values());\n                this.updateCommandList(cmd, owner, force);\n            }\n        }\n    }\n\n    /** Build a list of commands matching the given string."]},"scope":"public","return":"List<String>","name":"tabComplete","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"the caller of the tab complete"},{"name":"command","type":"String","description":"The command to search for."}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","net.visualillusionsent.utils.LocaleHelper","java.lang.reflect.Method","java.util.ArrayList","java.util.Arrays","java.util.Collection","java.util.Collections","java.util.HashMap","java.util.Iterator","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.commandsys.CommandOwner":{"namespace":"io.wolfscript.commandsys","title":"This interface mandates methods for command ownership.","description":"This interface mandates methods for command ownership. A command owner can be the server or a plugin.","doc":{"author":["Chris (damagefilter)"]},"name":"CommandOwner","qualifiedname":"io.wolfscript.commandsys.CommandOwner","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.DuplicateCommandException":{"namespace":"io.wolfscript.commandsys","title":"Used to yell at a plugin developer for not checking their commands.","description":"Used to yell at a plugin developer for not checking their commands.","doc":{"author":["Willem (l4mRh4X0r)"]},"name":"DuplicateCommandException","qualifiedname":"io.wolfscript.commandsys.DuplicateCommandException","type":"class","scope":"public","extends":["io.wolfscript.commandsys.CommandException"],"constructors":[{"title":"Creates a new <tt>DuplicateCommandException</tt>.","description":"Creates a new <tt>DuplicateCommandException</tt>.","scope":"public","name":"DuplicateCommandException","args":[{"name":"command","type":"String","description":"The offending command"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.DynamicCommandAnnotation":{"namespace":"io.wolfscript.commandsys","title":"A fake Command annotation, used by the non-java based command system","description":"A fake Command annotation, used by the non-java based command system","doc":{"author":["Pwootage"]},"name":"DynamicCommandAnnotation","qualifiedname":"io.wolfscript.commandsys.DynamicCommandAnnotation","type":"class","scope":"public","implements":["Command"],"constructors":[{"title":"DynamicCommandAnnotation constructor","description":"DynamicCommandAnnotation constructor","scope":"public","name":"DynamicCommandAnnotation","args":[{"name":"description","type":"String","description":"description argument"},{"name":"toolTip","type":"String","description":"toolTip argument"},{"name":"parent","type":"String","description":"parent argument"},{"name":"helpLookup","type":"String","description":"helpLookup argument"},{"name":"min","type":"int","description":"min argument"},{"name":"max","type":"int","description":"max argument"},{"name":"tabCompleteMethod","type":"String","description":"tabCompleteMethod argument"},{"name":"version","type":"int","description":"version argument"}]}],"methods":[{"title":"aliases method","description":"aliases method","scope":"public","return":"String[]","name":"aliases","args":[]},{"title":"description method","description":"description method","scope":"public","return":"String","name":"description","args":[]},{"title":"helpLookup method","description":"helpLookup method","scope":"public","return":"String","name":"helpLookup","args":[]},{"title":"max method","description":"max method","scope":"public","return":"int","name":"max","args":[]},{"title":"min method","description":"min method","scope":"public","return":"int","name":"min","args":[]},{"title":"parent method","description":"parent method","scope":"public","return":"String","name":"parent","args":[]},{"title":"permissions method","description":"permissions method","scope":"public","return":"String[]","name":"permissions","args":[]},{"title":"searchTerms method","description":"searchTerms method","scope":"public","return":"String[]","name":"searchTerms","args":[]},{"title":"toolTip method","description":"toolTip method","scope":"public","return":"String","name":"toolTip","args":[]},{"title":"version method","description":"version method","scope":"public","return":"int","name":"version","args":[]}],"imports":["java.lang.annotation.Annotation"],"properties":[]},"io.wolfscript.commandsys.DynamicTabCompleteAnnotation":{"namespace":"io.wolfscript.commandsys","title":"A dynamic TabComplete annotation, used by the non-java based command system","description":"A dynamic TabComplete annotation, used by the non-java based command system","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DynamicTabCompleteAnnotation","qualifiedname":"io.wolfscript.commandsys.DynamicTabCompleteAnnotation","type":"class","scope":"public","implements":["TabComplete"],"constructors":[{"title":"DynamicTabCompleteAnnotation constructor","description":"DynamicTabCompleteAnnotation constructor","scope":"public","name":"DynamicTabCompleteAnnotation","args":[]}],"methods":[{"title":"commands method","description":"commands method","scope":"public","return":"String[]","name":"commands","args":[]}],"imports":["java.lang.annotation.Annotation"],"properties":[]},"io.wolfscript.commandsys.NativeCommand":{"namespace":"io.wolfscript.commandsys","title":"Marks a command as a Wolf native one","description":"Marks a command as a Wolf native one","doc":{"author":["Jason (darkdiplomat)"]},"name":"NativeCommand","qualifiedname":"io.wolfscript.commandsys.NativeCommand","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.PlayerSelector":{"namespace":"io.wolfscript.commandsys","title":"A class that handles the \"@\" attribute","description":"A class that handles the \"@\" attribute","doc":{"author":["Ehud  (EhudB)","Almog (Swift)"]},"name":"PlayerSelector","qualifiedname":"io.wolfscript.commandsys.PlayerSelector","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.TabCompleteDispatch":{"namespace":"io.wolfscript.commandsys","title":"{@link io.wolfscript.commandsys.TabComplete} method wrapper","description":"{@link io.wolfscript.commandsys.TabComplete} method wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"TabCompleteDispatch","qualifiedname":"io.wolfscript.commandsys.TabCompleteDispatch","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.chat.MessageReceiver","java.util.List"],"properties":[]},"io.wolfscript.commandsys.TabCompleteException":{"namespace":"io.wolfscript.commandsys","title":"Exception thrown if a {@link io.wolfscript.commandsys.TabComplete} method fails","description":"Exception thrown if a {@link io.wolfscript.commandsys.TabComplete} method fails","doc":{"author":["Jason (darkdiplomat)"]},"name":"TabCompleteException","qualifiedname":"io.wolfscript.commandsys.TabCompleteException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"TabCompleteException constructor","description":"TabCompleteException constructor","scope":"public","name":"TabCompleteException","args":[{"name":"msg","type":"String","description":"msg argument"},{"name":"thrown","type":"Throwable","description":"thrown argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.TabCompleteHelper":{"namespace":"io.wolfscript.commandsys","title":"A set of methods to help with doing tab completes","description":"A set of methods to help with doing tab completes","doc":{"author":["Jason (darkdiplomat)"]},"name":"TabCompleteHelper","qualifiedname":"io.wolfscript.commandsys.TabCompleteHelper","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"Matches a partial {@link String} to a possible matching {@link String}","description":"Matches a partial {@link String} to a possible matching {@link String}","doc":{"return":["{@code true} if matches or if partial is empty; {@code false} if not /\n    public static boolean startsWith(String partial, String possible) {\n        return possible.regionMatches(true, 0, partial, 0, partial.length());\n    }\n\n    /** Attempts to get a list of matches that the specified argument could be","a list of matches found /\n    public static List<String> matchTo(String arg, String[] possible) {\n        ArrayList<String> matches = new ArrayList<String>();\n\n        for (int index = 0; index < possible.length; index++) {\n            if (startsWith(arg, possible[index])) {\n                matches.add(possible[index]);\n            }\n        }\n\n        return matches;\n    }\n\n    /** Matches the last argument of specified arguments to the possible matches","a list of matches found /\n    public static List<String> matchTo(String[] args, String[] possible) {\n        String lastArg = args[args.length - 1];\n        return matchTo(lastArg, possible);\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.user.Group} names","list of matching {@link io.wolfscript.user.Group} names found /\n    public static List<String> matchToGroup(String arg) {\n        return matchTo(arg, Wolf.usersAndGroups().getGroupNames());\n    }\n\n    /** Matches the last argument of specified arguments to possible {@link io.wolfscript.user.Group} names","a list of matching {@link io.wolfscript.user.Group} names found /\n    public static List<String> matchToGroup(String[] args) {\n        return matchTo(args, Wolf.usersAndGroups().getGroupNames());\n    }\n\n    /** Matches the argument to possible online {@link io.wolfscript.api.entity.living.humanoid.Player} names","list of matching online {@link io.wolfscript.api.entity.living.humanoid.Player} names found /\n    public static List<String> matchToOnlinePlayer(String arg) {\n        return matchTo(arg, Wolf.getServer().getPlayerNameList());\n    }\n\n    /** Matches the last argument of specified arguments to possible online {@link io.wolfscript.api.entity.living.humanoid.Player} names","a list of matching online {@link io.wolfscript.api.entity.living.humanoid.Player} names found /\n    public static List<String> matchToOnlinePlayer(String[] args) {\n        return matchTo(args, Wolf.getServer().getPlayerNameList());\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.api.entity.living.humanoid.Player} names, including offline players","list of matching {@link io.wolfscript.api.entity.living.humanoid.Player} names found /\n    public static List<String> matchToKnownPlayer(String arg) {\n        return matchTo(arg, Wolf.getServer().getKnownPlayerNames());\n    }\n\n    /** Matches the last argument of specified arguments to possible {@link io.wolfscript.api.entity.living.humanoid.Player} names, including offline players","a list of matching {@link io.wolfscript.api.entity.living.humanoid.Player} names found /\n    public static List<String> matchToKnownPlayer(String[] args) {\n        return matchTo(args, Wolf.getServer().getKnownPlayerNames());\n    }\n\n    /** Matches the argument to possible loaded {@link io.wolfscript.api.world.World} names","list of matching loaded {@link io.wolfscript.api.world.World} names found /\n    public static List<String> matchToLoadedWorld(String arg) {\n        return matchTo(arg, Wolf.getServer().getWorldManager().getLoadedWorldsNames());\n    }\n\n    /** Matches the last argument of specified arguments to possible loaded {@link io.wolfscript.api.world.World} names","a list of matching loaded {@link io.wolfscript.api.world.World} names found /\n    public static List<String> matchToLoadedWorld(String[] args) {\n        return matchTo(args, Wolf.getServer().getWorldManager().getLoadedWorldsNames());\n    }\n\n    /** Matches the argument to possible loaded {@link io.wolfscript.api.world.World} names of specified {@link io.wolfscript.api.world.DimensionType}","list of matching loaded {@link io.wolfscript.api.world.World} names found /\n    public static List<String> matchToLoadedWorld(String arg, DimensionType dimensionType) {\n        return matchTo(arg, Wolf.getServer().getWorldManager().getLoadedWorldsNamesOfDimension(dimensionType));\n    }\n\n    /** Matches the last argument of specified arguments to possible loaded {@link io.wolfscript.api.world.World} names of specified {@link io.wolfscript.api.world.DimensionType}","a list of matching loaded {@link io.wolfscript.api.world.World} names found /\n    public static List<String> matchToLoadedWorldOfDimension(String[] args, DimensionType dimensionType) {\n        return matchTo(args, Wolf.getServer().getWorldManager().getLoadedWorldsNamesOfDimension(dimensionType));\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.api.world.DimensionType} names of specified {@link io.wolfscript.api.world.DimensionType}","list of matching {@link io.wolfscript.api.world.DimensionType} names found /\n    public static List<String> matchToDimension(String arg) {\n        return matchTo(arg, DimensionType.knownDimensionNames());\n    }\n\n    /** Matches the last argument of specified arguments to possible {@link io.wolfscript.api.world.DimensionType} names","a list of matching {@link io.wolfscript.api.world.DimensionType} names found /\n    public static List<String> matchToDimension(String[] args) {\n        return matchTo(args, DimensionType.knownDimensionNames());\n    }\n\n    /** Matches the last argument of specified arguments to possible existing {@link io.wolfscript.api.world.World} names","a list of matching existing {@link io.wolfscript.api.world.World} names /\n    public static List<String> matchToKnownWorld(String[] args) {\n        return matchTo(args, Wolf.getServer().getWorldManager().getExistingWorldsArray());\n    }\n\n    /** Matches the argument to possible existing {@link io.wolfscript.api.world.World} names","list of matching existing {@link io.wolfscript.api.world.World} names found /\n    public static List<String> matchToKnownWorld(String arg) {\n        return matchTo(arg, Wolf.getServer().getWorldManager().getExistingWorldsArray());\n    }\n\n    /** Matches the last argument of specified arguments to possible existing {@link io.wolfscript.api.world.WorldType} names","a list of matching existing {@link io.wolfscript.api.world.WorldType} names /\n    public static List<String> matchToWorldType(String[] args) {\n        return matchTo(args, WorldType.getTypeNames());\n    }\n\n    /** Matches the argument to possible existing {@link io.wolfscript.api.world.WorldType} names","list of matching existing {@link io.wolfscript.api.world.WorldType} names found /\n    public static List<String> matchToWorldType(String arg) {\n        return matchTo(arg, WorldType.getTypeNames());\n    }\n\n    /** Matches the argument to possible banned subjects","list of matching banned subjects found /\n    public static List<String> matchToBannedSubject(String arg) {\n        ArrayList<String> banned = new ArrayList<String>();\n        for (Ban ban : Wolf.bans().getAllBans()) {\n            banned.add(ban.getSubject());\n        }\n        return matchTo(arg, banned.toArray(new String[banned.size()]));\n    }\n\n    /** Matches the last argument of specified arguments to possible banned subjects","a list of matching banned subjects found /\n    public static List<String> matchToBannedSubject(String[] args) {\n        ArrayList<String> banned = new ArrayList<String>();\n        for (Ban ban : Wolf.bans().getAllBans()) {\n            banned.add(ban.getSubject());\n        }\n        return matchTo(args, banned.toArray(new String[banned.size()]));\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.kit.Kit} names","list of matching {@link io.wolfscript.kit.Kit} names found /\n    public static List<String> matchToKitNames(String arg, MessageReceiver caller) {\n        Player subject = caller instanceof Player ? (Player)caller : null;\n        ArrayList<String> kitNames = new ArrayList<String>();\n        for (Kit kit : Wolf.kits().getAllKits()) {\n            if (subject != null && !kit.canBeGiven(subject)) {\n                continue;\n            }\n            kitNames.add(kit.getName());\n        }\n        return matchTo(arg, kitNames.toArray(new String[kitNames.size()]));\n    }\n\n    /** Matches the last argument of specified arguments to possible {@link io.wolfscript.kit.Kit} names","a list of matching {@link io.wolfscript.kit.Kit} names found /\n    public static List<String> matchToKitNames(String[] args, MessageReceiver caller) {\n        Player subject = caller instanceof Player ? (Player)caller : null;\n        ArrayList<String> kitNames = new ArrayList<String>();\n        for (Kit kit : Wolf.kits().getAllKits()) {\n            if (subject != null && !kit.canBeGiven(subject)) {\n                continue;\n            }\n            kitNames.add(kit.getName());\n        }\n        return matchTo(args, kitNames.toArray(new String[kitNames.size()]));\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.warp.Warp} names","list of matching {@link io.wolfscript.warp.Warp} names found /\n    public static List<String> matchToWarpNames(String arg, MessageReceiver caller) {\n        Player subject = caller instanceof Player ? (Player)caller : null;\n        ArrayList<String> warpNames = new ArrayList<String>();\n        for (Warp warp : Wolf.warps().getAllWarps()) {\n            if (warp.isPlayerHome()) {\n                continue;\n            }\n            if (subject != null && !warp.canWarp(subject)) {\n                continue;\n            }\n            warpNames.add(warp.getName());\n        }\n        return matchTo(arg, warpNames.toArray(new String[warpNames.size()]));\n    }\n\n    /** Matches the last argument of specified arguments to possible {@link io.wolfscript.warp.Warp} names","a list of matching {@link io.wolfscript.warp.Warp} names found /\n    public static List<String> matchToWarpNames(String[] args, MessageReceiver caller) {\n        Player subject = caller instanceof Player ? (Player)caller : null;\n        ArrayList<String> warpNames = new ArrayList<String>();\n        for (Warp warp : Wolf.warps().getAllWarps()) {\n            if (warp.isPlayerHome()) {\n                continue;\n            }\n            if (subject != null && !warp.canWarp(subject)) {\n                continue;\n            }\n            warpNames.add(warp.getName());\n        }\n        return matchTo(args, warpNames.toArray(new String[warpNames.size()]));\n    }\n\n    /** Matches the argument to possible existing {@link io.wolfscript.api.inventory.ItemType} machine names","list of matching existing {@link io.wolfscript.api.inventory.ItemType} machine names /\n    public static List<String> matchToItemType(String arg) {\n        return matchTo(arg, itemTypeNames(false));\n    }\n\n    /** Matches the last argument of specified arguments to possible existing {@link io.wolfscript.api.inventory.ItemType} machine names","a list of matching existing {@link io.wolfscript.api.inventory.ItemType} machine names /\n    public static List<String> matchToItemType(String[] args) {\n        return matchTo(args, itemTypeNames(false));\n    }\n\n    /** Matches the argument to possible existing {@link io.wolfscript.api.inventory.ItemType} machine names with data value","list of matching existing {@link io.wolfscript.api.inventory.ItemType} machine names with data value /\n    public static List<String> matchToItemTypeAndData(String arg) {\n        return matchTo(arg, itemTypeNames(true));\n    }\n\n    /** Matches the last argument of specified arguments to possible existing {@link io.wolfscript.api.inventory.ItemType} machine names with data value","a list of matching existing {@link io.wolfscript.api.inventory.ItemType} machine names with data value /\n    public static List<String> matchToItemTypeAndData(String[] args) {\n        return matchTo(args, itemTypeNames(true));\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.api.PlayerReference} permissions","list of matching {@link io.wolfscript.api.PlayerReference} permissions /\n    public static List<String> matchToPlayerPermission(Player playerReference, String arg) {\n        if (playerReference != null) {\n            List<PermissionNode> nodes = playerReference.getPermissionProvider().getPermissionMap();\n            String[] fullNodes = new String[nodes.size()];\n            for (int index = 0; index < nodes.size(); index++) {\n                fullNodes[index] = nodes.get(index).getFullPath();\n            }\n            if (fullNodes.length > 0) {\n                return matchTo(arg, fullNodes);\n            }\n        }\n        return null;\n    }\n\n    /** Matches the argument to possible {@link io.wolfscript.api.PlayerReference} permissions","list of matching {@link io.wolfscript.api.PlayerReference} permissions /\n    public static List<String> matchToPlayerPermission(PlayerReference playerReference, String[] args) {\n        if (playerReference != null) {\n            List<PermissionNode> nodes = playerReference.getPermissionProvider().getPermissionMap();\n            String[] fullNodes = new String[nodes.size()];\n            for (int index = 0; index < nodes.size(); index++) {\n                fullNodes[index] = nodes.get(index).getFullPath();\n            }\n            if (fullNodes.length > 0) {\n                return matchTo(args, fullNodes);\n            }\n        }\n        return null;\n    }\n\n    /** Generates a new TabCompleteDispatch for a command. Returns null if nothing suitable was found within the given CommandListener","new dispatcher on success or null on failure"]},"scope":"public","describe":"static","return":"io.wolfscript.commandsys.TabCompleteDispatch","name":"findDispatcherFor","args":[{"name":"CommandListener","type":"final","description":"CommandListener argument"},{"name":"parent","type":"String","description":"parent argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.ItemType","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.WorldType","io.wolfscript.bansystem.Ban","io.wolfscript.chat.MessageReceiver","io.wolfscript.kit.Kit","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.warp.Warp","java.lang.reflect.Method","java.util.ArrayList","java.util.List"],"properties":[]},"io.wolfscript.commandsys.WolfCommand":{"namespace":"io.wolfscript.commandsys","title":"Contains methods common to all types of chat commands.","description":"Contains methods common to all types of chat commands.","doc":{"author":["lightweight","Willem Mulder","Chris (damagefilter)"]},"name":"WolfCommand","qualifiedname":"io.wolfscript.commandsys.WolfCommand","type":"class","scope":"public","describe":"abstract","implements":["Comparable<WolfCommand"],"constructors":[],"fields":[{"title":"translator field","description":"translator field","name":"translator","scope":"public","type":"net.visualillusionsent.utils.LocaleHelper","describe":"final"}],"methods":[{"title":"compareTo method","description":"compareTo method","scope":"public","return":"int","name":"compareTo","args":[{"name":"o","type":"io.wolfscript.commandsys.WolfCommand","description":"o argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.config.Configuration","net.visualillusionsent.utils.LocaleHelper","java.util.ArrayList","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.commandsys.WolfCommandPermissions":{"namespace":"io.wolfscript.commandsys","title":"An list of all Wolf Command permissions","description":"An list of all Wolf Command permissions<br/> to help track what permissions are what","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WolfCommandPermissions","qualifiedname":"io.wolfscript.commandsys.WolfCommandPermissions","type":"enum","scope":"public","constructors":[],"fields":[{"title":"String field","description":"String field","name":"String","scope":"public","type":"final","describe":"static"}],"methods":[],"imports":[],"enum":[],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.groupmod","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.groupmod","name":"groupmod","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.0","packagename":"io.wolfscript.commandsys.commands.groupmod","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.groupmod.GroupBase","io.wolfscript.commandsys.commands.groupmod.GroupCheck","io.wolfscript.commandsys.commands.groupmod.GroupCreate","io.wolfscript.commandsys.commands.groupmod.GroupList","io.wolfscript.commandsys.commands.groupmod.GroupParent","io.wolfscript.commandsys.commands.groupmod.GroupPermissionAdd","io.wolfscript.commandsys.commands.groupmod.GroupPermissionCheck","io.wolfscript.commandsys.commands.groupmod.GroupPermissionFlush","io.wolfscript.commandsys.commands.groupmod.GroupPermissionList","io.wolfscript.commandsys.commands.groupmod.GroupPermissionRemove","io.wolfscript.commandsys.commands.groupmod.GroupPrefix","io.wolfscript.commandsys.commands.groupmod.GroupRemove","io.wolfscript.commandsys.commands.groupmod.GroupRename"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupBase":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to show help for the groupmod command","description":"Command to show help for the groupmod command","doc":{"author":["Chris (damagefilter)"]},"name":"GroupBase","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupBase","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupCheck":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to check the values of a group","description":"Command to check the values of a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupCheck","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupCheck","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupCreate":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to create a group","description":"Command to create a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupCreate","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupCreate","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.world.World","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupList":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to list all the groups defined","description":"Command to list all the groups defined","doc":{"author":["Chris (damagefilter)"]},"name":"GroupList","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupParent":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to change the parent of a group","description":"Command to change the parent of a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupParent","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupParent","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPermissionAdd":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to add a permission to a group","description":"Command to add a permission to a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPermissionAdd","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPermissionAdd","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPermissionCheck":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to check if a group has a permission node","description":"Command to check if a group has a permission node","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPermissionCheck","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPermissionCheck","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPermissionFlush":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Flushes the permission cache.","description":"Flushes the permission cache.","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPermissionFlush","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPermissionFlush","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPermissionList":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to list all permissions of a group","description":"Command to list all permissions of a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPermissionList","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPermissionList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPermissionRemove":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to remove a permission node from a group","description":"Command to remove a permission node from a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPermissionRemove","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPermissionRemove","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupPrefix":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to change the prefix of a group","description":"Command to change the prefix of a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupPrefix","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupPrefix","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","net.visualillusionsent.utils.StringUtils","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupRemove":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to remove a group","description":"Command to remove a group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupRemove","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupRemove","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.groupmod.GroupRename":{"namespace":"io.wolfscript.commandsys.commands.groupmod","title":"Command to rename an existing group","description":"Command to rename an existing group","doc":{"author":["Chris (damagefilter)"]},"name":"GroupRename","qualifiedname":"io.wolfscript.commandsys.commands.groupmod.GroupRename","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.player.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.player","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.player","name":"player","qualifiedname":"io.wolfscript.commandsys.commands.player.0","packagename":"io.wolfscript.commandsys.commands.player","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.player.Compass","io.wolfscript.commandsys.commands.player.GetPosition","io.wolfscript.commandsys.commands.player.GodCommand"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.player.Compass":{"namespace":"io.wolfscript.commandsys.commands.player","title":"Command to get your own rotation (cardinal direction and degrees yaw)","description":"Command to get your own rotation (cardinal direction and degrees yaw)","doc":{"author":["Chris (damagefilter)"]},"name":"Compass","qualifiedname":"io.wolfscript.commandsys.commands.player.Compass","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.Translator.translate"],"properties":[]},"io.wolfscript.commandsys.commands.player.GetPosition":{"namespace":"io.wolfscript.commandsys.commands.player","title":"Command to get your own position (x, y, z and rotation)","description":"Command to get your own position (x, y, z and rotation)","doc":{"author":["Chris (damagefilter)"]},"name":"GetPosition","qualifiedname":"io.wolfscript.commandsys.commands.player.GetPosition","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.Translator.translate"],"properties":[]},"io.wolfscript.commandsys.commands.player.GodCommand":{"namespace":"io.wolfscript.commandsys.commands.player","title":"class GodCommand","description":"class GodCommand","doc":{"author":["Somners"]},"name":"GodCommand","qualifiedname":"io.wolfscript.commandsys.commands.player.GodCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.GameMode","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.commandsys.WolfCommandPermissions.GOD","io.wolfscript.commandsys.WolfCommandPermissions.GOD"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.playermod","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.playermod","name":"playermod","qualifiedname":"io.wolfscript.commandsys.commands.playermod.0","packagename":"io.wolfscript.commandsys.commands.playermod","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.playermod.PlayerCreate","io.wolfscript.commandsys.commands.playermod.PlayerGroupAdd","io.wolfscript.commandsys.commands.playermod.PlayerGroupCheck","io.wolfscript.commandsys.commands.playermod.PlayerGroupList","io.wolfscript.commandsys.commands.playermod.PlayerGroupRemove","io.wolfscript.commandsys.commands.playermod.PlayerGroupSet","io.wolfscript.commandsys.commands.playermod.PlayerPermissionAdd","io.wolfscript.commandsys.commands.playermod.PlayerPermissionCheck","io.wolfscript.commandsys.commands.playermod.PlayerPermissionList","io.wolfscript.commandsys.commands.playermod.PlayerPermissionRemove","io.wolfscript.commandsys.commands.playermod.PlayerPrefix","io.wolfscript.commandsys.commands.playermod.PlayerRemove","io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerCreate":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to add a player (for permissions, groups, etc.) to the database","description":"Command to add a player (for permissions, groups, etc.) to the database","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerCreate","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerCreate","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerGroupAdd":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to add a group to a player","description":"Command to add a group to a player","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerGroupAdd","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerGroupAdd","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerGroupCheck":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to check if a player is in a group","description":"Command to check if a player is in a group","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerGroupCheck","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerGroupCheck","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerGroupList":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to list all the groups a player belongs to","description":"Command to list all the groups a player belongs to","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerGroupList","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerGroupList","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerGroupRemove":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to remove a group from a player (not main group)","description":"Command to remove a group from a player (not main group)","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerGroupRemove","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerGroupRemove","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerGroupSet":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to set a players group","description":"Command to set a players group","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerGroupSet","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerGroupSet","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.user.Group","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerPermissionAdd":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to add a permission node to a player","description":"Command to add a permission node to a player","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerPermissionAdd","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerPermissionAdd","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerPermissionCheck":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to check if a player has a permission node","description":"Command to check if a player has a permission node","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerPermissionCheck","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerPermissionCheck","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerPermissionList":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to list all permissions a player has","description":"Command to list all permissions a player has","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerPermissionList","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerPermissionList","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerPermissionRemove":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to remove a permission node from a player","description":"Command to remove a permission node from a player","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerPermissionRemove","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerPermissionRemove","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.permissionsystem.PermissionNode","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerPrefix":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to change the prefix of a player","description":"Command to change the prefix of a player","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerPrefix","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerPrefix","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","net.visualillusionsent.utils.StringUtils","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayerRemove":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to remove player data from the database","description":"Command to remove player data from the database","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerRemove","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayerRemove","type":"class","scope":"public","extends":["io.wolfscript.commandsys.commands.playermod.PlayermodBase"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.playermod.PlayermodBase":{"namespace":"io.wolfscript.commandsys.commands.playermod","title":"Command to show help for the playermod command","description":"Command to show help for the playermod command","doc":{"author":["Chris (damagefilter)"]},"name":"PlayermodBase","qualifiedname":"io.wolfscript.commandsys.commands.playermod.PlayermodBase","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand"],"properties":[]},"io.wolfscript.commandsys.commands.system.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system","name":"system","qualifiedname":"io.wolfscript.commandsys.commands.system.0","packagename":"io.wolfscript.commandsys.commands.system","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.CreateVanilla","io.wolfscript.commandsys.commands.system.HelpCommand","io.wolfscript.commandsys.commands.system.Kick","io.wolfscript.commandsys.commands.system.ListPlugins","io.wolfscript.commandsys.commands.system.Motd","io.wolfscript.commandsys.commands.system.Mute","io.wolfscript.commandsys.commands.system.PlayerInfoAddition","io.wolfscript.commandsys.commands.system.PlayerInformation","io.wolfscript.commandsys.commands.system.PlayerList","io.wolfscript.commandsys.commands.system.PluginCommand","io.wolfscript.commandsys.commands.system.ReloadCommand","io.wolfscript.commandsys.commands.system.RestartServer","io.wolfscript.commandsys.commands.system.StopServer"],"interfaces":[],"enums":[],"namespaces":["io.wolfscript.commandsys.commands.system.bans.0","io.wolfscript.commandsys.commands.system.informational.0","io.wolfscript.commandsys.commands.system.kits.0","io.wolfscript.commandsys.commands.system.operator.0","io.wolfscript.commandsys.commands.system.reservelist.0","io.wolfscript.commandsys.commands.system.whitelist.0"],"properties":[]},"io.wolfscript.commandsys.commands.system.CreateVanilla":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to convert a Wolf server setup into a Vanilla setup","description":"Command to convert a Wolf server setup into a Vanilla setup","doc":{"author":["Chris (damagefilter)"]},"name":"CreateVanilla","qualifiedname":"io.wolfscript.commandsys.commands.system.CreateVanilla","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.config.Configuration","io.wolfscript.converter.WolfToVanilla"],"properties":[]},"io.wolfscript.commandsys.commands.system.HelpCommand":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to access help about all commands","description":"Command to access help about all commands","doc":{"author":["Chris (damagefilter)"]},"name":"HelpCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.HelpCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.Arrays","java.util.List","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.commandsys.commands.system.Kick":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to kick a player from the server","description":"Command to kick a player from the server","doc":{"author":["Brian (WWOL)"]},"name":"Kick","qualifiedname":"io.wolfscript.commandsys.commands.system.Kick","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.event.player.Kick","net.visualillusionsent.utils.StringUtils","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.ListPlugins":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to list all the plugins on the server (both enabled and disabled)","description":"Command to list all the plugins on the server (both enabled and disabled)","doc":{"author":["Chris (damagefilter)"]},"name":"ListPlugins","qualifiedname":"io.wolfscript.commandsys.commands.system.ListPlugins","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.plugin.PluginDescriptor","io.wolfscript.plugin.PluginState","java.util.Collection","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.Motd":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to view the Message Of The Day","description":"Command to view the Message Of The Day","doc":{"author":["Chris (damagefilter)"]},"name":"Motd","qualifiedname":"io.wolfscript.commandsys.commands.system.Motd","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.CommandException","io.wolfscript.commandsys.NativeCommand"],"properties":[]},"io.wolfscript.commandsys.commands.system.Mute":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to (un)mute a player","description":"Command to (un)mute a player","doc":{"author":["Chris (damagefilter)"]},"name":"Mute","qualifiedname":"io.wolfscript.commandsys.commands.system.Mute","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.PlayerInfoAddition":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Extra data to be inserted with PlayerInformation","description":"Extra data to be inserted with PlayerInformation","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PlayerInfoAddition","qualifiedname":"io.wolfscript.commandsys.commands.system.PlayerInfoAddition","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[{"title":"Constructs a new PlayerInfoAddition and automatically adds it to the {@link io.wolfscript.commandsys.commands.system.PlayerInformation} command","description":"Constructs a new PlayerInfoAddition and automatically adds it to the {@link io.wolfscript.commandsys.commands.system.PlayerInformation} command","doc":{"return":["{@code true} if valid; {@code false} if not /\n    public final boolean canApply() {\n        return !plugin.isDisabled();\n    }\n\n    /** Checks if this PlayerInfoAddtion is for a given {@link io.wolfscript.plugin.Plugin}","{@code true} if is for given plugin; {@code false} if not /\n    public final boolean isFor(Plugin plugin) {\n        return plugin.equals(this.plugin);\n    }\n\n    /** Override this method to return the data you wish it have added to the {@link io.wolfscript.commandsys.commands.system.PlayerInformation} command","The information to be displayed to the caller. Do not send the caller this data directly."]},"scope":"public","describe":"abstract","return":"String","name":"applyData","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"the {@link io.wolfscript.chat.MessageReceiver} making the call to the command"},{"name":"subject","type":"io.wolfscript.api.PlayerReference","description":"the {@link io.wolfscript.api.PlayerReference} who's information is being looked at"}]}],"imports":["io.wolfscript.api.PlayerReference","io.wolfscript.chat.MessageReceiver","io.wolfscript.plugin.Plugin"],"properties":[]},"io.wolfscript.commandsys.commands.system.PlayerInformation":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to view multiple types of info about a player (possible yourself)","description":"Command to view multiple types of info about a player (possible yourself)","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerInformation","qualifiedname":"io.wolfscript.commandsys.commands.system.PlayerInformation","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"addInfoAddition method","description":"addInfoAddition method","scope":"public","describe":"static","return":"boolean","name":"addInfoAddition","args":[{"name":"addition","type":"io.wolfscript.commandsys.commands.system.PlayerInfoAddition","description":"addition argument"}]},{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"removeInfoAddition method","description":"removeInfoAddition method","scope":"public","describe":"static","return":"void","name":"removeInfoAddition","args":[{"name":"addition","type":"io.wolfscript.commandsys.commands.system.PlayerInfoAddition","description":"addition argument"}]},{"title":"removeInfoAdditions method","description":"removeInfoAdditions method","scope":"public","describe":"static","return":"void","name":"removeInfoAdditions","args":[{"name":"plugin","type":"io.wolfscript.plugin.Plugin","description":"plugin argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Position","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.plugin.Plugin","io.wolfscript.user.Group","io.wolfscript.warp.Warp","java.util.Iterator","java.util.concurrent.ConcurrentLinkedQueue","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.PlayerList":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to list the players currently connected to the server","description":"Command to list the players currently connected to the server","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"PlayerList","qualifiedname":"io.wolfscript.commandsys.commands.system.PlayerList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","java.util.List"],"properties":[]},"io.wolfscript.commandsys.commands.system.PluginCommand":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to enable, disable or reload plugins","description":"Command to enable, disable or reload plugins","doc":{"author":["Chris (damagefilter)"]},"name":"PluginCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.PluginCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[{"title":"PluginCommand constructor","description":"PluginCommand constructor","scope":"public","name":"PluginCommand","args":[{"name":"disable","type":"boolean","description":"disable argument"},{"name":"reload","type":"boolean","description":"reload argument"}]}],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.exceptions.InvalidPluginException","io.wolfscript.exceptions.PluginLoadFailedException","io.wolfscript.logger.Logman","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.ReloadCommand":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to reload the server (config, perms player data, etc.)","description":"Command to reload the server (config, perms player data, etc.)","doc":{"author":["Chris (damagefilter)"],"see":["Wolf#reload()"]},"name":"ReloadCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.ReloadCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.RestartServer":{"namespace":"io.wolfscript.commandsys.commands.system","title":"class RestartServer","description":"class RestartServer","name":"RestartServer","qualifiedname":"io.wolfscript.commandsys.commands.system.RestartServer","type":"class","scope":"public","constructors":[{"title":"RestartServer constructor","description":"RestartServer constructor","scope":"public","name":"RestartServer","args":[]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.commandsys.commands.system.StopServer":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Command to stop Wolf","description":"Command to stop Wolf","doc":{"author":["Chris (damagefilter)"]},"name":"StopServer","qualifiedname":"io.wolfscript.commandsys.commands.system.StopServer","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","net.visualillusionsent.utils.StringUtils"],"properties":[]},"io.wolfscript.commandsys.commands.system.bans.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.bans","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.bans","name":"bans","qualifiedname":"io.wolfscript.commandsys.commands.system.bans.0","packagename":"io.wolfscript.commandsys.commands.system.bans","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.bans.BanCommand","io.wolfscript.commandsys.commands.system.bans.IpBanCommand","io.wolfscript.commandsys.commands.system.bans.UnbanCommand"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.bans.BanCommand":{"namespace":"io.wolfscript.commandsys.commands.system.bans","title":"Command to ban players by name","description":"Command to ban players by name","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"BanCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.bans.BanCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.Translator","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.bansystem.Ban","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.event.player.Ban","net.visualillusionsent.utils.StringUtils","java.util.UUID","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.bans.IpBanCommand":{"namespace":"io.wolfscript.commandsys.commands.system.bans","title":"Command to ban players by ip","description":"Command to ban players by ip","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"IpBanCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.bans.IpBanCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.Translator","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.bansystem.Ban","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.event.player.Ban","net.visualillusionsent.utils.IPAddressUtils","net.visualillusionsent.utils.StringUtils","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.bans.UnbanCommand":{"namespace":"io.wolfscript.commandsys.commands.system.bans","title":"Command to unban a player","description":"Command to unban a player","doc":{"author":["Chris (damagefilter)"]},"name":"UnbanCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.bans.UnbanCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.OfflinePlayer","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.UUID","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.informational.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.informational","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.informational","name":"informational","qualifiedname":"io.wolfscript.commandsys.commands.system.informational.0","packagename":"io.wolfscript.commandsys.commands.system.informational","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.informational.SystemInformation","io.wolfscript.commandsys.commands.system.informational.Uptime","io.wolfscript.commandsys.commands.system.informational.WolfScriptCommand"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.informational.SystemInformation":{"namespace":"io.wolfscript.commandsys.commands.system.informational","title":"System Information read-out command","description":"System Information read-out command","doc":{"author":["Jason (darkdiplomat)"]},"name":"SystemInformation","qualifiedname":"io.wolfscript.commandsys.commands.system.informational.SystemInformation","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","net.visualillusionsent.utils.DateUtils","net.visualillusionsent.utils.SystemUtils","java.lang.management.ManagementFactory","java.lang.management.RuntimeMXBean","java.text.MessageFormat","java.util.TimeZone"],"properties":[]},"io.wolfscript.commandsys.commands.system.informational.Uptime":{"namespace":"io.wolfscript.commandsys.commands.system.informational","title":"Server Uptime Command","description":"Server Uptime Command","doc":{"author":["Jason (darkdiplomat)"]},"name":"Uptime","qualifiedname":"io.wolfscript.commandsys.commands.system.informational.Uptime","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.ToolBox","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","net.visualillusionsent.utils.DateUtils","java.lang.management.ManagementFactory","java.text.MessageFormat","java.util.TimeZone"],"properties":[]},"io.wolfscript.commandsys.commands.system.informational.WolfScriptCommand":{"namespace":"io.wolfscript.commandsys.commands.system.informational","title":"Command to get information about WolfScript","description":"Command to get information about WolfScript","doc":{"author":["Jason (darkdiplomat)"]},"name":"WolfScriptCommand","qualifiedname":"io.wolfscript.commandsys.commands.system.informational.WolfScriptCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.ArrayList","java.util.Collections","java.util.List"],"properties":[]},"io.wolfscript.commandsys.commands.system.kits.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.kits","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.kits","name":"kits","qualifiedname":"io.wolfscript.commandsys.commands.system.kits.0","packagename":"io.wolfscript.commandsys.commands.system.kits","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.kits.KitCreate","io.wolfscript.commandsys.commands.system.kits.KitDelete","io.wolfscript.commandsys.commands.system.kits.KitGive","io.wolfscript.commandsys.commands.system.kits.KitList"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.kits.KitCreate":{"namespace":"io.wolfscript.commandsys.commands.system.kits","title":"/kit create","description":"/kit create","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"KitCreate","qualifiedname":"io.wolfscript.commandsys.commands.system.kits.KitCreate","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.kit.Kit","io.wolfscript.user.Group","java.util.ArrayList","java.util.Arrays","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.Translator.translate","io.wolfscript.commandsys.WolfCommandPermissions.KIT","io.wolfscript.commandsys.WolfCommandPermissions.KIT"],"properties":[]},"io.wolfscript.commandsys.commands.system.kits.KitDelete":{"namespace":"io.wolfscript.commandsys.commands.system.kits","title":"/kit delete","description":"/kit delete","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"KitDelete","qualifiedname":"io.wolfscript.commandsys.commands.system.kits.KitDelete","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.kit.Kit","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.kits.KitGive":{"namespace":"io.wolfscript.commandsys.commands.system.kits","title":"/kit give","description":"/kit give","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"KitGive","qualifiedname":"io.wolfscript.commandsys.commands.system.kits.KitGive","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.kit.Kit","io.wolfscript.kit.KitProvider","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.commandsys.WolfCommandPermissions.KIT"],"properties":[]},"io.wolfscript.commandsys.commands.system.kits.KitList":{"namespace":"io.wolfscript.commandsys.commands.system.kits","title":"/kit list","description":"/kit list","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"KitList","qualifiedname":"io.wolfscript.commandsys.commands.system.kits.KitList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["com.google.common.collect.Lists","io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.kit.Kit","java.util.Collections","java.util.List"],"properties":[]},"io.wolfscript.commandsys.commands.system.operator.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.operator","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.operator","name":"operator","qualifiedname":"io.wolfscript.commandsys.commands.system.operator.0","packagename":"io.wolfscript.commandsys.commands.system.operator","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.operator.DeOp","io.wolfscript.commandsys.commands.system.operator.Op","io.wolfscript.commandsys.commands.system.operator.OpList"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.operator.DeOp":{"namespace":"io.wolfscript.commandsys.commands.system.operator","title":"DeOp Command","description":"DeOp Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DeOp","qualifiedname":"io.wolfscript.commandsys.commands.system.operator.DeOp","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.OperatorsProvider","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.operator.Op":{"namespace":"io.wolfscript.commandsys.commands.system.operator","title":"Op Command","description":"Op Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Op","qualifiedname":"io.wolfscript.commandsys.commands.system.operator.Op","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.OperatorsProvider","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.system.operator.OpList":{"namespace":"io.wolfscript.commandsys.commands.system.operator","title":"Operators List command","description":"Operators List command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"OpList","qualifiedname":"io.wolfscript.commandsys.commands.system.operator.OpList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.UUID"],"properties":[]},"io.wolfscript.commandsys.commands.system.reservelist.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.reservelist","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.reservelist","name":"reservelist","qualifiedname":"io.wolfscript.commandsys.commands.system.reservelist.0","packagename":"io.wolfscript.commandsys.commands.system.reservelist","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.reservelist.ReservelistAdd","io.wolfscript.commandsys.commands.system.reservelist.ReservelistRemove","io.wolfscript.commandsys.commands.system.reservelist.ReservelistShow"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.reservelist.ReservelistAdd":{"namespace":"io.wolfscript.commandsys.commands.system.reservelist","title":"ReserveList Add Command","description":"ReserveList Add Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReservelistAdd","qualifiedname":"io.wolfscript.commandsys.commands.system.reservelist.ReservelistAdd","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.reservelist","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.reservelist.ReservelistRemove":{"namespace":"io.wolfscript.commandsys.commands.system.reservelist","title":"Reserve Remove Command","description":"Reserve Remove Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReservelistRemove","qualifiedname":"io.wolfscript.commandsys.commands.system.reservelist.ReservelistRemove","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.reservelist","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.reservelist.ReservelistShow":{"namespace":"io.wolfscript.commandsys.commands.system.reservelist","title":"Reservelist Show (List) Command","description":"Reservelist Show (List) Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReservelistShow","qualifiedname":"io.wolfscript.commandsys.commands.system.reservelist.ReservelistShow","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"receiver","type":"io.wolfscript.chat.MessageReceiver","description":"receiver argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.reservelist"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.0":{"namespace":"io.wolfscript.commandsys.commands.system","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.whitelist","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.system.whitelist","name":"whitelist","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.0","packagename":"io.wolfscript.commandsys.commands.system.whitelist","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.system.whitelist.WhitelistAdd","io.wolfscript.commandsys.commands.system.whitelist.WhitelistDisable","io.wolfscript.commandsys.commands.system.whitelist.WhitelistEnable","io.wolfscript.commandsys.commands.system.whitelist.WhitelistReload","io.wolfscript.commandsys.commands.system.whitelist.WhitelistRemove","io.wolfscript.commandsys.commands.system.whitelist.WhitelistShow"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistAdd":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Add Command","description":"Whitelist Add Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistAdd","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistAdd","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.whitelist","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistDisable":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Disable (Off) Command","description":"Whitelist Disable (Off) Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistDisable","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistDisable","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.config.Configuration","net.visualillusionsent.utils.PropertiesFile","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistEnable":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Enable (On) Command","description":"Whitelist Enable (On) Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistEnable","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistEnable","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.config.Configuration","net.visualillusionsent.utils.PropertiesFile","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistReload":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Remove Command","description":"Whitelist Remove Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistReload","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistReload","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.whitelist","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistRemove":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Remove Command","description":"Whitelist Remove Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistRemove","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistRemove","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.whitelist","io.wolfscript.Translator.sendTranslatedMessage"],"properties":[]},"io.wolfscript.commandsys.commands.system.whitelist.WhitelistShow":{"namespace":"io.wolfscript.commandsys.commands.system.whitelist","title":"Whitelist Show (List) Command","description":"Whitelist Show (List) Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WhitelistShow","qualifiedname":"io.wolfscript.commandsys.commands.system.whitelist.WhitelistShow","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"receiver","type":"io.wolfscript.chat.MessageReceiver","description":"receiver argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Wolf.whitelist"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.vanilla","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.vanilla","name":"vanilla","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.0","packagename":"io.wolfscript.commandsys.commands.vanilla","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.vanilla.Achievement","io.wolfscript.commandsys.commands.vanilla.BlockData","io.wolfscript.commandsys.commands.vanilla.Broadcast","io.wolfscript.commandsys.commands.vanilla.Clear","io.wolfscript.commandsys.commands.vanilla.Clone","io.wolfscript.commandsys.commands.vanilla.Debug","io.wolfscript.commandsys.commands.vanilla.DefaultGameMode","io.wolfscript.commandsys.commands.vanilla.DefaultSpawnpoint","io.wolfscript.commandsys.commands.vanilla.Difficulty","io.wolfscript.commandsys.commands.vanilla.Effect","io.wolfscript.commandsys.commands.vanilla.Emote","io.wolfscript.commandsys.commands.vanilla.Enchant","io.wolfscript.commandsys.commands.vanilla.EntityData","io.wolfscript.commandsys.commands.vanilla.Execute","io.wolfscript.commandsys.commands.vanilla.Fill","io.wolfscript.commandsys.commands.vanilla.GameMode","io.wolfscript.commandsys.commands.vanilla.GameRule","io.wolfscript.commandsys.commands.vanilla.Give","io.wolfscript.commandsys.commands.vanilla.Kill","io.wolfscript.commandsys.commands.vanilla.Message","io.wolfscript.commandsys.commands.vanilla.MessageRaw","io.wolfscript.commandsys.commands.vanilla.Particle","io.wolfscript.commandsys.commands.vanilla.PlaySound","io.wolfscript.commandsys.commands.vanilla.ReplaceItem","io.wolfscript.commandsys.commands.vanilla.SaveAll","io.wolfscript.commandsys.commands.vanilla.SaveOff","io.wolfscript.commandsys.commands.vanilla.SaveOn","io.wolfscript.commandsys.commands.vanilla.Scoreboard","io.wolfscript.commandsys.commands.vanilla.SetBlock","io.wolfscript.commandsys.commands.vanilla.SpawnPoint","io.wolfscript.commandsys.commands.vanilla.SpreadPlayers","io.wolfscript.commandsys.commands.vanilla.Stats","io.wolfscript.commandsys.commands.vanilla.Summon","io.wolfscript.commandsys.commands.vanilla.Teleport","io.wolfscript.commandsys.commands.vanilla.TestFor","io.wolfscript.commandsys.commands.vanilla.TestForBlock","io.wolfscript.commandsys.commands.vanilla.TestForBlocks","io.wolfscript.commandsys.commands.vanilla.Time","io.wolfscript.commandsys.commands.vanilla.Title","io.wolfscript.commandsys.commands.vanilla.ToggleDownfall","io.wolfscript.commandsys.commands.vanilla.Trigger","io.wolfscript.commandsys.commands.vanilla.Weather","io.wolfscript.commandsys.commands.vanilla.WorldBorder","io.wolfscript.commandsys.commands.vanilla.XP"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Achievement":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Achievement command wrapper","description":"Achievement command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Achievement","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Achievement","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.ACHIEVEMENT"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.BlockData":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"BlockData command wrapper","description":"BlockData command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockData","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.BlockData","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Broadcast":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Broadcast command wrapper","description":"Broadcast command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Broadcast","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Broadcast","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Clear":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Clear Inventory command wrapper","description":"Clear Inventory command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Clear","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Clear","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","describe":"final","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.WolfCommandPermissions.CLEAR"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Clone":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Clone command wrapper","description":"Clone command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Clone","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Clone","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Debug":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Debug command wrapper","description":"Debug command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Debug","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Debug","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.DefaultGameMode":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Default GameMode command wrapper","description":"Default GameMode command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DefaultGameMode","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.DefaultGameMode","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.DefaultSpawnpoint":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Default GameMode command wrapper","description":"Default GameMode command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"DefaultSpawnpoint","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.DefaultSpawnpoint","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Difficulty":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Difficulty command wrapper","description":"Difficulty command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Difficulty","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Difficulty","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Effect":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Effect command wrapper","description":"Effect command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Effect","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Effect","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.EFFECT"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Emote":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Emote command wrapper","description":"Emote command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Emote","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Emote","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Enchant":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Enchant command wrapper","description":"Enchant command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Enchant","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Enchant","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.ENCHANT"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.EntityData":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"EntityData command wrapper","description":"EntityData command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityData","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.EntityData","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Execute":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Execute command wrapper","description":"Execute command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Execute","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Execute","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Fill":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Fill command wrapper","description":"Fill command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Fill","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Fill","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.GameMode":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"GameMode command wrapper","description":"GameMode command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"GameMode","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.GameMode","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.GAMEMODE"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.GameRule":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"GameRule command wrapper","description":"GameRule command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"GameRule","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.GameRule","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Give":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Give command wrapper","description":"Give command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Give","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Give","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.GIVE"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Kill":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Kill command wrapper","description":"Kill command wrapper","doc":{"author":["Almog (Swift)"]},"name":"Kill","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Kill","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.KILL"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Message":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Message command wrapper","description":"Message command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Message","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Message","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.MessageRaw":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Message Raw command wrapper","description":"Message Raw command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"MessageRaw","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.MessageRaw","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Particle":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Particle command wrapper","description":"Particle command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Particle","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Particle","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.PlaySound":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"PlaySound command wrapper","description":"PlaySound command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PlaySound","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.PlaySound","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.PLAYSOUND"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.ReplaceItem":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"ReplaceItem command wrapper","description":"ReplaceItem command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"ReplaceItem","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.ReplaceItem","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SaveAll":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Save-All command wrapper","description":"Save-All command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SaveAll","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SaveAll","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SaveOff":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Save-Off command wrapper","description":"Save-Off command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SaveOff","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SaveOff","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SaveOn":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Save-On command wrapper","description":"Save-On command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SaveOn","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SaveOn","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Scoreboard":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Scoreboard command wrapper","description":"Scoreboard command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Scoreboard","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Scoreboard","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SetBlock":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"SetBlock command wrapper","description":"SetBlock command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SetBlock","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SetBlock","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SpawnPoint":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"SetSpawnPoint command wrapper","description":"SetSpawnPoint command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SpawnPoint","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SpawnPoint","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.SPAWNPOINT"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.SpreadPlayers":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"SpreadPlayers command wrapper","description":"SpreadPlayers command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"SpreadPlayers","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.SpreadPlayers","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Stats":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Stats command wrapper","description":"Stats command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Stats","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Stats","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Summon":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Summon command wrapper","description":"Summon command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Summon","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Summon","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Teleport":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Teleport command wrapper","description":"Teleport command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Teleport","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Teleport","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.TELEPORT"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.TestFor":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"TestFor command wrapper","description":"TestFor command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TestFor","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.TestFor","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.TestForBlock":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"TestForBlock command wrapper","description":"TestForBlock command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"TestForBlock","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.TestForBlock","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.TestForBlocks":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"TestForBlocks command wrapper","description":"TestForBlocks command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"TestForBlocks","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.TestForBlocks","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Time":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Time command wrapper","description":"Time command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Time","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Time","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Title":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Title command wrapper","description":"Title command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Title","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Title","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.ToggleDownfall":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"ToggleDownfall command wrapper","description":"ToggleDownfall command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ToggleDownfall","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.ToggleDownfall","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Trigger":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Trigger command wrapper","description":"Trigger command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"Trigger","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Trigger","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.Weather":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"Weather command wrapper","description":"Weather command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"Weather","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.Weather","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.WorldBorder":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"WorldBorder command wrapper","description":"WorldBorder command wrapper","doc":{"author":["Jason (darkdiplomat)"]},"name":"WorldBorder","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.WorldBorder","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.vanilla.XP":{"namespace":"io.wolfscript.commandsys.commands.vanilla","title":"XP command wrapper","description":"XP command wrapper","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"XP","qualifiedname":"io.wolfscript.commandsys.commands.vanilla.XP","type":"class","scope":"public","describe":"final","extends":["VanillaCommandWrapper"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Translator","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommandPermissions.XP"],"properties":[]},"io.wolfscript.commandsys.commands.warp.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.warp","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.warp","name":"warp","qualifiedname":"io.wolfscript.commandsys.commands.warp.0","packagename":"io.wolfscript.commandsys.commands.warp","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.warp.Home","io.wolfscript.commandsys.commands.warp.SetHome","io.wolfscript.commandsys.commands.warp.SpawnCommand","io.wolfscript.commandsys.commands.warp.WarpList","io.wolfscript.commandsys.commands.warp.WarpRemove","io.wolfscript.commandsys.commands.warp.WarpSet","io.wolfscript.commandsys.commands.warp.WarpUse"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.warp.Home":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to teleport you to your own or another player home","description":"Command to teleport you to your own or another player home","doc":{"author":["Chris (damagefilter)"]},"name":"Home","qualifiedname":"io.wolfscript.commandsys.commands.warp.Home","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.commandsys.WolfCommandPermissions.HOME"],"properties":[]},"io.wolfscript.commandsys.commands.warp.SetHome":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to set your or another players home","description":"Command to set your or another players home","doc":{"author":["Chris (damagefilter)"]},"name":"SetHome","qualifiedname":"io.wolfscript.commandsys.commands.warp.SetHome","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.warp.SpawnCommand":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to teleport yourself or someone else to spawn","description":"Command to teleport yourself or someone else to spawn","doc":{"author":["Chris (damagefilter)"]},"name":"SpawnCommand","qualifiedname":"io.wolfscript.commandsys.commands.warp.SpawnCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.UnknownWorldException","io.wolfscript.api.world.World","io.wolfscript.api.world.position.Location","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.config.Configuration","io.wolfscript.event.player.Teleport","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.warp.WarpList":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to list all warps","description":"Command to list all warps","doc":{"author":["Chris (damagefilter)"]},"name":"WarpList","qualifiedname":"io.wolfscript.commandsys.commands.warp.WarpList","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.warp.Warp","java.util.List","io.wolfscript.Wolf.log","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.warp.WarpRemove":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to remove a warp","description":"Command to remove a warp","doc":{"author":["Chris (damagefilter)"]},"name":"WarpRemove","qualifiedname":"io.wolfscript.commandsys.commands.warp.WarpRemove","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.warp.Warp","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.warp.WarpSet":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to set a warp (including private and group warps)","description":"Command to set a warp (including private and group warps)","doc":{"author":["Chris (damagefilter)"]},"name":"WarpSet","qualifiedname":"io.wolfscript.commandsys.commands.warp.WarpSet","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.user.Group","io.wolfscript.warp.Warp","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP","io.wolfscript.commandsys.WolfCommandPermissions.WARP"],"properties":[]},"io.wolfscript.commandsys.commands.warp.WarpUse":{"namespace":"io.wolfscript.commandsys.commands.warp","title":"Command to warp yourself to a warp","description":"Command to warp yourself to a warp","doc":{"author":["Chris (damagefilter)"]},"name":"WarpUse","qualifiedname":"io.wolfscript.commandsys.commands.warp.WarpUse","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.chat.ReceiverType","io.wolfscript.commandsys.NativeCommand","io.wolfscript.warp.Warp","io.wolfscript.Translator.sendTranslatedMessage","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.0":{"namespace":"io.wolfscript.commandsys.commands","title":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.world","description":"Classes and interfaces for namespace io.wolfscript.commandsys.commands.world","name":"world","qualifiedname":"io.wolfscript.commandsys.commands.world.0","packagename":"io.wolfscript.commandsys.commands.world","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.commandsys.commands.world.CreateWorldCommand","io.wolfscript.commandsys.commands.world.DeleteWorldCommand","io.wolfscript.commandsys.commands.world.ListWorldsCommand","io.wolfscript.commandsys.commands.world.LoadWorldCommand","io.wolfscript.commandsys.commands.world.MobClear","io.wolfscript.commandsys.commands.world.MobCount","io.wolfscript.commandsys.commands.world.MobSpawnerCheck","io.wolfscript.commandsys.commands.world.MobSpawnerSet","io.wolfscript.commandsys.commands.world.UnloadWorldCommand","io.wolfscript.commandsys.commands.world.WorldInfoCommand"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.commandsys.commands.world.CreateWorldCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"Create World Command","description":"Create World Command","doc":{"author":["Jason (darkdiplomat)"]},"name":"CreateWorldCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.CreateWorldCommand","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.WorldManager","io.wolfscript.api.world.WorldType","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.DeleteWorldCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"class DeleteWorldCommand","description":"class DeleteWorldCommand","doc":{"author":["Jason (darkdiplomat)"]},"name":"DeleteWorldCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.DeleteWorldCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"run method","description":"run method","scope":"public","return":"void","name":"run","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.tasks.ServerTask","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.ListWorldsCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"World List Command","description":"World List Command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ListWorldsCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.ListWorldsCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.world.WorldManager","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand"],"properties":[]},"io.wolfscript.commandsys.commands.world.LoadWorldCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"Checks for and loads a World","description":"Checks for and loads a World","doc":{"author":["Jason (darkdiplomat)"]},"name":"LoadWorldCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.LoadWorldCommand","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","describe":"final","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.WorldManager","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.regex.Matcher","java.util.regex.Pattern","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.MobClear":{"namespace":"io.wolfscript.commandsys.commands.world","title":"Mob Clearing subcommnand","description":"Mob Clearing subcommnand","doc":{"author":["Jason (darkdiplomat)"]},"name":"MobClear","qualifiedname":"io.wolfscript.commandsys.commands.world.MobClear","type":"class","scope":"public","describe":"final","extends":["MobCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.Translator","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.animal.Tameable","io.wolfscript.api.world.World","io.wolfscript.chat.MessageReceiver","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.MobCount":{"namespace":"io.wolfscript.commandsys.commands.world","title":"Mob count subcommnand","description":"Mob count subcommnand","doc":{"author":["Jason (darkdiplomat)"]},"name":"MobCount","qualifiedname":"io.wolfscript.commandsys.commands.world.MobCount","type":"class","scope":"public","describe":"final","extends":["MobCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.animal.Tameable","io.wolfscript.api.world.World","io.wolfscript.chat.MessageReceiver","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.MobSpawnerCheck":{"namespace":"io.wolfscript.commandsys.commands.world","title":"MobSpawner check subcommand","description":"MobSpawner check subcommand","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"MobSpawnerCheck","qualifiedname":"io.wolfscript.commandsys.commands.world.MobSpawnerCheck","type":"class","scope":"public","extends":["MobSpawnerCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.api.MobSpawnerLogic","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.MobSpawner","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.world.MobSpawnerSet":{"namespace":"io.wolfscript.commandsys.commands.world","title":"MobSpawner set subcommand","description":"MobSpawner set subcommand","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"MobSpawnerSet","qualifiedname":"io.wolfscript.commandsys.commands.world.MobSpawnerSet","type":"class","scope":"public","extends":["MobSpawnerCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.api.MobSpawnerLogic","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.MobSpawner","io.wolfscript.chat.MessageReceiver"],"properties":[]},"io.wolfscript.commandsys.commands.world.UnloadWorldCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"Checks for and unloads a World","description":"Checks for and unloads a World","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"UnloadWorldCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.UnloadWorldCommand","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","describe":"final","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.WorldManager","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","java.util.regex.Matcher","java.util.regex.Pattern","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.commandsys.commands.world.WorldInfoCommand":{"namespace":"io.wolfscript.commandsys.commands.world","title":"World Information command","description":"World Information command","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WorldInfoCommand","qualifiedname":"io.wolfscript.commandsys.commands.world.WorldInfoCommand","type":"class","scope":"public","implements":["io.wolfscript.commandsys.NativeCommand"],"constructors":[],"methods":[{"title":"execute method","description":"execute method","scope":"public","return":"void","name":"execute","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.animal.Tameable","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.api.world.WorldManager","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.NativeCommand","io.wolfscript.config.Configuration","io.wolfscript.config.WorldConfiguration","java.util.Map","java.util.regex.Matcher","java.util.regex.Pattern","io.wolfscript.Translator.sendTranslatedNotice"],"properties":[]},"io.wolfscript.config.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.config","description":"Classes and interfaces for namespace io.wolfscript.config","name":"config","qualifiedname":"io.wolfscript.config.0","packagename":"io.wolfscript.config","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.config.Configuration","io.wolfscript.config.DatabaseConfiguration","io.wolfscript.config.ServerConfiguration","io.wolfscript.config.WorldConfiguration"],"interfaces":["io.wolfscript.config.ConfigurationContainer"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.config.Configuration":{"namespace":"io.wolfscript.config","title":"A caching configuration provider.","description":"A caching configuration provider. This class performs file lookup and caching. Use this class to get access to a configuration file.","doc":{"author":["Jos Kuijpers"]},"name":"Configuration","qualifiedname":"io.wolfscript.config.Configuration","type":"class","scope":"public","constructors":[],"methods":[{"title":"Reload all configuration from disk","description":"Reload all configuration from disk /\n    public static void reload() {\n        serverConfig.reload();\n        dbConfig.reload();\n\n        // Reload world configurations\n        for (WorldConfiguration wc : worldConfigs.values()) {\n            wc.reload();\n        }\n\n        // Clear the cache\n        plugin_cfg_cache.clear();\n    }\n\n    private static PropertiesFile getPluginCachedConfig(Plugin plugin, String filepath) {\n        if (!plugin_cfg_cache.containsKey(plugin)) {\n            plugin_cfg_cache.put(plugin, new HashMap<String, PropertiesFile>());\n        }\n        if (!plugin_cfg_cache.get(plugin).containsKey(filepath)) {\n            PropertiesFile file = new PropertiesFile(filepath);\n            file.save();\n\n            plugin_cfg_cache.get(plugin).put(filepath, file);\n        }\n        return plugin_cfg_cache.get(plugin).get(filepath);\n    }\n\n    /** Gets the server configuration","doc":{"return":["server configuration file /\n    public static ServerConfiguration getServerConfig() {\n        return serverConfig;\n    }\n\n    /** Gets the net configuration","networking configuration file /\n    public static DatabaseConfiguration getDbConfig() {\n        return dbConfig;\n    }\n\n    /** Get the world configuration for the specified world","world configuration /\n    public static WorldConfiguration getWorldConfig(String world) {\n        WorldConfiguration r = worldConfigs.get(world);\n        if (r != null) {\n            return r;\n        }\n        String[] split = world.split(\"_\");\n        WorldConfiguration config = new WorldConfiguration(\"config\" + File.separatorChar + \"worlds\" + File.separatorChar + split[0], world);\n\n        worldConfigs.put(world, config);\n        return config;\n    }\n\n    /** Gets the server-wide configuration of a plugin","configuration of a {@link io.wolfscript.plugin.Plugin} /\n    public static PropertiesFile getPluginConfig(Plugin plugin) {\n        return Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + \".cfg\");\n    }\n\n    /** Gets the server-wide configuration of a {@link io.wolfscript.plugin.Plugin}","configuration of a {@link io.wolfscript.plugin.Plugin} /\n    public static PropertiesFile getPluginConfig(Plugin plugin, String module) {\n        return Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + \".\" + module + \".cfg\");\n    }\n\n    /** Gets the world-specific configuration of a {@link io.wolfscript.plugin.Plugin} If there is no world-specific configuration, it will take the server-wide configuration","configuration of a {@link io.wolfscript.plugin.Plugin} /\n    public static PropertiesFile getPluginConfig(Plugin plugin, World world) {\n        PropertiesFile file = Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + \"worlds\" + File.separatorChar + world.getFqName() + File.separatorChar + plugin.getName() + \".cfg\");\n\n        if (file == null) {\n            file = Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + \".cfg\");\n        }\n        return file;\n    }\n\n    /** Gets the world-specific configuration of a {@link io.wolfscript.plugin.Plugin} If there is no world-specific configuration, it will take the server-wide configuration","configuration of a {@link io.wolfscript.plugin.Plugin} /\n    public static PropertiesFile getPluginConfig(Plugin plugin, String module, World world) {\n        PropertiesFile file = Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + \"worlds\" + File.separatorChar + world.getFqName() + File.separatorChar + plugin.getName() + \".\" + module + \".cfg\");\n\n        if (file == null) {\n            file = Configuration.getPluginCachedConfig(plugin, \"config\" + File.separatorChar + plugin.getName() + File.separatorChar + plugin.getName() + \".\" + module + \".cfg\");\n        }\n        return file;\n    }\n\n    /** Clears the configuration files of a {@link io.wolfscript.plugin.Plugin} from the cache"]},"scope":"public","describe":"static","return":"void","name":"clearPluginCachedConfigs","args":[{"name":"plugin","type":"io.wolfscript.plugin.Plugin","description":"the {@link io.wolfscript.plugin.Plugin} to get configuration for"}]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.plugin.Plugin","net.visualillusionsent.utils.PropertiesFile","java.io.File","java.util.HashMap"],"properties":[]},"io.wolfscript.config.ConfigurationContainer":{"namespace":"io.wolfscript.config","title":"This is an access container for ConfigurationFile objects","description":"This is an access container for ConfigurationFile objects to make access more convenient","doc":{"author":["Chris Ksoll"]},"name":"ConfigurationContainer","qualifiedname":"io.wolfscript.config.ConfigurationContainer","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["net.visualillusionsent.utils.PropertiesFile"],"properties":[]},"io.wolfscript.config.DatabaseConfiguration":{"namespace":"io.wolfscript.config","title":"Database Configuration settings","description":"Database Configuration settings","doc":{"author":["Jos Kuijpers","Jason (darkdiplomat)"]},"name":"DatabaseConfiguration","qualifiedname":"io.wolfscript.config.DatabaseConfiguration","type":"class","scope":"public","implements":["io.wolfscript.config.ConfigurationContainer"],"constructors":[{"title":"DatabaseConfiguration constructor","description":"DatabaseConfiguration constructor","scope":"public","name":"DatabaseConfiguration","args":[{"name":"path","type":"String","description":"path argument"}]}],"methods":[],"imports":["net.visualillusionsent.utils.PropertiesFile","java.io.File","io.wolfscript.Wolf.log"],"properties":[{"name":"BansTableName","modifier":"readonly","args":[],"description":"BansTableName property","return":"String","scope":"public","title":"BansTableName property"},{"name":"GroupsTableName","modifier":"readonly","args":[],"description":"GroupsTableName property","return":"String","scope":"public","title":"GroupsTableName property"},{"name":"KitsTableName","modifier":"readonly","args":[],"description":"KitsTableName property","return":"String","scope":"public","title":"KitsTableName property"},{"name":"MaxConnectionIdleTime","modifier":"readonly","args":[],"description":"Get: Reloads the configuration file /\n    @Override\n    public void reload() {\n        cfg.reload();\n        verifyConfig();\n    }\n\n    /** Get the configuration file /\n    @Override\n    public PropertiesFile getFile() {\n        return cfg;\n    }\n\n    /** Creates the default configuration /\n    private void verifyConfig() {\n        cfg.clearHeader();\n        cfg.addHeaderLines(\n                \"For more settings explanations see following websites ...\",\n                \"http://javatech.org/2007/11/c3p0-connectionpool-configuration-rules-of-thumb/\",\n                \"https://community.jboss.org/wiki/HowToConfigureTheC3P0ConnectionPool?_sscc=t\"\n                          );\n\n        cfg.getString(\"name\", \"wolfscript\");\n        cfg.getString(\"host\", \"localhost\");\n        cfg.getString(\"username\", \"admin\");\n        cfg.getString(\"password\", \"admin\");\n        cfg.getInt(\"port\", 3306);\n        cfg.getInt(\"maxConnections\", 5);\n\n        // c3p0 settings\n\n        cfg.getInt(\"acquire-increment\", 5);\n        cfg.setComments(\"acquire-increment\", \"Determines how many connections at a time c3p0 will try to acquire when the pool is exhausted.\");\n\n        cfg.getInt(\"max-connection-idle-time\", 900); //15 minutes\n        cfg.setComments(\"max-connection-idle-time\", \"Determines how long idle connections can stay in the connection pool before they are removed.\");\n\n        cfg.getInt(\"max-excess-connections-idle-time\", 1800); // 30 minutes\n        cfg.setComments(\"max-excess-connections-idle-time\", \"Time until the connection pool will be culled down to min-connection-pool-size. Set 0 to not enforce pool shrinking.\");\n\n        cfg.getInt(\"max-connection-pool-size\", 10);\n        cfg.setComments(\"max-connection-pool-size\", \"The maximum allowed number of pooled connections. More for larger servers\");\n\n        cfg.getInt(\"min-connection-pool-size\", 3);\n        cfg.setComments(\"min-connection-pool-size\", \"The minimum amount of connections allowed. More means more memory usage but takes away some impact from creating new connections.\");\n\n        cfg.getInt(\"num-helper-threads\", 4);\n        cfg.setComments(\"num-helper-threads\", \"Amount of threads that will perform slow JDBC operations (closing idle connections, returning connections to pool etc)\");\n\n        cfg.getInt(\"return-connection-timeout\", 900); //15 minutes\n        cfg.setComments(\"return-connection-timeout\", \"Defines a time a connection can remain checked out. After that it will be forced back into the connection pool.\");\n\n        cfg.getInt(\"connection-test-frequency\", 0); // 60 minutes\n        cfg.setComments(\"idle-connection-test-frequency\", \"Every this amount of seconds idle connections will be checked for validity. Set 0 to turn off\");\n\n        cfg.getInt(\"max-cached-statements\", 50);\n        cfg.setComments(\"max-cached-statements\", \"Number of max cached statements on all connections. (Roughly 5 expected pooled connections)\");\n\n        cfg.getInt(\"max-statements-per-connection\", 5);\n        cfg.setComments(\"max-statements-per-connection\", \"Number of max cached statements on a single connection.\");\n\n        cfg.getInt(\"statement-cache-close-threads\", 1);\n        cfg.setComments(\"statement-cache-close-threads\", \"Number of threads to use when closing statements is deferred (happens when parent connection is still in use)\");\n\n        // Table Naming Schemes...\n        cfg.getString(\"bans-table-name\", \"ban\");\n        cfg.setComments(\"bans-table-name\", \"The name to use for the Bans table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"groups-table-name\", \"group\");\n        cfg.setComments(\"groups-table-name\", \"The name to use for the Groups table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"kits-table-name\", \"kit\");\n        cfg.setComments(\"kits-table-name\", \"The name to use for the Kits table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"operators-table-name\", \"operators\");\n        cfg.setComments(\"operators-table-name\", \"The name to use for the Operators table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"permissions-table-name\", \"permission\");\n        cfg.setComments(\"permissions-table-name\", \"The name to use for the Permissions table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"players-table-name\", \"player\");\n        cfg.setComments(\"players-table-name\", \"The name to use for the Permissions table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"reservelist-table-name\", \"reservelist\");\n        cfg.setComments(\"reservelist-table-name\", \"The name to use for the ReserveList table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"warps-table-name\", \"warp\");\n        cfg.setComments(\"warps-table-name\", \"The name to use for the Warps table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n\n        cfg.getString(\"whitelist-table-name\", \"whitelist\");\n        cfg.setComments(\"whitelist-table-name\", \"The name to use for the WhiteList table. NOTE: Changing this here will require you to manually change the name of the table in the database (if present)\");\n        //\n\n        cfg.save();\n    }\n\n    /** Get the URL to the database. This is a combination of host, port and database","doc":{"param":["driver the JDBC driver name (ie: mysql or sqlite)"],"return":["database url /\n    public String getDatabaseUrl(String driver) {\n        int port = getDatabasePort();\n        return \"jdbc:\" + driver + \"://\" + getDatabaseHost() + ((port == 0) ? \"\" : (\":\" + port)) + \"/\" + getDatabaseName();\n    }\n\n    /** Get the database host, defaulting to localhost","database host /\n    public String getDatabaseHost() {\n        return cfg.getString(\"host\", \"localhost\");\n    }\n\n    /** Get the database port","The configured port or 0 /\n    public int getDatabasePort() {\n        return cfg.getInt(\"port\", 0);\n    }\n\n    /** Get the name of the database. Defaults to 'wolfscript'","database name /\n    public String getDatabaseName() {\n        return cfg.getString(\"name\", \"wolfscript\");\n    }\n\n    /** Get database user This might be null if the datasource is not a password protected database type such as XML.","database username /\n    public String getDatabaseUser() {\n        return cfg.getString(\"username\");\n    }\n\n    /** Get database password. This might be null if the datasource is not a password protected database type such as XML.","database password /\n    public String getDatabasePassword() {\n        return cfg.getString(\"password\");\n    }\n\n    /** Get the maximum number of concurrent connections to the database. This might be null if the datasource is not a connection oriented database type such as XML.","database maximum connections /\n    public int getDatabaseMaxConnections() {\n        return cfg.getInt(\"maxConnections\");\n    }\n\n    /** Defines the total number PreparedStatements a DataSource will cache. The pool will destroy the least-recently-used PreparedStatement when it hits this limit.","config for max cached statements /\n    public int getMaxCachedStatements() {\n        return cfg.getInt(\"max-cached-statements\", 50);\n    }\n\n    /** Defines how many statements each pooled Connection is allowed to own. You can set this to a bit more than the number of PreparedStatements your application frequently uses, to avoid churning.","config for max num of pooled statements per connection /\n    public int getMaxCachedStatementsPerConnection() {\n        return cfg.getInt(\"max-statements-per-connection\", 5);\n    }\n\n    /** If greater than zero, the Statement pool will defer physically close()ing cached Statements until its parent Connection is not in use by any client or internally (in e.g. a test) by the pool itself.","config num of threads used to defer closing statements /\n    public int getNumStatementCloseThreads() {\n        return cfg.getInt(\"statement-cache-close-threads\", 1);\n    }\n\n    /** Defines the interval of checking validity of pooled connections in seconds.","connection re-check interval /\n    public int getConnectionTestFrequency() {\n        return cfg.getInt(\"connection-test-frequency\", 3600);\n    }\n\n    /** Defines the time in seconds a connection can stay checked out, before it is returned to the connection pool.","num of seconds a connection can stay checked out /\n    public int getReturnConnectionTimeout() {\n        return cfg.getInt(\"return-connection-timeout\", 900);\n    }\n\n    /** Defines the amount of threads to use when executing slow JDBC operations, such as closing connections and statements.","num of threads to use for heavy JDBC operations /\n    public int getNumHelperThreads() {\n        return cfg.getInt(\"num-helper-threads\", 4);\n    }\n\n    /** Defines the minimum amount of connections to keep alive in the connection pool.","min amount of connections /\n    public int getMinPoolSize() {\n        return cfg.getInt(\"min-connection-pool-size\", 3);\n    }\n\n    /** Defines the maximum allowed number of connections in the connection pool.","max allowed connections in pool /\n    public int getMaxPoolSize() {\n        return cfg.getInt(\"max-connection-pool-size\", 10);\n    }\n\n    /** Number of seconds that Connections in excess of minPoolSize should be permitted to remain idle in the pool before being culled. Set 0 to turn off culling","seconds to keep excess connections /\n    public int getMaxExcessConnectionsIdleTime() {\n        return cfg.getInt(\"max-excess-connections-idle-time\", 1800);\n    }\n\n    /** Determines how many connections at a time to acquire when the pool is exhausted.","connections to acquire /\n    public int getAcquireIncrement() {\n        return cfg.getInt(\"acquire-increment\", 5);\n    }\n\n    /** Time to keep idle connections in the pool before they are closed and discarded.","keep-alive time of connections in pool"]},"return":"int","scope":"public","title":"Get: Reloads the configuration file"},{"name":"OpertatorsTableName","modifier":"readonly","args":[],"description":"OpertatorsTableName property","return":"String","scope":"public","title":"OpertatorsTableName property"},{"name":"PermissionsTableName","modifier":"readonly","args":[],"description":"PermissionsTableName property","return":"String","scope":"public","title":"PermissionsTableName property"},{"name":"PlayersTableName","modifier":"readonly","args":[],"description":"PlayersTableName property","return":"String","scope":"public","title":"PlayersTableName property"},{"name":"ReservelistTableName","modifier":"readonly","args":[],"description":"ReservelistTableName property","return":"String","scope":"public","title":"ReservelistTableName property"},{"name":"WarpsTableName","modifier":"readonly","args":[],"description":"WarpsTableName property","return":"String","scope":"public","title":"WarpsTableName property"},{"name":"WhitelistTableName","modifier":"readonly","args":[],"description":"WhitelistTableName property","return":"String","scope":"public","title":"WhitelistTableName property"}]},"io.wolfscript.config.ServerConfiguration":{"namespace":"io.wolfscript.config","title":"Server Configuration Container","description":"Server Configuration Container","doc":{"author":["Jos Kuijpers","Jason (darkdiplomat)"]},"name":"ServerConfiguration","qualifiedname":"io.wolfscript.config.ServerConfiguration","type":"class","scope":"public","implements":["io.wolfscript.config.ConfigurationContainer"],"constructors":[{"title":"ServerConfiguration constructor","description":"ServerConfiguration constructor","scope":"public","name":"ServerConfiguration","args":[{"name":"path","type":"String","description":"path argument"}]}],"methods":[],"imports":["net.visualillusionsent.utils.BooleanUtils","net.visualillusionsent.utils.PropertiesFile","org.apache.logging.log4j.Level","java.io.File","io.wolfscript.Wolf.log"],"properties":[{"name":"PluginDevModeEnabled","modifier":"readonly","args":[],"description":"Get: Reloads the configuration file /\n    @Override\n    public void reload() {\n        cfg.reload();\n        verifyConfig();\n    }\n\n    /** Get the configuration file /\n    @Override\n    public PropertiesFile getFile() {\n        return cfg;\n    }\n\n    /** Creates the default configuration /\n    private void verifyConfig() {\n        cfg.getBoolean(\"announce-player-achievements\", true);\n        cfg.setComments(\"announce-player-achievements\", \"Sets whether to inform all of a Player's Achievement\");\n        cfg.getBoolean(\"allow-enchantment-stacking\", false);\n        cfg.setComments(\"allow-enchantment-stacking\", \"Sets whether to allow items with enchantments to stack with non-enchanted items\");\n        cfg.getString(\"ban-default-message\", \"You are banned from this server.\");\n        cfg.setComments(\"ban-default-message\", \"The default message to use for user bans\");\n        cfg.getString(\"ban-expiration-date-message\", \"Your Ban will be lifted at \");\n        cfg.setComments(\"ban-expiration-date-message\", \"The message to prefix to the timestamp of a tempban expiration\");\n        cfg.getString(\"chat-format\", \"<%prefix%name&f> %message\");\n        cfg.setComments(\"chat-format\", \"Valid default placeholders are:\",\n                        \"%prefix (player prefix), %name (player name), %group (main group)\",\n                        \"You can use standard color codes at all times. Use & as identifier if you miss a § key\",\n                        \"Plugins may extend the list of available placeholders\"\n                       );\n        cfg.getBoolean(\"command-block-enabled\", false);\n        cfg.setComments(\"command-block-enabled\", \"Sets whether the Command Block is allowed or not\");\n        cfg.getString(\"command-block-group\", \"admins\");\n        cfg.setComments(\"command-block-group\", \"This groups permissions will determine what Command Block can and can not do!\");\n        cfg.getBoolean(\"command-block-op\", false);\n        cfg.setComments(\"command-block-op\", \"Sets whether the Command Block is considered Operator or not (Vanilla command use)\");\n        cfg.getBoolean(\"command-block-silent\", false);\n        cfg.setComments(\"command-block-silent\", \"Sets whether the Command Block logs command output (set to true to 'silence' CommandBlocks)\");\n        cfg.getString(\"data-source\", \"xml\");\n        cfg.setComments(\"data-source\", \"The Datasource type to use (Default available: xml, mysql, sqlite\");\n        cfg.getString(\"date-format\", \"yyyy.MM.dd, hh:mm:ss\");\n        cfg.setComments(\"date-format\", \"A formatting to display timestamps\");\n        cfg.getBoolean(\"death-messages\", true);\n        cfg.setComments(\"death-messages\", \"Sets whether to send player death message or not\");\n        //cfg.getBoolean(\"debug-enabled\", false); //REMOVED\n        //cfg.setComments(\"debug-enabled\", \"Sets whether to enable debug logging or not\"); // REMOVED\n        if (cfg.containsKey(\"debug-enabled\")) { // Remove old key\n            cfg.removeKey(\"debug-enabled\");\n        }\n        cfg.getString(\"default-world-name\", \"default\");\n        cfg.setComments(\"default-world-name\", \"Name of the default loaded world\");\n        cfg.getInt(\"default-world-size\", 29999984);\n        cfg.setComments(\"default-world-size\", \"This sets the maximum possible size in blocks, expressed as a radius, that the world border can obtain.\");\n        cfg.getBoolean(\"flight-kick\", true);\n        cfg.setComments(\"flight-kick\", \"Enables kicking players who are floating too long.\");\n        cfg.getInt(\"flight-detect-ticks\", 80);\n        cfg.setComments(\"flight-detect-ticks\", \"The number of ticks a player may float before triggering flight-kick or flight-alert.\");\n        //cfg.getBoolean(\"logging\", false); //REMOVED\n        if (cfg.containsKey(\"logging\")) { // Remove old key\n            cfg.removeKey(\"logging\");\n        }\n        cfg.getString(\"logger-level\", \"INFO\");\n        cfg.setComments(\"logger-level\", \"Sets the level of logging.\", \"Acceptable Values: OFF FATAL ERROR WARN INFO DEBUG TRACE ALL\");\n\n        // RESERVED SPACE\n        cfg.getInt(\"max-players\", 20);\n        cfg.setComments(\"max-players\", \"The maximum allowed players online (Does not count ReserveList users connecting after server is full)\");\n        cfg.getInt(\"max-tick-time\", 60000);\n        cfg.setComments(\"max-tick-time\", \"The maximum number of milliseconds a single tick may take before the server watchdog stops the server. Setting to -1 disables WatchDog.\");\n        cfg.getString(\"motd\", \"WolfScript Minecraft Server\");\n        cfg.setComments(\"motd\", \"The Server list Message of the Day\");\n        cfg.getInt(\"network-compression-threshold\", 256);\n        cfg.setComments(\"network-compression-threshold\", \"By default it allows packets that are n-1 bytes big to go normally, but a packet that n bytes or more will be compressed down.\");\n        cfg.getBoolean(\"online-mode\", true);\n        cfg.setComments(\"online-mode\", \"Sets whether to authenticate connecting users.\",\n                        \"WARNING: Setting to false is INSECURE and should not be done in a production environment.\"\n                       );\n        cfg.getInt(\"player-idle-timeout\", 1);\n        cfg.setComments(\"player-idle-timeout\", \"Timeout in minutes before kicking an idle player\");\n        cfg.getBoolean(\"playerlist-enabled\", true);\n        cfg.setComments(\"playerlist-enabled\", \"Sets whether to send data to clients for the Player List\");\n        cfg.getBoolean(\"playerlist-autoupdate\", true);\n        cfg.setComments(\"playerlist-autoupdate\", \"Sets whether the Player List should automatically be refreshed for every player or not\");\n        cfg.getBoolean(\"playerlist-usecolors\", false);\n        cfg.setComments(\"playerlist-usecolors\", \"Sets whether the Player List should include colors and player prefixes\");\n        cfg.getInt(\"playerlist-ticks\", 500);\n        cfg.getBoolean(\"plugin-dev-mode\", false);\n        cfg.setComments(\"plugin-dev-mode\", \"Setting this to true will enable loading plugins from folders; intended for Lua plugin developers\");\n        // RESERVED SPACE\n        cfg.getBoolean(\"query-enabled\", false);\n        cfg.setComments(\"query-enabled\", \"Enables GameSpy4 protocol server listener. Used to get information about server.\");\n        cfg.getInt(\"query-port\", 25565);\n        cfg.setComments(\"query-port\", \"Set the port for the query server\");\n        cfg.getBoolean(\"rcon-enabled\", false);\n        cfg.setComments(\"rcon-enabled\", \"Whether to allow remote access or not\");\n        cfg.getInt(\"rcon-port\", 25575);\n        cfg.setComments(\"rcon-port\", \"The port you want remote access to listen on (1-65534), DEFAULT: 25575\");\n        cfg.getString(\"rcon-password\", \"\");\n        cfg.setComments(\"rcon-password\", \"Password for remote access\");\n        cfg.getBoolean(\"reservelist-enabled\", false);\n        cfg.setComments(\"reservelist-enabled\", \"Sets whether the ReserveList (join after full) is enabled or not\");\n        cfg.getString(\"reservelist-message\", \"Not on reserve list.\"); //This seems redundant\n        cfg.getBoolean(\"save-homes\", true);\n        cfg.setComments(\"save-homes\", \"Sets whether to save homes or not\");\n        cfg.getString(\"server-full-message\", \"The server is full.\");\n        cfg.setComments(\"server-full-message\", \"Message to send if the server is full\");\n        cfg.getString(\"server-ip\", \"\");\n        cfg.setComments(\"server-ip\", \"Set to the IP address that you want your server to listen on, or leave blank for automatic detection.\");\n        cfg.getInt(\"server-port\", 25565);\n        cfg.setComments(\"server-port\", \"The Port you want your server to listen on (1-65534), DEFAULT: 25565\");\n        cfg.getString(\"server-locale\", \"en_US\");\n        cfg.setComments(\"server-locale\", \"Sets the default server language to use for messages. Default supported Languages can be found in the lang/languages.txt\");\n        cfg.getBoolean(\"show-unknown-command\", true);\n        cfg.setComments(\"show-unknown-command\", \"Sets whether to inform players of unknown commands\");\n        cfg.getBoolean(\"snooper-enabled\", true);\n        cfg.setComments(\"snooper-enabled\", \"Sets whether Mojang may snoop or not\");\n        cfg.getString(\"spam-protection\", \"default\");\n        cfg.setComments(\"spam-protection\", \"Level of protection against Spam. Options: default - on for all but ignorerestiction users; off - no protections; all - on for all\");\n        cfg.getBoolean(\"strict-sign-characters\", true);\n        cfg.setComments(\"strict-sign-characters\", \"Sets whether to strictly check characters on signs for invalid chat characters. Set to false to disable (and allow more characters)\");\n        cfg.getString(\"texture-pack\", \"\");\n        cfg.setComments(\"texture-pack\", \"The name of the Server's texture/resource pack\");\n        cfg.getBoolean(\"update-lang-files\", true);\n        cfg.setComments(\"Whether to verify and update lang files or not, disable if you intend to make changes to those files\");\n        cfg.getInt(\"view-distance\", 10);\n        cfg.setComments(\"view-distance\", \"Sets the maximum radius of loaded chunks around a player (3-15)\");\n        cfg.getBoolean(\"whitelist-enabled\", false);\n        cfg.setComments(\"whitelist-enabled\", \"Whether the whitelist is enabled or not\");\n        cfg.getString(\"whitelist-message\", \"Not on whitelist.\");\n        cfg.setComments(\"whitelist-message\", \"The message to send to non-whitelisted players\");\n        cfg.getBoolean(\"world-cache-timer-enabled\", true);\n        cfg.setComments(\"world-cache-timer-enabled\", \"Enable automatic unloading of unused worlds.\");\n        cfg.getLong(\"world-cache-timeout\", 60);\n        cfg.setComments(\"world-cache-timeout\", \"The number of minutes a world should be empty before it will be unloaded (if use-world-cache is enabled)\");\n        cfg.getBoolean(\"bungeecord\", false);\n        cfg.setComments(\"bungeecord\", \"If you want to enable Bungeecord support. REQUIRES THAT ONLINE MODE IS DISABLED (false)\");\n\n        cfg.save();\n    }\n\n    public boolean getAnnounceAchievements() {\n        return cfg.getBoolean(\"announce-player-achievements\", true);\n    }\n\n    /** Checks if items are allowed to be stack with enchantments applied","doc":{"return":["{@code true} if allowed; {@code false} if not /\n    public boolean allowEnchantmentStacking() {\n        return cfg.getBoolean(\"alllow-enchantment-stacking\", false);\n    }\n\n    /** Gets the ban default message","ban default message /\n    public String getDefaultBannedMessage() {\n        return cfg.getString(\"ban-default-message\", \"You are banned from this server.\");\n    }\n\n    /** Gets the ban expiration date message","ban expiration date message /\n    public String getBanExpireDateMessage() {\n        return cfg.getString(\"ban-expiration-date-message\", \"Your ban will be lifted at \");\n    }\n\n    /** Gets the chat format placeholder","chat format /\n    public String getChatFormat() {\n        return cfg.getString(\"chat-format\", \"<%prefix%name&f> %message\");\n    }\n\n    /** Checks if the Command Block is enabled or not","{@code true} if enabled; {@code false} if not /\n    public boolean isCommandBlockEnabled() {\n        return cfg.getBoolean(\"command-block-enabled\", false);\n    }\n\n    /** Gets the group name to apply to the Command Block for permissions","command block group name /\n    public String getCommandBlockGroupName() {\n        return cfg.getString(\"command-block-group\", \"admins\");\n    }\n\n    /** Gets whether the Command Block is considered Operator","{@code true} if opped; {@code false} otherwise /\n    public boolean isCommandBlockOpped() {\n        return cfg.getBoolean(\"command-block-op\", false);\n    }\n\n    /** Gets whether the Command Block is silent","{@code true} if silent; {@code false} otherwise /\n    public boolean isCommandBlockSilent() {\n        return cfg.getBoolean(\"command-block-silent\", false);\n    }\n\n    /** Get datasource type","datasource type /\n    public String getDatasourceType() {\n        return cfg.getString(\"data-source\", \"xml\");\n    }\n\n    /** Gets the date format to use with timestamps","timestamp date format /\n    public String getDateFormat() {\n        return cfg.getString(\"date-format\", \"yyyy.MM.dd, hh:mm:ss\");\n    }\n\n    /** Get the default world name defined in the config","default world name /\n    public String getDefaultWorldName() {\n        return cfg.getString(\"default-world-name\", \"default\");\n    }\n\n    /** Get whether the death message is enabled","true when enabled; false otherwise /\n    public boolean isDeathMessageEnabled() {\n        return cfg.getBoolean(\"death-message\", true);\n    }\n\n    /** Whether this server is in debug mode. Use debug mode when developing plugins, WolfLib or WolfScript.","{@code true} if debug mode enabled; {@code false} if not /\n    public boolean isDebugMode() { // Retaining this for quicker DebugMode checking access\n        return getLoggerLevel().intLevel() >= 5;\n    }\n\n    /** Checks if players will be kicked when floating too long.","{@code true} if kick enabled; {@code false} if not /\n    public boolean isFlightKickEnabled() {\n        return cfg.getBoolean(\"flight-kick\", true);\n    }\n\n    /** Gets the number of ticks a Player is allowed to float before triggering the anti-flying","the number of ticks /\n    public int getFlightDetectTicks() {\n        return cfg.getInt(\"flight-detect-ticks\", 80);\n    }\n\n    /** Gets the Level of message to log","logger level /\n    public Level getLoggerLevel() {\n        return Level.toLevel(cfg.getString(\"logger-level\", \"INFO\"), Level.INFO);\n    }\n\n    /** Get maximum amount of player allowed online","max players /\n    public int getMaxPlayers() {\n        if (panelSupport) {\n            return servCfg.getInt(\"max-players\", 20);\n        }\n        return cfg.getInt(\"max-players\", 20);\n    }\n\n    /** Get the message of the day, the message shown in the server list.","A string containing the message /\n    public String getMotd() {\n        return cfg.getString(\"motd\", \"Wolf Minecraft Server\");\n    }\n\n    /** Whether the server is in online mode. When a server is in online mode, all players are verificated against the servers of Mojang. This will ensure all players have paid. When allowing unpaid users, the server is vulnerable to griefing and attacks.","{@code true} if online mode is enabled; {@code false} if not /\n    public boolean isOnlineMode() {\n        if (panelSupport) {\n            return servCfg.getBoolean(\"online-mode\", true);\n        }\n        return cfg.getBoolean(\"online-mode\", true);\n    }\n\n    /** Gets the time in minutes before a player is kicked for idling","player idle timeout /\n    public int getPlayerIdleTimeout() {\n        return cfg.getInt(\"player-idle-timeout\", 1);\n    }\n\n    /** Sets the time in minutes before a player is kicked for idling","true when enabled, false otherwise. Default is true. /\n    public boolean isPlayerListEnabled() {\n        return cfg.getBoolean(\"playerlist-enabled\", true);\n    }\n\n    /** Get whether the player list is auto-updated","true if auto-updated, false otherwise. Default is false. /\n    public boolean getPlayerlistAutoUpdate() {\n        return cfg.getBoolean(\"playerlist-autoupdate\", false);\n    }\n\n    /** Get whether playerlist colors are enabled. Note that using colors in the playerlist breaks usage of playername-completion in chat.","true when enabled, false otherwise. Default is true. /\n    public boolean isPlayerlistColorsEnabled() {\n        return cfg.getBoolean(\"playerlist-usecolors\", true);\n    }\n\n    /** Get the number of ticks between playerlist updates","playerlist ticks /\n    public int getPlayerlistTicks() {\n        return cfg.getInt(\"playerlist-ticks\", 500);\n    }\n\n    /** Get whether server query-ing is enabled","{@code true} if enabled; {@code false} if not /\n    public boolean isQueryEnabled() {\n        if (panelSupport) {\n            return servCfg.getBoolean(\"enable-query\", false);\n        }\n        return cfg.getBoolean(\"query-enabled\", false);\n    }\n\n    /** Get the port used for query","query port /\n    public int getQueryPort() {\n        if (panelSupport) {\n            return servCfg.getInt(\"query.port\", 25570);\n        }\n        return cfg.getInt(\"query-port\", 25565);\n    }\n\n    /** Whether Remote Control (RCON) is enabled.","{@code true} if enabled; {@code false} if not /\n    public boolean isRconEnabled() {\n        return cfg.getBoolean(\"enable-rcon\", false);\n    }\n\n    /** Get the port used for remote control","RCON port /\n    public int getRconPort() {\n        return cfg.getInt(\"rcon-port\", 0);\n    }\n\n    /** Get the password used for remote control","RCON password /\n    public String getRconPassword() {\n        return cfg.getString(\"rcon-password\", \"\");\n    }\n\n    /** Get whether the reservelist is enabled","true when enabled, false otherwise. Default is false. /\n    public boolean isReservelistEnabled() {\n        return cfg.getBoolean(\"reservelist-enabled\", false);\n    }\n\n    /** Get the message to be displayed when someone is not on the reserve list.","A string containing the message. /\n    public String getReservelistMessage() {\n        return cfg.getString(\"reservelist-message\", \"Not on reserve list.\");\n    }\n\n    /** Get whether home-saving is enabled.","true when enabled, false otherwise. Default is true. /\n    public boolean isSaveHomesEnabled() {\n        return cfg.getBoolean(\"save-homes\", true);\n    }\n\n    /** Gets the message to send to a connecting player when the Server is full","server full message /\n    public String getServerFullMessage() {\n        return cfg.getString(\"server-full-message\", \"The server is full.\");\n    }\n\n    /** Get the IP address which to server binds to","server ip /\n    public String getBindIp() {\n        if (panelSupport) {\n            return servCfg.getString(\"server-ip\", \"\");\n        }\n        return cfg.getString(\"server-ip\", \"\");\n    }\n\n    /** Get the port number used to receive player-connections","port /\n    public int getPort() {\n        if (panelSupport) {\n            return servCfg.getInt(\"server-port\", 25565);\n        }\n        return cfg.getInt(\"server-port\", 25565);\n    }\n\n    /** Gets the server's default locale","default server locale /\n    public String getServerLocale() {\n        return cfg.getString(\"server-locale\", \"en_US\");\n    }\n\n    /** Get whether 'Unknown Command' must be shown when an unknown command is used.","True when enabled, false otherwise. Default is true. /\n    public boolean getShowUnknownCommand() {\n        return cfg.getBoolean(\"show-unknown-command\", true);\n    }\n\n    /** Gets whether the Mojang snooper is enabled or not","{@code true} if enabled; {@code false} if not /\n    public boolean isSnooperEnabled() {\n        return cfg.getBoolean(\"snooper-enabled\", true);\n    }\n\n    /** Gets the spam protection level<br/> default - on for restricted users; off - totally off; all - on for all users","the spam protection level /\n    public String getSpamProtectionLevel() {\n        return cfg.getString(\"spam-protection\", \"default\");\n    }\n\n    /** Gets whether characters on signs are checked for validity or not","{@code true} if strict checks are preformed; {@code false} if not /\n    public boolean getStrictSignCharacterChecks() {\n        return cfg.getBoolean(\"strict-sign-characters\");\n    }\n\n    /** Server Texture/Resource Pack name","the server texture/resource pack name /\n    public String getTexturePack() {\n        return cfg.getString(\"texture-pack\", \"\");\n    }\n\n    /** Gets whether to update the Server Lang files or not","{@code true} to update; {@code false} if not /\n    public boolean updateLang() {\n        return cfg.getBoolean(\"update-lang-files\", true);\n    }\n\n    /** Get the view distance of clients: maximum radius of loaded chunks around a player","view distance /\n    public int getViewDistance() {\n        return cfg.getInt(\"view-distance\", 10);\n    }\n\n    /** Get whether the whitelist is enabled.","True when enabled, false otherwise. Default is false. /\n    public boolean isWhitelistEnabled() {\n        return cfg.getBoolean(\"whitelist-enabled\", false);\n    }\n\n    /** Get the message shown to players who are not whitelisted.","A string containing the message. /\n    public String getWhitelistMessage() {\n        return cfg.getString(\"whitelist-message\", \"Not on whitelist.\");\n    }\n\n    /** Checks if the World Cache Timer is enabled","{@code true} if enabled; {@code false} if not /\n    public boolean isWorldCacheTimerEnabled() {\n        return cfg.getBoolean(\"world-cache-timer-enabled\", true);\n    }\n\n    /** Gets the World Cache timeout","world cache timeout /\n    public long getWorldCacheTimeout() {\n        return cfg.getLong(\"world-cache-timeout\", 60);\n    }\n\n    /** Gets the Network Compression Threshold","network compression threshold /\n    public int getNetworkCompressionThreshold() {\n        return cfg.getInt(\"network-compression-threshold\", 256);\n    }\n\n    /** Gets the default max world size","default max world size /\n    public int getDefaultMaxWorldSize() {\n        return cfg.getInt(\"default-world-size\", 29999984);\n    }\n\n    /** Gets the max time a tick may take","max tick time /\n    public int getMaxTickTime() {\n        return cfg.getInt(\"max-tick-time\", 60000);\n    }\n\n    /** Checks if bungeecord support is enabled","{@code true} if enabled; {@code false} if not /\n    public boolean getBungeecordSupport() {\n        return cfg.getBoolean(\"bungeecord\", false);\n    }\n\n    /** Gets the plugin dev mode state","{@code true} if enabled; {@code false} if not"],"param":["timeout the idle timeout /\n    public void setPlayerIdleTimeout(int timeout) {\n        cfg.setInt(\"player-idle-timeout\", timeout);\n    }\n\n    /** Get whether the player list is enabled."]},"return":"boolean","scope":"public","title":"Get: Reloads the configuration file"}]},"io.wolfscript.config.WorldConfiguration":{"namespace":"io.wolfscript.config","title":"class WorldConfiguration","description":"class WorldConfiguration","doc":{"author":["Jason (darkdiplomat)","Jos Kuijpers"]},"name":"WorldConfiguration","qualifiedname":"io.wolfscript.config.WorldConfiguration","type":"class","scope":"public","implements":["io.wolfscript.config.ConfigurationContainer"],"constructors":[{"title":"WorldConfiguration constructor","description":"WorldConfiguration constructor","scope":"public","name":"WorldConfiguration","args":[{"name":"path","type":"String","description":"path argument"},{"name":"worldname","type":"String","description":"worldname argument"}]}],"methods":[{"title":"Reloads the configuration file","description":"Reloads the configuration file /\n    @Override\n    public void reload() {\n        cfg.reload();\n        verifyConfig();\n    }\n\n    /** Get the configuration file /\n    @Override\n    public PropertiesFile getFile() {\n        return cfg;\n    }\n\n    /** Verifies the world configuration file /\n    private void verifyConfig() {\n        cfg.getString(\"world-name\", worldname);\n        cfg.getString(\"world-type\", \"DEFAULT\");\n        cfg.getInt(\"spawn-protection\", 16);\n        cfg.getInt(\"max-build-height\", 256);\n        cfg.getBoolean(\"generate-structures\", true);\n        cfg.getString(\"generator-settings\", \"\");\n        cfg.getString(\"world-seed\", \"\");\n\n        cfg.getBoolean(\"startup-autoload\", false);\n        cfg.getBoolean(\"warp-autoload\", false);\n\n        cfg.getBoolean(\"allow-nether\", true);\n        cfg.getBoolean(\"allow-end\", true);\n        cfg.getBoolean(\"allow-flight\", true);\n\n        cfg.getBoolean(\"pvp\", true);\n        cfg.getInt(\"difficulty\", 1);\n        cfg.getInt(\"gamemode\", 0);\n        cfg.getBoolean(\"forceDefaultGameMode\", true);\n        cfg.getBoolean(\"forceDefaultGameModeDimensional\", false);\n        cfg.getString(\"auto-heal\", \"default\");\n        cfg.getBoolean(\"enable-experience\", true);\n        cfg.getBoolean(\"enable-health\", true);\n\n        cfg.getBoolean(\"spawn-villagers\", true);\n        cfg.getBoolean(\"spawn-golems\", true);\n        cfg.getBoolean(\"spawn-animals\", true);\n        cfg.getBoolean(\"spawn-monsters\", true);\n        spawnableAnimals = new HashSet<String>(Arrays.asList(cfg.getStringArray(\"natural-animals\", animals)));\n        spawnableMobs = new HashSet<String>(Arrays.asList(cfg.getStringArray(\"natural-monsters\", monsters)));\n        spawnableGolems = new HashSet<String>(Arrays.asList(cfg.getStringArray(\"natural-golems\", golems)));\n        spawnableWaterAnimals = new HashSet<String>(Arrays.asList(cfg.getStringArray(\"natural-wateranimals\", wateranimals)));\n        cfg.getInt(\"natural-spawn-rate\", 100);\n\n        cfg.getIntArray(\"ender-blocks\", enderblocks);\n        cfg.getIntArray(\"disallowed-blocks\", disallowedblocks);\n\n        cfg.save();\n    }\n\n    private boolean getBoolean(String key, boolean def) {\n        Boolean r = boolCache.get(key);\n        if (r != null) {\n            return r;\n        }\n        r = cfg.getBoolean(key, def);\n        boolCache.put(key, r);\n        return r;\n    }\n\n    /** Get the spawn protection size","doc":{"return":["an integer between 0 and INTMAX, 16 on failure. /\n    public int getSpawnProtectionSize() {\n        return cfg.getInt(\"spawn-protection\", 16);\n    }\n\n    /** Get whether auto heal is enabled.","true or false. Returns value of canSpawnMonsters() if auto-heal is 'default' /\n    public boolean isAutoHealEnabled() {\n        if (cfg.getString(\"auto-heal\", \"default\").equals(\"default\")) {\n            return this.canSpawnMonsters();\n        }\n        return getBoolean(\"auto-heal\", false);\n    }\n\n    /** Get whether experience is enabled","true when enabled, false otherwise. Default is true. /\n    public boolean isExperienceEnabled() {\n        return getBoolean(\"enable-experience\", true);\n    }\n\n    /** Get whether health is enabled.","true when enabled, false otherwise. Default is true. /\n    public boolean isHealthEnabled() {\n        return getBoolean(\"enable-health\", true);\n    }\n\n    /** Get an Array of String of spawnable animals","animals array /\n    public Set<String> getSpawnableAnimals() {\n        return spawnableAnimals;\n    }\n\n    /** Get an Array of String of spawnable water animals","water animals array /\n    public Set<String> getSpawnableWaterAnimals() {\n        return spawnableWaterAnimals;\n    }\n\n    /** Get an Array of String of spawnable monsters","monster array /\n    public Set<String> getSpawnableMobs() {\n        return spawnableMobs;\n    }\n\n    /** Get an Array of String of spawnable golems","golem array /\n    public Set<String> getSpawnableGolems() {\n        return spawnableGolems;\n    }\n\n    /** Get the block types allowed for enderman to move.","An integer array containing the block types. /\n    public int[] getEnderBlocks() {\n        return cfg.getIntArray(\"ender-blocks\", enderblocks);\n    }\n\n    /** Get the block types banned.","An integer array containing the block types. /\n    public int[] getBannedBlocks() {\n        return cfg.getIntArray(\"disallowed-blocks\", disallowedblocks);\n    }\n\n    /** See if a given animal is allowed to spawn This method looks in both the normal and water animal lists.","true or false /\n    public boolean isAnimalSpawnable(String name) {\n        for (String animal : cfg.getStringArray(\"natural-animals\")) {\n            if (name.equals(animal)) {\n                return true;\n            }\n        }\n        for (String animal : cfg.getStringArray(\"natural-wateranimals\")) {\n            if (name.equals(animal)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** See if a given mob is allowed to spawn","true or false /\n    public boolean isMobSpawnable(String name) {\n        for (String mob : cfg.getStringArray(\"natural-monsters\")) {\n            if (name.equals(mob)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Get the world name","a string with the world name /\n    public String getWorldName() {\n        return cfg.getString(\"world-name\", worldname);\n    }\n\n    /** Get the world type.","a String with the world type. Default is DEFAULT /\n    public WorldType getWorldType() {\n        return WorldType.fromString(cfg.getString(\"world-type\", \"DEFAULT\"));\n    }\n\n    /** Get the world seed.","a string containing the world seed /\n    public String getWorldSeed() {\n        return cfg.getString(\"world-seed\", \"\");\n    }\n\n    /** Get whether the nether is allowed","true when allowed, false otherwise /\n    public boolean isNetherAllowed() {\n        return getBoolean(\"allow-nether\", true);\n    }\n\n    /** Get whether the end is allowed","true when allowed, false otherwise /\n    public boolean isEndAllowed() {\n        return getBoolean(\"allow-end\", true);\n    }\n\n    /** Get whether flight is allowed","true when allowed, false otherwise /\n    public boolean isFlightAllowed() {\n        return getBoolean(\"allow-flight\", true);\n    }\n\n    /** Get whether NPCs can be spawned","true or false /\n    public boolean canSpawnVillagers() {\n        return getBoolean(\"spawn-villagers\", true);\n    }\n\n    /** Get whether animals can be spawned","true or false /\n    public boolean canSpawnAnimals() {\n        return getBoolean(\"spawn-animals\", true);\n    }\n\n    /** Get whether monsters can be spawned","true or false /\n    public boolean canSpawnMonsters() {\n        return getBoolean(\"spawn-monsters\", true);\n    }\n\n    /** Get whether golems can be spawned","true or false /\n    public boolean canSpawnGolems() {\n        return getBoolean(\"spawn-golems\", true);\n    }\n\n    /** Get whether structures must be generated","true or false /\n    public boolean generatesStructures() {\n        return getBoolean(\"generate-structures\", true);\n    }\n\n    /** Get the maximum build height","an integer, defaulting to 256 /\n    public int getMaxBuildHeight() {\n        return MathHelp.setInRange(cfg.getInt(\"max-build-height\", 256), 1, 256);\n    }\n\n    /** Get whether PVP is enabled","true when enabled, false otherwise. Default is true. /\n    public boolean isPvpEnabled() {\n        return getBoolean(\"pvp\", true);\n    }\n\n    /** Get the difficulty","difficulty /\n    public World.Difficulty getDifficulty() {\n        return World.Difficulty.fromId(cfg.getInt(\"difficulty\", 1));\n    }\n\n    /** Get the game mode for this world","game mode /\n    public GameMode getGameMode() {\n        return GameMode.fromId(cfg.getInt(\"gamemode\", 0));\n    }\n\n    /** Get the natural spawn rate, a percentage.","A value from 0 to 100, default is 100. /\n    public int getNaturalSpawnRate() {\n        return MathHelp.setInRange(cfg.getInt(\"natural-spawn-rate\", 100), 0, 100);\n    }\n\n    /** Gets the World Generator settings","world generator settings /\n    public String getGeneratorSettings() {\n        return cfg.getString(\"generator-settings\", \"\");\n    }\n\n    /** Gets whether to force the default GameMode on a Player when changing Worlds","{@code true} if force /\n    public boolean forceDefaultGamemode() {\n        return cfg.getBoolean(\"forceDefaultGameMode\", true);\n    }\n\n    /** Gets whether to force the default GameMode on a Player when changing Dimensions","{@code true} if force /\n    public boolean forceDefaultGamemodeDimensional() {\n        return cfg.getBoolean(\"forceDefaultGameModeDimensional\", false);\n    }\n\n    public boolean startupAutoLoadEnabled() {\n        return cfg.getBoolean(\"startup-autoload\", false);\n    }\n\n    /** Gets whether to load a world when a warp is used","{@code true} if loading allowed /\n    public boolean allowWarpAutoLoad() {\n        return cfg.getBoolean(\"warp-autoload\", false);\n    }\n\n    /** Creates a new WorldConfig for use with {@link io.wolfscript.api.world.WorldManager#createWorld(WorldConfiguration)}<p/> Before passing on to createWorld, these settings should be modified using {@link WorldConfiguration#getFile()}<br/> and then calling {@link net.visualillusionsent.utils.PropertiesFile#save()} followed with {@link WorldConfiguration#reload()} when finished <ul> <li>worldType (String)</li> <li>spawn-protection (Integer)</li> <li>max-build-height (Integer)</li> <li>generate-structures (Boolean)</li> <li>generator-settings (String)</li> <li>world-seed (String)</li> <li>startup-autoload (Boolean)</li> <li>warp-autoload (Boolean)</li> <li>allow-nether (Boolean)</li> <li>allow-end (Boolean)</li> <li>allow-flight (Boolean)</li> <li>pvp (Boolean)</li> <li>difficulty (Integer)</li> <li>gamemode (Integer)</li> <li>forceDefaultGameMode (Boolean)</li> <li>forceDefaultGameModeDimensional (Boolean)</li> <li>auto-heal (String)</li> <li>enable-experience (Boolean)</li> <li>enable-health (Boolean)</li> <li>spawn-villagers (Boolean)</li> <li>spawn-golems (Boolean)</li> <li>spawn-animals (Boolean)</li> <li>spawn-monsters (Boolean)</li> <li>natural-animals (String[])</li> <li>natural-monsters (String[])</li> <li>natural-golems (String[])</li> <li>natural-wateranimals (String[])</li> <li>natural-spawn-rate (Integer)</li> <li>ender-blocks (int[])</li> <li>disallowed-blocks (int[])</li> </ul> <br/> NOTE: Settings list may not be entirely up to date.","the new WorldConfiguraion or {@code null} if a configuration is already existant"],"see":["io.wolfscript.api.world.WorldManager#createWorld(WorldConfiguration)","WorldConfiguration#reload()","WorldConfiguration#getFile()"]},"scope":"public","describe":"static","return":"io.wolfscript.config.WorldConfiguration","name":"create","args":[{"name":"name","type":"String","description":"the name of the Animal"},{"name":"dimensionType","type":"io.wolfscript.api.world.DimensionType","description":"{@link io.wolfscript.api.world.DimensionType} of the world"}]}],"imports":["io.wolfscript.MathHelp","io.wolfscript.api.GameMode","io.wolfscript.api.world.DimensionType","io.wolfscript.api.world.World","io.wolfscript.api.world.WorldType","net.visualillusionsent.utils.PropertiesFile","java.io.File","java.util.Arrays","java.util.HashMap","java.util.HashSet","java.util.Set","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.converter.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.converter","description":"Classes and interfaces for namespace io.wolfscript.converter","name":"converter","qualifiedname":"io.wolfscript.converter.0","packagename":"io.wolfscript.converter","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.converter.WolfToVanilla"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.converter.WolfToVanilla":{"namespace":"io.wolfscript.converter","title":"Convert a Wolf server into files Vanilla can understand","description":"Convert a Wolf server into files Vanilla can understand","doc":{"author":["Jos Kuijpers","Jason Jones (darkdiplomat)"]},"name":"WolfToVanilla","qualifiedname":"io.wolfscript.converter.WolfToVanilla","type":"class","scope":"public","constructors":[],"methods":[{"title":"convert method","description":"convert method","scope":"public","return":"boolean","name":"convert","args":[{"name":"world","type":"String","description":"world argument"}]}],"imports":["com.google.gson.stream.JsonWriter","io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.bansystem.Ban","io.wolfscript.config.Configuration","io.wolfscript.config.ServerConfiguration","io.wolfscript.config.WorldConfiguration","net.visualillusionsent.utils.PropertiesFile","java.io.BufferedWriter","java.io.File","java.io.FileInputStream","java.io.FileOutputStream","java.io.FileWriter","java.io.IOException","java.io.InputStream","java.io.OutputStream","java.io.PrintWriter","java.io.Writer"],"properties":[]},"io.wolfscript.database.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.database","description":"Classes and interfaces for namespace io.wolfscript.database","name":"database","qualifiedname":"io.wolfscript.database.0","packagename":"io.wolfscript.database","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.database.DataAccess","io.wolfscript.database.DatabaseLoader","io.wolfscript.database.JdbcConnectionManager","io.wolfscript.database.LocationDataAccess","io.wolfscript.database.PositionDataAccess","io.wolfscript.database.SQLType","io.wolfscript.database.Type"],"interfaces":[],"enums":[],"namespaces":["io.wolfscript.database.exceptions.0","io.wolfscript.database.mysql.0","io.wolfscript.database.sqlite.0","io.wolfscript.database.xml.0"],"properties":[]},"io.wolfscript.database.DataAccess":{"namespace":"io.wolfscript.database","title":"Handle the layout and creation of tables","description":"Handle the layout and creation of tables","doc":{"author":["Chris (damagefilter)"]},"name":"DataAccess","qualifiedname":"io.wolfscript.database.DataAccess","type":"class","scope":"public","describe":"abstract","constructors":[],"fields":[{"title":"id field","description":"id field","name":"id","scope":"public","type":"Integer"}],"methods":[],"imports":["io.wolfscript.ToolBox","io.wolfscript.database.exceptions.DatabaseAccessException","io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","io.wolfscript.database.exceptions.DatabaseWriteException","java.lang.reflect.Field","java.util.Arrays","java.util.HashMap","java.util.HashSet","java.util.List","java.util.Map","java.util.Set","io.wolfscript.Wolf.log"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"describe":"abstract","description":"Get: Construct a new DataAccess object that represents a table in the database with the given name. This AccessObject is empty after it has been created. You need to get data from Database and load it. WolfScript will do this for you. For this simply call Wolf.db().load(yourDataAccess, String[]lookupFields, Object[]whereData); This will fill your AccessObject.","doc":{"param":["tableName The table name /\n    public DataAccess(String tableName) {\n        this.tableName = tableName;\n        createTable();\n    }\n\n    public DataAccess(String tableName, String tableSuffix) {\n        if (tableSuffix != null) {\n            this.tableName = tableName + \"_\" + tableSuffix;\n        }\n        else {\n            this.tableName = tableName;\n        }\n        createTable();\n    }\n\n    /** Load a Data set into this DataAccess object","dataSet the data set to be loaded","name the name to check for","name the column name"],"throws":["DatabaseAccessException /\n    public final void load(HashMap<String, Object> dataSet) throws DatabaseAccessException {\n        try {\n            applyDataSet(dataSet);\n        }\n        catch (IllegalAccessException e) {\n            throw new DatabaseAccessException(e.getMessage());\n        }\n        catch (IllegalArgumentException e) {\n            throw new DatabaseAccessException(e.getMessage());\n        }\n        if (dataSet.size() > 0) {\n            hasData = true;\n        }\n        isLoaded = true;\n    }\n\n    /** Creates a HashMap containing all relevant fields for the database, which will then be saved into the database along with their values","DatabaseTableInconsistencyException /\n    public final HashMap<Column, Object> toDatabaseEntryList() throws DatabaseTableInconsistencyException {\n        List<Field> fields = Arrays.asList(ToolBox.safeArrayMerge(getClass().getFields(), getClass().getDeclaredFields(), new Field[1]));\n        HashMap<Column, Object> fieldMap = new HashMap<Column, Object>();\n        for (Field field : fields) {\n            Column colInfo = field.getAnnotation(Column.class);\n\n            if (colInfo == null) {\n                // Not what we're looking for\n                continue;\n            }\n            if (fieldMap.containsKey(colInfo)) {\n                // Seriously ...\n                isInconsistent = true;\n                throw new DatabaseTableInconsistencyException(\"Found duplicate column field: \" + colInfo.columnName());\n            }\n            try {\n                fieldMap.put(colInfo, field.get(this));\n            }\n            catch (IllegalArgumentException e) {\n                log.error(e.getMessage(), e);\n            }\n            catch (IllegalAccessException e) {\n                isInconsistent = true;\n                throw new DatabaseTableInconsistencyException(\"Could not access an annotated column field: \" + field.getName());\n            }\n        }\n        return fieldMap;\n    }\n\n    public final void applyDataSet(HashMap<String, Object> dataSet) throws DatabaseAccessException, IllegalArgumentException, IllegalAccessException {\n        Field[] fields = ToolBox.safeArrayMerge(getClass().getFields(), getClass().getDeclaredFields(), new Field[1]);\n        int columnFields = 0;\n\n        for (Field field : fields) {\n            Column col = field.getAnnotation(Column.class);\n\n            if (col == null) {\n                continue;\n            }\n            if (!dataSet.containsKey(col.columnName())) {\n                isInconsistent = true;\n                throw new DatabaseAccessException(\"Cannot apply data to \" + getClass().getSimpleName() + \". Column name mismatches! (\" + col.columnName() + \" does not exist) - \" + dataSet.keySet().toString());\n            }\n            field.set(this, dataSet.get(col.columnName())); // TODO: Fix null value to use field default\n            columnFields++;\n        }\n        // If the columnFields is not the size of the dataSet,\n        // There is either excess data or data that has not been put in the AccessObject.\n        // This causes inconsistency and therefore must throw an exception\n        if (columnFields != dataSet.size()) {\n            isInconsistent = true;\n            throw new DatabaseAccessException(\"Supplied Data set cannot be applied to this DataAccess(\" + getClass().getSimpleName() + \"). Column count mismatches!\");\n        }\n    }\n\n    /** Gets the table layout. That is: all column annotations in this class that make up the table","DatabaseTableInconsistencyException /\n    public final HashSet<Column> getTableLayout() throws DatabaseTableInconsistencyException {\n        Field[] fields = ToolBox.safeArrayMerge(getClass().getFields(), getClass().getDeclaredFields(), new Field[1]);\n        HashSet<Column> layout = new HashSet<Column>(fields.length);\n\n        for (Field field : fields) {\n            if (field == null) {\n                throw new DatabaseTableInconsistencyException(\"A field of \" + getClass().getSimpleName() + \" is not initialized, check your DataAccess!\");\n            }\n            Column colInfo = field.getAnnotation(Column.class);\n\n            if (colInfo == null) {\n                // Not what we're looking for\n                continue;\n            }\n            if (layout.contains(colInfo)) {\n                // Dude!\n                isInconsistent = true;\n                throw new DatabaseTableInconsistencyException(\"Found duplicate column field: \" + colInfo.columnName());\n            }\n            layout.add(colInfo);\n        }\n        return layout;\n    }\n\n    /** This shall return the name of the Table this DataAccess belongs to"],"return":["HashMap that maps the Column meta data to the data present in database.","a HashSet containing all Columns as defined in this {@link io.wolfscript.database.DataAccess} object","the table name /\n    public final String getName() {\n        return tableName;\n    }\n\n    /** Returns true if this DataAccess object has been marked as inconsistent. Inconsistent DataAccess objects will not be saved into the database. This is probably rarely going to be true but it's an extra security measure to keep the data safe and consistent","true if this object is inconsistent to the database schema, false otherwise /\n    public final boolean isInconsistent() {\n        return isInconsistent;\n    }\n\n    /** Check if this DataAccess has been loaded properly","true if a load has been attempted for this {@link io.wolfscript.database.DataAccess} /\n    public final boolean isLoaded() {\n        return isLoaded;\n    }\n\n    /** Check if there is data in this DataAccess object. This will also return false if there was an exception while the data has been loaded","true if this {@link io.wolfscript.database.DataAccess} contains data /\n    public final boolean hasData() {\n        return hasData;\n    }\n\n    /** Checks if this {@link io.wolfscript.database.DataAccess} has a Column with the given name.","true if DataAccess has this column, false otherwise /\n    public final boolean hasColumn(String name) {\n        try {\n            for (Column col : getTableLayout()) {\n                if (col.columnName().equals(name)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        catch (DatabaseTableInconsistencyException e) {\n            log.error(\"Could not finish column name lookup in database for \" + tableName, e);\n            return false;\n        }\n    }\n\n    /** Retrieves a Column with the given name from this DataAccess.","a column or null if there is no column with the name given /\n    public final Column getColumnForName(String name) {\n        try {\n            for (Column col : getTableLayout()) {\n                if (col.columnName().equals(name)) {\n                    return col;\n                }\n            }\n            return null;\n        }\n        catch (DatabaseTableInconsistencyException e) {\n            log.error(\"Could not finish column name lookup in database for \" + tableName, e);\n            return null;\n        }\n    }\n\n    /** Makes sure the database file for this DataAccess exists before anything starts to use it /\n    private void createTable() {\n        if (!schemaUpdated.contains(getClass())) {\n            try {\n                Database.get().updateSchema(this);\n            }\n            catch (DatabaseWriteException e) {\n                log.error(e.getMessage(), e);\n            }\n            schemaUpdated.add(getClass());\n        }\n    }\n\n    /** Converts this DataAccess object into a string representation.<br> Format: Table : tableName { [`columnName`,'fieldName'] }","string representation /\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        Map<Column, Object> columns = null;\n        try {\n            columns = this.toDatabaseEntryList();\n        }\n        catch (DatabaseTableInconsistencyException dtie) {\n\n        }\n        if (columns != null) {\n            for (Column column : columns.keySet()) {\n                sb.append(\"[`\").append(column.columnName()).append(\"`, '\").append(columns.get(column)).append(\"'] \");\n            }\n        }\n        return \"Table : \" + this.tableName + \" { \" + sb.toString() + \"}\";\n    }\n\n    /** Returns an empty instance of this {@link io.wolfscript.database.DataAccess} object","instance"]},"return":"io.wolfscript.database.DataAccess","scope":"public","title":"Get: Construct a new DataAccess object that represents a table"}]},"io.wolfscript.database.DatabaseLoader":{"namespace":"io.wolfscript.database","title":"Checks a database folder in WolfScripts root folder for","description":"Checks a database folder in WolfScripts root folder for external Database Implementations and loads them","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseLoader","qualifiedname":"io.wolfscript.database.DatabaseLoader","type":"class","scope":"public","constructors":[],"methods":[{"title":"Scans db adapters folder, loads all valid databases and registers them","description":"Scans db adapters folder, loads all valid databases and registers them at Database.Type. This must be the first bootstrapping step, as all other steps require a functional database. This also means this must not make use of anything that isn't loaded already","doc":{},"scope":"public","describe":"static","return":"void","name":"load","args":[]}],"imports":["io.wolfscript.WolfClassLoader","io.wolfscript.database.exceptions.DatabaseException","net.visualillusionsent.utils.PropertiesFile","net.visualillusionsent.utils.UtilityException","java.io.File","java.net.MalformedURLException","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.database.JdbcConnectionManager":{"namespace":"io.wolfscript.database","title":"Represents a connection (pool) manager for all sorts of JDBC connections.","description":"Represents a connection (pool) manager for all sorts of JDBC connections. In our particular case that is mysql and sqlite. For sqlite, due to the minimal nature of it, there need to be a separate handling. TODO: Configure statement caching!","doc":{"author":["Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"JdbcConnectionManager","qualifiedname":"io.wolfscript.database.JdbcConnectionManager","type":"class","scope":"public","constructors":[],"methods":[{"title":"Instantiates the connection manager","description":"Instantiates the connection manager","doc":{"param":["type the database type"],"throws":["SQLException /\n    private JdbcConnectionManager(SQLType type) throws SQLException {\n        DatabaseConfiguration cfg = Configuration.getDbConfig();\n        cpds = new ComboPooledDataSource();\n        this.type = type;\n        if (type.usesJDBCManager()) {\n            try {\n                cpds.setDriverClass(type.getClassPath());\n                cpds.setJdbcUrl(cfg.getDatabaseUrl(type.getIdentifier()));\n                cpds.setUser(cfg.getDatabaseUser());\n                cpds.setPassword(cfg.getDatabasePassword());\n\n                // For settings explanations see\n                // http://javatech.org/2007/11/c3p0-connectionpool-configuration-rules-of-thumb/\n                // https://community.jboss.org/wiki/HowToConfigureTheC3P0ConnectionPool?_sscc=t\n\n                //connection pooling\n                cpds.setAcquireIncrement(cfg.getAcquireIncrement());\n                cpds.setMaxIdleTime(cfg.getMaxConnectionIdleTime());\n                cpds.setMaxIdleTimeExcessConnections(cfg.getMaxExcessConnectionsIdleTime());\n                cpds.setMaxPoolSize(cfg.getMaxPoolSize());\n                cpds.setMinPoolSize(cfg.getMinPoolSize());\n                cpds.setNumHelperThreads(cfg.getNumHelperThreads());\n                cpds.setUnreturnedConnectionTimeout(cfg.getReturnConnectionTimeout());\n                cpds.setIdleConnectionTestPeriod(cfg.getConnectionTestFrequency());\n\n                //Statement pooling\n                cpds.setMaxStatements(cfg.getMaxCachedStatements());\n                cpds.setMaxStatementsPerConnection(cfg.getMaxCachedStatementsPerConnection());\n                cpds.setStatementCacheNumDeferredCloseThreads(cfg.getNumStatementCloseThreads());\n            }\n            catch (PropertyVetoException e) {\n                log.error(\"Failed to configure the connection pool!\", e);\n            }\n            //Test connection...\n            //If this fails it throws an SQLException so we're notified\n            Connection c = cpds.getConnection();\n            c.close();\n        }\n        else {\n            nonManaged = DriverManager.getConnection(cfg.getDatabaseUrl(type.getIdentifier()), cfg.getDatabaseUser(), cfg.getDatabasePassword());\n            nonManaged.close();\n        }\n    }\n\n    /** Get the SQL Database type.","DatabaseAccessException /\n    private static JdbcConnectionManager getInstance() throws DatabaseAccessException {\n        if (instance == null) {\n            try {\n                SQLType type = SQLType.forName(Configuration.getServerConfig().getDatasourceType());\n                if (type == null) {\n                    throw new DatabaseAccessException(Configuration.getServerConfig().getDatasourceType() + \" is not a valid JDBC Database type or has not been registered for use.\");\n                }\n                instance = new JdbcConnectionManager(type);\n            }\n            catch (SQLException e) {\n                throw new DatabaseAccessException(\"Unable to instantiate Connection Pool!\", e);\n            }\n        }\n        return instance;\n    }\n\n    /** Get a connection form the connection pool."],"return":["the type /\n    public SQLType getType() {\n        return this.type;\n    }\n\n    /** Create a new instance of this connection manager.","an instance of the manager","connection from the pool /\n    public static Connection getConnection() {\n        try {\n            JdbcConnectionManager cman = getInstance();\n            if (!cman.type.usesJDBCManager()) {\n                if (cman.nonManaged != null) {\n                    if (!cman.nonManaged.isClosed()) {\n                        return cman.nonManaged;\n                    }\n                }\n                DatabaseConfiguration cfg = Configuration.getDbConfig();\n                cman.nonManaged = DriverManager.getConnection(cfg.getDatabaseUrl(cman.type.getIdentifier()), cfg.getDatabaseUser(), cfg.getDatabasePassword());\n                return cman.nonManaged;\n            }\n            return cman.cpds.getConnection();\n        }\n        catch (SQLException e) {\n            log.error(\"Couldn't get a Connection from pool!\", e);\n            return null;\n        }\n        catch (DatabaseAccessException e) {\n            log.error(\"Couldn't get a Connection from pool!\", e);\n            return null;\n        }\n    }\n\n    /** Shut down the connection pool. Should be called when the system is reloaded or goes down to prevent data loss."]},"scope":"public","describe":"static","return":"void","name":"shutdown","args":[]}],"imports":["com.mchange.v2.c3p0.ComboPooledDataSource","io.wolfscript.config.Configuration","io.wolfscript.config.DatabaseConfiguration","io.wolfscript.database.exceptions.DatabaseAccessException","java.beans.PropertyVetoException","java.sql.Connection","java.sql.DriverManager","java.sql.SQLException","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.database.LocationDataAccess":{"namespace":"io.wolfscript.database","title":"Location assistant DataAccess object","description":"Location assistant DataAccess object","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"LocationDataAccess","qualifiedname":"io.wolfscript.database.LocationDataAccess","type":"class","scope":"public","describe":"abstract","extends":["io.wolfscript.database.PositionDataAccess"],"constructors":[{"title":"LocationDataAccess constructor","description":"LocationDataAccess constructor","scope":"public","name":"LocationDataAccess","args":[{"name":"tableName","type":"String","description":"tableName argument"}]},{"title":"LocationDataAccess constructor","description":"LocationDataAccess constructor","scope":"public","name":"LocationDataAccess","args":[{"name":"tableName","type":"String","description":"tableName argument"},{"name":"tableSuffix","type":"String","description":"tableSuffix argument"}]}],"fields":[{"title":"world field","description":"world field","name":"world","scope":"public","type":"String"},{"title":"dimension field","description":"dimension field","name":"dimension","scope":"public","type":"String"}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.PositionDataAccess":{"namespace":"io.wolfscript.database","title":"Position assistant DataAccess object","description":"Position assistant DataAccess object","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PositionDataAccess","qualifiedname":"io.wolfscript.database.PositionDataAccess","type":"class","scope":"public","describe":"abstract","extends":["io.wolfscript.database.DataAccess"],"constructors":[{"title":"PositionDataAccess constructor","description":"PositionDataAccess constructor","scope":"public","name":"PositionDataAccess","args":[{"name":"tableName","type":"String","description":"tableName argument"}]},{"title":"PositionDataAccess constructor","description":"PositionDataAccess constructor","scope":"public","name":"PositionDataAccess","args":[{"name":"tableName","type":"String","description":"tableName argument"},{"name":"tableSuffix","type":"String","description":"tableSuffix argument"}]}],"fields":[{"title":"posX field","description":"posX field","name":"posX","scope":"public","type":"double"},{"title":"posY field","description":"posY field","name":"posY","scope":"public","type":"double"},{"title":"posZ field","description":"posZ field","name":"posZ","scope":"public","type":"double"}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.SQLType":{"namespace":"io.wolfscript.database","title":"Helper class so we can easily identify the driver type further down the code","description":"Helper class so we can easily identify the driver type further down the code","doc":{"author":["Jason Jones (darkdiplomat)","Chris Ksoll (damagefilter)"]},"name":"SQLType","qualifiedname":"io.wolfscript.database.SQLType","type":"class","scope":"public","describe":"final","constructors":[],"fields":[{"title":"classpath field","description":"classpath field","name":"classpath","scope":"public","type":"String","describe":"final"},{"title":"useJDBCManager field","description":"useJDBCManager field","name":"useJDBCManager","scope":"public","type":"boolean","describe":"final"}],"methods":[{"title":"equals method","description":"equals method","scope":"public","describe":"final","return":"boolean","name":"equals","args":[{"name":"obj","type":"Object","description":"obj argument"}]},{"title":"forName method","description":"forName method","scope":"public","describe":"static","return":"io.wolfscript.database.SQLType","name":"forName","args":[{"name":"name","type":"String","description":"name argument"}]},{"title":"registerSQLDriver method","description":"registerSQLDriver method","scope":"public","describe":"static","return":"io.wolfscript.database.SQLType","name":"registerSQLDriver","args":[{"name":"identifier","type":"String","description":"identifier argument"},{"name":"classpath","type":"String","description":"classpath argument"}]},{"title":"registerSQLDriver method","description":"registerSQLDriver method","scope":"public","describe":"static","return":"io.wolfscript.database.SQLType","name":"registerSQLDriver","args":[{"name":"identifier","type":"String","description":"identifier argument"},{"name":"classpath","type":"String","description":"classpath argument"},{"name":"useJDBCManager","type":"boolean","description":"useJDBCManager argument"}]},{"title":"usesJDBCManager method","description":"usesJDBCManager method","scope":"public","return":"boolean","name":"usesJDBCManager","args":[]}],"imports":["com.google.common.collect.Maps","java.util.HashMap"],"properties":[{"name":"ClassPath","modifier":"readonly","args":[],"description":"ClassPath property","return":"String","scope":"public","title":"ClassPath property"},{"name":"Identifier","modifier":"readonly","args":[],"description":"Identifier property","return":"String","scope":"public","title":"Identifier property"}]},"io.wolfscript.database.Type":{"namespace":"io.wolfscript.database","title":"A database representation, used to store any kind of data","description":"A database representation, used to store any kind of data","doc":{"author":["Chris (damagefilter) /\npublic abstract class Database {\n\n    /** The datasource type","chris"]},"name":"Type","qualifiedname":"io.wolfscript.database.Type","type":"class","scope":"public","describe":"static","constructors":[],"methods":[{"title":"getDatabaseFromType method","description":"getDatabaseFromType method","scope":"public","describe":"static","return":"Database","name":"getDatabaseFromType","args":[{"name":"name","type":"String","description":"name argument"}]}],"imports":["io.wolfscript.config.Configuration","io.wolfscript.database.exceptions.DatabaseException","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseWriteException","io.wolfscript.database.mysql.MySQLDatabase","io.wolfscript.database.sqlite.SQLiteDatabase","io.wolfscript.database.xml.XmlDatabase","java.util.HashMap","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.database.exceptions.0":{"namespace":"io.wolfscript.database","title":"Classes and interfaces for namespace io.wolfscript.database.exceptions","description":"Classes and interfaces for namespace io.wolfscript.database.exceptions","name":"exceptions","qualifiedname":"io.wolfscript.database.exceptions.0","packagename":"io.wolfscript.database.exceptions","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.database.exceptions.DatabaseAccessException","io.wolfscript.database.exceptions.DatabaseException","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","io.wolfscript.database.exceptions.DatabaseWriteException"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.database.exceptions.DatabaseAccessException":{"namespace":"io.wolfscript.database.exceptions","title":"Thrown when there is an error accessing the database","description":"Thrown when there is an error accessing the database","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseAccessException","qualifiedname":"io.wolfscript.database.exceptions.DatabaseAccessException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"DatabaseAccessException constructor","description":"DatabaseAccessException constructor","scope":"public","name":"DatabaseAccessException","args":[{"name":"str","type":"String","description":"str argument"}]},{"title":"DatabaseAccessException constructor","description":"DatabaseAccessException constructor","scope":"public","name":"DatabaseAccessException","args":[{"name":"str","type":"String","description":"str argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.exceptions.DatabaseException":{"namespace":"io.wolfscript.database.exceptions","title":"Thrown when trying to register an already registered database","description":"Thrown when trying to register an already registered database","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseException","qualifiedname":"io.wolfscript.database.exceptions.DatabaseException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"DatabaseException constructor","description":"DatabaseException constructor","scope":"public","name":"DatabaseException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.exceptions.DatabaseReadException":{"namespace":"io.wolfscript.database.exceptions","title":"Thrown when trying to read data from the database and there is an error","description":"Thrown when trying to read data from the database and there is an error","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseReadException","qualifiedname":"io.wolfscript.database.exceptions.DatabaseReadException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"DatabaseReadException constructor","description":"DatabaseReadException constructor","scope":"public","name":"DatabaseReadException","args":[{"name":"str","type":"String","description":"str argument"}]},{"title":"DatabaseReadException constructor","description":"DatabaseReadException constructor","scope":"public","name":"DatabaseReadException","args":[{"name":"str","type":"String","description":"str argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.exceptions.DatabaseTableInconsistencyException":{"namespace":"io.wolfscript.database.exceptions","title":"Thrown when data is inconsistant, this often occours when you make a mistake","description":"Thrown when data is inconsistant, this often occours when you make a mistake in your @Column fields.","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseTableInconsistencyException","qualifiedname":"io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"DatabaseTableInconsistencyException constructor","description":"DatabaseTableInconsistencyException constructor","scope":"public","name":"DatabaseTableInconsistencyException","args":[{"name":"str","type":"String","description":"str argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.exceptions.DatabaseWriteException":{"namespace":"io.wolfscript.database.exceptions","title":"Thrown when trying to write data to the database and there is an error","description":"Thrown when trying to write data to the database and there is an error","doc":{"author":["Chris (damagefilter)"]},"name":"DatabaseWriteException","qualifiedname":"io.wolfscript.database.exceptions.DatabaseWriteException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"DatabaseWriteException constructor","description":"DatabaseWriteException constructor","scope":"public","name":"DatabaseWriteException","args":[{"name":"str","type":"String","description":"str argument"}]},{"title":"DatabaseWriteException constructor","description":"DatabaseWriteException constructor","scope":"public","name":"DatabaseWriteException","args":[{"name":"str","type":"String","description":"str argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.database.mysql.0":{"namespace":"io.wolfscript.database","title":"Classes and interfaces for namespace io.wolfscript.database.mysql","description":"Classes and interfaces for namespace io.wolfscript.database.mysql","name":"mysql","qualifiedname":"io.wolfscript.database.mysql.0","packagename":"io.wolfscript.database.mysql","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.database.mysql.MySQLDatabase"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.database.mysql.MySQLDatabase":{"namespace":"io.wolfscript.database.mysql","title":"Represents access to a MySQL database","description":"Represents access to a MySQL database","doc":{"author":["Aaron (somners)","Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"MySQLDatabase","qualifiedname":"io.wolfscript.database.mysql.MySQLDatabase","type":"class","scope":"public","extends":["io.wolfscript.database.Database"],"constructors":[],"methods":[{"title":"getColumnNames method","description":"getColumnNames method","scope":"public","return":"List<String>","name":"getColumnNames","args":[{"name":"data","type":"io.wolfscript.database.DataAccess","description":"data argument"}]}],"imports":["io.wolfscript.database.Column","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.JdbcConnectionManager","io.wolfscript.database.SQLType","io.wolfscript.database.exceptions.DatabaseAccessException","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","io.wolfscript.database.exceptions.DatabaseWriteException","org.apache.logging.log4j.LogManager","java.sql.Connection","java.sql.DatabaseMetaData","java.sql.PreparedStatement","java.sql.ResultSet","java.sql.SQLException","java.sql.Statement","java.util.ArrayList","java.util.HashMap","java.util.Iterator","java.util.LinkedList","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"describe":"static","description":"Instance property","return":"io.wolfscript.database.mysql.MySQLDatabase","scope":"public","title":"Instance property"}]},"io.wolfscript.database.sqlite.0":{"namespace":"io.wolfscript.database","title":"Classes and interfaces for namespace io.wolfscript.database.sqlite","description":"Classes and interfaces for namespace io.wolfscript.database.sqlite","name":"sqlite","qualifiedname":"io.wolfscript.database.sqlite.0","packagename":"io.wolfscript.database.sqlite","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.database.sqlite.SQLiteDatabase"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.database.sqlite.SQLiteDatabase":{"namespace":"io.wolfscript.database.sqlite","title":"SQLite Database","description":"SQLite Database","doc":{"author":["Jason (darkdiplomat)"]},"name":"SQLiteDatabase","qualifiedname":"io.wolfscript.database.sqlite.SQLiteDatabase","type":"class","scope":"public","extends":["io.wolfscript.database.Database"],"constructors":[],"methods":[],"imports":["io.wolfscript.Wolf","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.JdbcConnectionManager","io.wolfscript.database.exceptions.DatabaseAccessException","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","io.wolfscript.database.exceptions.DatabaseWriteException","net.visualillusionsent.utils.StringUtils","org.apache.logging.log4j.LogManager","java.io.File","java.sql.Connection","java.sql.DatabaseMetaData","java.sql.PreparedStatement","java.sql.ResultSet","java.sql.ResultSetMetaData","java.sql.SQLException","java.sql.Statement","java.util.ArrayList","java.util.HashMap","java.util.Iterator","java.util.LinkedList","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"describe":"static","description":"Instance property","return":"io.wolfscript.database.sqlite.SQLiteDatabase","scope":"public","title":"Instance property"},{"name":"String","modifier":"readonly","args":[],"description":"Get: Close a set of working data. This will return all the data to the connection pool. You can pass null for objects that are not relevant in your given context","doc":{"throws":["DatabaseWriteException when an SQLException was raised or when the data type doesn't match the objects type /\n    private void setToStatement(int index, Object o, PreparedStatement ps, Column.DataType t) throws DatabaseWriteException {\n        try {\n            switch (t) {\n                case BYTE:\n                case INTEGER:\n                case LONG:\n                case SHORT:\n                case BOOLEAN: //SQlite doesn't know boolean values, it converts it to tinyint\n                    ps.setInt(index, (Integer)o);\n                    break;\n                case FLOAT:\n                case DOUBLE:\n                    ps.setDouble(index, (Double)o);\n                    break;\n                case STRING:\n                    ps.setString(index, (String)o);\n            }\n        }\n        catch (SQLException e) {\n            throw new DatabaseWriteException(\"Failed to set property to prepared statement!\", e);\n        }\n        catch (ClassCastException e) {\n            throw new DatabaseWriteException(\"Failed to set property to prepared statement!\", e);\n        }\n    }\n\n    public List<String> getColumnNames(DataAccess data) {\n        Statement s = null;\n        ResultSet rs = null;\n\n        ArrayList<String> columns = new ArrayList<String>();\n        String columnName;\n\n        try {\n            s = JdbcConnectionManager.getConnection().createStatement();\n            rs = s.executeQuery(\"SELECT FROM '\" + data.getName() + \"'\");\n            ResultSetMetaData rsMeta = rs.getMetaData();\n            for (int index = 1; index <= rsMeta.getColumnCount(); index++) {\n                columnName = rsMeta.getColumnLabel(index);\n                columns.add(columnName);\n            }\n        }\n        catch (SQLException ex) {\n            log.error(ex.getMessage(), ex);\n        }\n        finally {\n            close(null, s, rs);\n        }\n        return columns;\n    }\n\n    public String getDataTypeSyntax(Column.DataType type) {\n        switch (type) {\n            case BYTE:\n            case INTEGER:\n            case LONG:\n            case SHORT:\n            case BOOLEAN:\n                return \"INTEGER\";\n            case FLOAT:\n            case DOUBLE:\n                return \"REAL\";\n            case STRING:\n                return \"TEXT\";\n        }\n        return \"\";\n    }\n\n    /** Gets a Java List representation from the SQLite String."],"retur":["n /\n    private List<Comparable<?>> getList(Column.DataType type, String field) {\n        List<Comparable<?>> list = new ArrayList<Comparable<?>>();\n        if (field == null) {\n            return list;\n        }\n        switch (type) {\n            case BYTE:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Byte.valueOf(s));\n                }\n                break;\n            case INTEGER:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Integer.valueOf(s));\n                }\n                break;\n            case FLOAT:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Float.valueOf(s));\n                }\n                break;\n            case DOUBLE:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Double.valueOf(s));\n                }\n                break;\n            case LONG:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Long.valueOf(s));\n                }\n                break;\n            case SHORT:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Short.valueOf(s));\n                }\n                break;\n            case STRING:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(s);\n                }\n                break;\n            case BOOLEAN:\n                for (String s : field.split(this.LIST_REGEX)) {\n                    if (s.equals(NULL_STRING)) {\n                        list.add(null);\n                        continue;\n                    }\n                    list.add(Boolean.valueOf(s));\n                }\n                break;\n        }\n        return list;\n    }\n\n    private String generateQuery(DataAccess data) throws DatabaseTableInconsistencyException {\n        StringBuilder fields = new StringBuilder();\n        StringBuilder values = new StringBuilder();\n        HashMap<Column, Object> columns = data.toDatabaseEntryList();\n        Iterator<Column> it = columns.keySet().iterator();\n\n        Column column;\n        while (it.hasNext()) {\n            column = it.next();\n            if (!column.autoIncrement()) {\n                fields.append(\"`\").append(column.columnName()).append(\"`\").append(\",\");\n                values.append(\"?\").append(\",\");\n            }\n        }\n        if (fields.length() > 0) {\n            fields.deleteCharAt(fields.length() - 1);\n        }\n        if (values.length() > 0) {\n            values.deleteCharAt(values.length() - 1);\n        }\n        return \"INSERT INTO `\" + data.getName() + \"` (\" + fields.toString() + \") VALUES(\" + values.toString() + \")\";\n    }\n\n    /** Get the database entry for a Java List."],"return":["a string representation of the passed list."]},"return":"String","scope":"public","title":"Get: Close a set of working data."}]},"io.wolfscript.database.xml.0":{"namespace":"io.wolfscript.database","title":"Classes and interfaces for namespace io.wolfscript.database.xml","description":"Classes and interfaces for namespace io.wolfscript.database.xml","name":"xml","qualifiedname":"io.wolfscript.database.xml.0","packagename":"io.wolfscript.database.xml","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.database.xml.XmlDatabase"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.database.xml.XmlDatabase":{"namespace":"io.wolfscript.database.xml","title":"Represent access to an XML database","description":"Represent access to an XML database","doc":{"author":["Chris (damagefilter)"]},"name":"XmlDatabase","qualifiedname":"io.wolfscript.database.xml.XmlDatabase","type":"class","scope":"public","extends":["io.wolfscript.database.Database"],"constructors":[],"methods":[],"imports":["com.google.common.collect.Maps","com.google.common.io.Files","com.mchange.v1.lang.BooleanUtils","io.wolfscript.Wolf","io.wolfscript.database.Column","io.wolfscript.database.Column.DataType","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseAccessException","io.wolfscript.database.exceptions.DatabaseReadException","io.wolfscript.database.exceptions.DatabaseTableInconsistencyException","io.wolfscript.database.exceptions.DatabaseWriteException","org.jdom2.Content","org.jdom2.DataConversionException","org.jdom2.Document","org.jdom2.Element","org.jdom2.JDOMException","org.jdom2.input.JDOMParseException","org.jdom2.input.SAXBuilder","org.jdom2.output.Format","org.jdom2.output.XMLOutputter","java.io.File","java.io.FileInputStream","java.io.IOException","java.io.RandomAccessFile","java.lang.annotation.Annotation","java.lang.reflect.Field","java.nio.charset.Charset","java.util.ArrayList","java.util.Comparator","java.util.HashMap","java.util.HashSet","java.util.List","java.util.Map"],"properties":[{"name":"Instance","modifier":"readonly","args":[],"describe":"static","description":"Instance property","return":"io.wolfscript.database.xml.XmlDatabase","scope":"public","title":"Instance property"}]},"io.wolfscript.event.command.0":{"namespace":"io.wolfscript.event","title":"Classes and interfaces for namespace io.wolfscript.event.command","description":"Classes and interfaces for namespace io.wolfscript.event.command","name":"command","qualifiedname":"io.wolfscript.event.command.0","packagename":"io.wolfscript.event.command","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.event.command.CommandBlockCommand","io.wolfscript.event.command.ConsoleCommand","io.wolfscript.event.command.PlayerCommand"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.event.command.CommandBlockCommand":{"namespace":"io.wolfscript.event.command","title":"CommandBlockCommand","description":"CommandBlockCommand<br> Called when a CommandBlock executes a command.","doc":{"author":["Jason (darkdiplomat)"]},"name":"CommandBlockCommand","qualifiedname":"io.wolfscript.event.command.CommandBlockCommand","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.CommandBlockLogic","io.wolfscript.api.entity.vehicle.CommandBlockMinecart","io.wolfscript.api.world.blocks.CommandBlock","io.wolfscript.hook.CancelableHook","net.visualillusionsent.utils.StringUtils"],"properties":[{"name":"Arguments","modifier":"readonly","args":[],"description":"Get: Constructs a new CommandBlockCommand","doc":{"param":["reference the {@link CommandBlockLogic} used (either CommandBlock or CommandBlockMinecart)","args the command and arguments /\n    public CommandBlockCommand(CommandBlockLogic reference, String[] args) {\n        this.reference = reference;\n        this.args = args;\n    }\n\n    /** Gets the CommandBlock if actually a CommandBlock"],"return":["the {@link io.wolfscript.api.world.blocks.CommandBlock} if it is one; {@code null} if its a {@link io.wolfscript.api.entity.vehicle.CommandBlockMinecart} instead /\n    public CommandBlock getCommandBlock() {\n        return reference instanceof CommandBlock ? (CommandBlock)reference : null;\n    }\n\n    /** Gets the CommandBlockMinecart if actually a CommandBlockMinecart","the {@link io.wolfscript.api.entity.vehicle.CommandBlockMinecart} if it is one; {@code null} if its a {@link io.wolfscript.api.world.blocks.CommandBlock} instead /\n    public CommandBlockMinecart getCommandBlockMinecart() {\n        return reference instanceof CommandBlockMinecart ? (CommandBlockMinecart)reference : null;\n    }\n\n    public CommandBlockLogic getReference() {\n        return reference;\n    }\n\n    /** Gets the command and arguments","the command and arguments"]},"return":"String[]","scope":"public","title":"Get: Constructs a new CommandBlockCommand"}]},"io.wolfscript.event.command.ConsoleCommand":{"namespace":"io.wolfscript.event.command","title":"Server command hook. Contains the command issued by the server","description":"Server command hook. Contains the command issued by the server","doc":{"author":["Chris (damagefilter)"]},"name":"ConsoleCommand","qualifiedname":"io.wolfscript.event.command.ConsoleCommand","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.chat.MessageReceiver","io.wolfscript.hook.CancelableHook","net.visualillusionsent.utils.StringUtils"],"properties":[{"name":"Caller","modifier":"readonly","args":[],"description":"Get: Constructs a new ConsoleCommand","doc":{"param":["receiver the {@link MessageReceiver} executing the command","textInput the text input /\n    public ConsoleCommand(MessageReceiver receiver, String textInput) {\n        command = textInput.split(\" \");\n        this.receiver = receiver;\n    }\n\n    /** Get command that was issued by the console"],"return":["String array of the arguments /\n    public String[] getCommand() {\n        return command;\n    }\n\n    /** Get the object that has issued the command. This can be a player or the console (Server). Use <tt>instanceof</tt> to check types","the message receiver (command caller)"]},"return":"io.wolfscript.chat.MessageReceiver","scope":"public","title":"Get: Constructs a new ConsoleCommand"}]},"io.wolfscript.event.command.PlayerCommand":{"namespace":"io.wolfscript.event.command","title":"Player command hook. Contains a player and a command String Array","description":"Player command hook. Contains a player and a command String Array","doc":{"author":["Chris (damagefilter)"]},"name":"PlayerCommand","qualifiedname":"io.wolfscript.event.command.PlayerCommand","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook","net.visualillusionsent.utils.StringUtils"],"properties":[{"name":"Player","modifier":"readonly","args":[],"description":"Get: Constructs a new PlayerCommand","doc":{"param":["player the {@link Player} executing the commmand","textInput the text input from the {@link Player} /\n    public PlayerCommand(Player player, String[] textInput) {\n        this.player = player;\n        command = textInput;\n    }\n\n    /** Get command that was issued by the {@link Player}"],"return":["String array of arguments /\n    public String[] getCommand() {\n        return command;\n    }\n\n    /** Get the {@link io.wolfscript.api.entity.living.humanoid.Player} who issued this command","the Player"]},"return":"io.wolfscript.api.entity.living.humanoid.Player","scope":"public","title":"Get: Constructs a new PlayerCommand"}]},"io.wolfscript.event.entity.0":{"namespace":"io.wolfscript.event","title":"Classes and interfaces for namespace io.wolfscript.event.entity","description":"Classes and interfaces for namespace io.wolfscript.event.entity","name":"entity","qualifiedname":"io.wolfscript.event.entity.0","packagename":"io.wolfscript.event.entity","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.event.entity.ChickenLayEgg","io.wolfscript.event.entity.Damage","io.wolfscript.event.entity.DimensionSwitch","io.wolfscript.event.entity.EndermanDropBlock","io.wolfscript.event.entity.EndermanPickupBlock","io.wolfscript.event.entity.EntityDeath","io.wolfscript.event.entity.EntityDespawn","io.wolfscript.event.entity.EntityLightningStruck","io.wolfscript.event.entity.EntityMount","io.wolfscript.event.entity.EntityMove","io.wolfscript.event.entity.EntitySpawn","io.wolfscript.event.entity.EntityTame","io.wolfscript.event.entity.HangingEntityDestroy","io.wolfscript.event.entity.ItemTouchGround","io.wolfscript.event.entity.MinecartActivate","io.wolfscript.event.entity.MobTarget","io.wolfscript.event.entity.PotionEffectApplied","io.wolfscript.event.entity.PotionEffectFinish","io.wolfscript.event.entity.ProjectileHit","io.wolfscript.event.entity.SlimeSplit","io.wolfscript.event.entity.VehicleCollision","io.wolfscript.event.entity.VehicleDamage","io.wolfscript.event.entity.VehicleDestroy","io.wolfscript.event.entity.VehicleEnter","io.wolfscript.event.entity.VehicleExit","io.wolfscript.event.entity.VehicleMove","io.wolfscript.event.entity.VillagerTradeUnlock"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.event.entity.ChickenLayEgg":{"namespace":"io.wolfscript.event.entity","title":"Chicken lay egg hook, called when a chicken lay an egg.","description":"Chicken lay egg hook, called when a chicken lay an egg.","doc":{"author":["Ehud (EhudB)"]},"name":"ChickenLayEgg","qualifiedname":"io.wolfscript.event.entity.ChickenLayEgg","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.animal.Chicken","io.wolfscript.api.inventory.Item","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NextEggIn","modifier":"writeonly","args":[{"name":"nextEggIn","type":"int","description":"the time until next egg will be laid /\n    public ChickenLayEgg(Chicken chicken, Item egg, int nextEggIn) {\n        this.chicken = chicken;\n        this.egg = egg;\n        this.nextEggIn = nextEggIn;\n    }\n\n    /** Get the {@link io.wolfscript.api.entity.living.animal.Chicken} the laid the egg"}],"description":"Set: Creates a new ChickenLayEgg","doc":{"return":["the chicken that laid the egg /\n    public Chicken getChicken() {\n        return this.chicken;\n    }\n\n    /** Get the egg that was laid","the egg that was laid /\n    public Item getEgg() {\n        return this.egg.clone();\n    }\n\n    /** Change the egg that should be laid","time until next egg will be laid from the current chicken /\n    public int getNextEggIn() {\n        return this.nextEggIn;\n    }\n\n    /** Set the time until next egg will be laid from the chicken that laid the egg"]},"return":"void","scope":"public","title":"Set: Creates a new ChickenLayEgg"}]},"io.wolfscript.event.entity.Damage":{"namespace":"io.wolfscript.event.entity","title":"Damage hook. Contains information about an entity taking damage.","description":"Damage hook. Contains information about an entity taking damage.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Damage","qualifiedname":"io.wolfscript.event.entity.Damage","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.DamageSource","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"DamageDealt","modifier":"writeonly","args":[{"name":"dealt","type":"float","description":"the amount of damage to be dealt /\n    public Damage(Entity attacker, Entity defender, DamageSource source, float dealt) {\n        this.attacker = attacker;\n        this.defender = defender;\n        this.source = source;\n        this.dealt = dealt;\n    }\n\n    /** Gets the attacking {@link io.wolfscript.api.entity.living.EntityLiving} if present"}],"description":"Set: Constructs a new Damage","doc":{"return":["attacker if there is one, {@code null} otherwise /\n    public Entity getAttacker() {\n        return attacker;\n    }\n\n    /** Gets the defending {@link io.wolfscript.api.entity.Entity}","defender /\n    public Entity getDefender() {\n        return defender;\n    }\n\n    /** Gets the {@link io.wolfscript.api.DamageSource} type","the DamageSource /\n    public DamageSource getDamageSource() {\n        return source;\n    }\n\n    /** Sets the {@link io.wolfscript.api.DamageSource}","dealt /\n    public float getDamageDealt() {\n        return dealt;\n    }\n\n    /** Sets the amount of damage dealt"]},"return":"void","scope":"public","title":"Set: Constructs a new Damage"}]},"io.wolfscript.event.entity.DimensionSwitch":{"namespace":"io.wolfscript.event.entity","title":"Dimension switch hook. Contains information about an entity changeing","description":"Dimension switch hook. Contains information about an entity changeing dimentions","doc":{"author":["Somners"]},"name":"DimensionSwitch","qualifiedname":"io.wolfscript.event.entity.DimensionSwitch","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"DimensionSwitch constructor","description":"DimensionSwitch constructor","scope":"public","name":"DimensionSwitch","args":[{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"},{"name":"to","type":"io.wolfscript.api.world.position.Location","description":"to argument"},{"name":"from","type":"io.wolfscript.api.world.position.Location","description":"from argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.world.position.Location","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"LocationFrom","modifier":"readonly","args":[],"description":"Get: Get the entity involved here.","doc":{"return":["The entity. /\n    public Entity getEntity() {\n        return this.entity;\n    }\n\n    /** Get the entities current location.","Current Location /\n    public Location getLocationTo() {\n        return this.to;\n    }\n\n    /** Get the location the entity is warping to.","Location to."]},"return":"io.wolfscript.api.world.position.Location","scope":"public","title":"Get: Get the entity involved here."}]},"io.wolfscript.event.entity.EndermanDropBlock":{"namespace":"io.wolfscript.event.entity","title":"Enderman drop block hook. Contains information about an Enderman dropping a block.","description":"Enderman drop block hook. Contains information about an Enderman dropping a block.","doc":{"author":["Jason (darkdiplomat)"]},"name":"EndermanDropBlock","qualifiedname":"io.wolfscript.event.entity.EndermanDropBlock","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.monster.Enderman","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Block","modifier":"readonly","args":[],"description":"Get: Constructs a new EndermanDropBlock","doc":{"param":["enderman the {@link Enderman} dropping a block","block the {@link Block} being dropped on /\n    public EndermanDropBlock(Enderman enderman, Block block) {\n        this.enderman = enderman;\n        this.block = block;\n    }\n\n    /** Gets the {@link Enderman}"],"return":["the {@link io.wolfscript.api.entity.living.monster.Enderman} /\n    public Enderman getEnderman() {\n        return enderman;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block}","the {@link io.wolfscript.api.world.blocks.Block}"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Constructs a new EndermanDropBlock"}]},"io.wolfscript.event.entity.EndermanPickupBlock":{"namespace":"io.wolfscript.event.entity","title":"Enderman pick up block hook. Contains information about an Enderman picking up a block","description":"Enderman pick up block hook. Contains information about an Enderman picking up a block","doc":{"author":["Jason (darkdiplomat)"]},"name":"EndermanPickupBlock","qualifiedname":"io.wolfscript.event.entity.EndermanPickupBlock","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.monster.Enderman","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Block","modifier":"readonly","args":[],"description":"Get: Constructs a new EndermanPickUpBlockHook","doc":{"param":["enderman the {@link Enderman} picking up a block","block the {@link Block} being picked up /\n    public EndermanPickupBlock(Enderman enderman, Block block) {\n        this.enderman = enderman;\n        this.block = block;\n    }\n\n    /** Gets the {@link Enderman}"],"return":["the {@link io.wolfscript.api.entity.living.monster.Enderman} /\n    public Enderman getEnderman() {\n        return enderman;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block}","the {@link io.wolfscript.api.world.blocks.Block}"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Constructs a new EndermanPickUpBlockHook"}]},"io.wolfscript.event.entity.EntityDeath":{"namespace":"io.wolfscript.event.entity","title":"EntityDeath","description":"EntityDeath <p/> Called when a Entity (other than a {@link io.wolfscript.api.entity.living.humanoid.Player}) dies.<br> For {@link io.wolfscript.api.entity.living.humanoid.Player} death, use {@link io.wolfscript.event.player.PlayerDeath}","doc":{"author":["Jason (darkdiplomat)"],"see":["PlayerDeath"]},"name":"EntityDeath","qualifiedname":"io.wolfscript.event.entity.EntityDeath","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"Constructs a new EntityDeath","description":"Constructs a new EntityDeath","doc":{"param":["entity the {@link Entity} that is dying","cause the {@link DamageSource} that killed the Entity /\n    public EntityDeath(Entity entity, DamageSource cause) {\n        this.entity = entity;\n        this.cause = cause;\n    }\n\n    /** Gets the {@link Entity} that is dying"],"return":["the dying entity /\n    public Entity getEntity() {\n        return entity;\n    }\n\n    /** Gets the {@link io.wolfscript.api.DamageSource} that killed the {@link io.wolfscript.api.entity.Entity}","the death dealing {@link io.wolfscript.api.DamageSource} /\n    public DamageSource getDamageSource() {\n        return cause;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.DamageSource","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook","io.wolfscript.event.player.PlayerDeath"],"properties":[]},"io.wolfscript.event.entity.EntityDespawn":{"namespace":"io.wolfscript.event.entity","title":"Entity despawn hook. Contains information about an entity despawning.","description":"Entity despawn hook. Contains information about an entity despawning.","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityDespawn","qualifiedname":"io.wolfscript.event.entity.EntityDespawn","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"EntityDespawn constructor","description":"EntityDespawn constructor","scope":"public","name":"EntityDespawn","args":[{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.Entity} despawning","doc":{"return":["the {@link io.wolfscript.api.entity.Entity} despawning"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.Entity} despawning"}]},"io.wolfscript.event.entity.EntityLightningStruck":{"namespace":"io.wolfscript.event.entity","title":"EntityLightningStruck","description":"EntityLightningStruck <p/> Called when an {@link io.wolfscript.api.entity.Entity} should be struck by a {@link io.wolfscript.api.entity.effect.LightningBolt}","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntityLightningStruck","qualifiedname":"io.wolfscript.event.entity.EntityLightningStruck","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new EntityLightningStruck","description":"Constructs a new EntityLightningStruck","doc":{"param":["bolt the {@link LightningBolt} striking","entity the {@link Entity} being stuck /\n    public EntityLightningStruck(LightningBolt bolt, Entity entity) {\n        this.bolt = bolt;\n        this.entity = entity;\n    }\n\n    /** Gets the {@link LightningBolt} striking"],"return":["the striking {@link io.wolfscript.api.entity.effect.LightningBolt} /\n    public LightningBolt getLightningBolt() {\n        return bolt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.Entity} being struck","the struck {@link io.wolfscript.api.entity.Entity} /\n    public Entity getStruckEntity() {\n        return entity;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.effect.LightningBolt","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.entity.EntityMount":{"namespace":"io.wolfscript.event.entity","title":"Called when one entity is trying to mount another","description":"Called when one entity is trying to mount another","doc":{"author":["Chris (damagefilter)"]},"name":"EntityMount","qualifiedname":"io.wolfscript.event.entity.EntityMount","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"EntityMount constructor","description":"EntityMount constructor","scope":"public","name":"EntityMount","args":[{"name":"entity","type":"io.wolfscript.api.entity.living.LivingBase","description":"entity argument"},{"name":"rider","type":"io.wolfscript.api.entity.living.LivingBase","description":"rider argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Rider","modifier":"readonly","args":[],"description":"Get: Get the entity that is about to mount another one","doc":{"return":["the entering Entity /\n    public LivingBase getEntity() {\n        return entity;\n    }\n\n    /** Get the entity that is about to mount the other one","the {@link io.wolfscript.api.entity.living.LivingBase} rider"]},"return":"io.wolfscript.api.entity.living.LivingBase","scope":"public","title":"Get: Get the entity that is about to mount another one"}]},"io.wolfscript.event.entity.EntityMove":{"namespace":"io.wolfscript.event.entity","title":"Entity Move Hook","description":"Entity Move Hook <p/> Called when an {@link io.wolfscript.api.entity.Entity} (other than a {@link io.wolfscript.api.entity.living.humanoid.Player}) moves.<br> Use {@link io.wolfscript.event.player.PlayerMove} for Player movements.","doc":{"author":["Jason (darkdiplomat)"],"see":["PlayerMove"]},"name":"EntityMove","qualifiedname":"io.wolfscript.event.entity.EntityMove","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"EntityMove constructor","description":"EntityMove constructor","scope":"public","name":"EntityMove","args":[{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"},{"name":"from","type":"io.wolfscript.api.world.position.Location","description":"from argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.CancelableHook","io.wolfscript.event.player.PlayerMove"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Entity property","return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Entity property"},{"name":"From","modifier":"readonly","args":[],"description":"From property","return":"io.wolfscript.api.world.position.Location","scope":"public","title":"From property"},{"name":"To","modifier":"readonly","args":[],"description":"To property","return":"io.wolfscript.api.world.position.Location","scope":"public","title":"To property"}]},"io.wolfscript.event.entity.EntitySpawn":{"namespace":"io.wolfscript.event.entity","title":"Entity spawn hook. Contains information about an entity spawning.","description":"Entity spawn hook. Contains information about an entity spawning.","doc":{"author":["Jason (darkdiplomat)"]},"name":"EntitySpawn","qualifiedname":"io.wolfscript.event.entity.EntitySpawn","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"EntitySpawn constructor","description":"EntitySpawn constructor","scope":"public","name":"EntitySpawn","args":[{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.Entity} spawning","doc":{"return":["{@link io.wolfscript.api.entity.Entity}"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.Entity} spawning"}]},"io.wolfscript.event.entity.EntityTame":{"namespace":"io.wolfscript.event.entity","title":"Entity tame hook","description":"Entity tame hook","doc":{"author":["Chris (damagefilter)"]},"name":"EntityTame","qualifiedname":"io.wolfscript.event.entity.EntityTame","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"EntityTame constructor","description":"EntityTame constructor","scope":"public","name":"EntityTame","args":[{"name":"animal","type":"io.wolfscript.api.entity.living.animal.EntityAnimal","description":"animal argument"},{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"isTamed","type":"boolean","description":"isTamed argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.animal.EntityAnimal","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Animal","modifier":"readonly","args":[],"description":"Get: Check the default tame result.","doc":{"return":["True if the animal was tamed, false otherwise /\n    public boolean isTamed() {\n        return isTamed;\n    }\n\n    /** Override the tame result.","the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the animal in question","the {@link io.wolfscript.api.entity.living.animal.EntityAnimal}"],"param":["isTamed True to force the animal being tamed, false to force the taming to fail /\n    public void setTamed(boolean isTamed) {\n        this.isTamed = isTamed;\n    }\n\n    /** Get the player that is wanting to tame the animal"]},"return":"io.wolfscript.api.entity.living.animal.EntityAnimal","scope":"public","title":"Get: Check the default tame result."}]},"io.wolfscript.event.entity.HangingEntityDestroy":{"namespace":"io.wolfscript.event.entity","title":"HangingEntity destroy hook. Contains information about a painting or item frame being destroyed.","description":"HangingEntity destroy hook. Contains information about a painting or item frame being destroyed. In case the it was destroyed by a player, you will get this player too.","doc":{"author":["Jason (darkdiplomat)","Chris (damagefilter)"]},"name":"HangingEntityDestroy","qualifiedname":"io.wolfscript.event.entity.HangingEntityDestroy","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"HangingEntityDestroy constructor","description":"HangingEntityDestroy constructor","scope":"public","name":"HangingEntityDestroy","args":[{"name":"hanging","type":"io.wolfscript.api.entity.hanging.HangingEntity","description":"hanging argument"},{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"source","type":"io.wolfscript.api.DamageSource","description":"source argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.DamageSource","io.wolfscript.api.entity.hanging.HangingEntity","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"DamageSource","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.hanging.HangingEntity}","doc":{"return":["hanging entity /\n    public HangingEntity getPainting() {\n        return hanging;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} who destroyed the item frame or painting. If the hook was not caused by a player, this will return null.","player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Check if this hook was called because a player destroyed an item frame or painting.","boolean true if player destroyed the hanging entity, false otherwise /\n    public boolean isCausedByPlayer() {\n        return player != null;\n    }\n\n    /** Gets the DamageSource associated","damage source"]},"return":"io.wolfscript.api.DamageSource","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.hanging.HangingEntity}"}]},"io.wolfscript.event.entity.ItemTouchGround":{"namespace":"io.wolfscript.event.entity","title":"ItemTouchGround","description":"ItemTouchGround<br> Called when an {@link io.wolfscript.api.entity.EntityItem} hits the ground","doc":{"author":["Jason (darkdiplomat)"]},"name":"ItemTouchGround","qualifiedname":"io.wolfscript.event.entity.ItemTouchGround","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.EntityItem","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"EntityItem","modifier":"readonly","args":[],"description":"Get: Constructs a new ItemTouchGround","doc":{"param":["item the {@link EntityItem} hitting the ground /\n    public ItemTouchGround(EntityItem item) {\n        this.item = item;\n    }\n\n    /** Gets the {@link EntityItem} hitting the ground"],"return":["the {@link io.wolfscript.api.entity.EntityItem}"]},"return":"io.wolfscript.api.entity.EntityItem","scope":"public","title":"Get: Constructs a new ItemTouchGround"}]},"io.wolfscript.event.entity.MinecartActivate":{"namespace":"io.wolfscript.event.entity","title":"MinecartActivate","description":"MinecartActivate<br> Called when a {@link io.wolfscript.api.entity.vehicle.Minecart} passes over an activation rail.","doc":{"author":["Jason (darkdiplomat)"]},"name":"MinecartActivate","qualifiedname":"io.wolfscript.event.entity.MinecartActivate","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new MinecartActivate","description":"Constructs a new MinecartActivate","doc":{"param":["minecart the {@link Minecart} being activated","power whether the {@link Minecart} is receiving power or not /\n    public MinecartActivate(Minecart minecart, boolean power) {\n        this.minecart = minecart;\n        this.power = power;\n    }\n\n    /** Gets the {@link Minecart}"],"return":["the {@link io.wolfscript.api.entity.vehicle.Minecart} /\n    public Minecart getMinecart() {\n        return minecart;\n    }\n\n    /** Checks if the {@link io.wolfscript.api.entity.vehicle.Minecart} is receiving power or not","{@code true} if powered; {@code false} if not"]},"scope":"public","return":"boolean","name":"isPowered","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.vehicle.Minecart","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.entity.MobTarget":{"namespace":"io.wolfscript.event.entity","title":"Mob target hook","description":"Mob target hook <p/> Contains information about a {@link io.wolfscript.api.entity.living.LivingBase} targeting another {@link io.wolfscript.api.entity.living.LivingBase} either for attack or following","doc":{"author":["Jason (darkdiplomat)"]},"name":"MobTarget","qualifiedname":"io.wolfscript.event.entity.MobTarget","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.living.LivingBase","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Target","modifier":"readonly","args":[],"description":"Get: Constructs a new MobTarget","doc":{"param":["entity the {@link LivingBase} doing the targeting","target the {@link LivingBase} target /\n    public MobTarget(LivingBase entity, LivingBase target) {\n        this.entity = entity;\n        this.target = target;\n    }\n\n    /** Gets the {@link EntityLiving} doing the targeting"],"return":["entity /\n    public LivingBase getEntity() {\n        return entity;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.EntityLiving} being targeted","the {@link io.wolfscript.api.entity.living.EntityLiving} target"]},"return":"io.wolfscript.api.entity.living.LivingBase","scope":"public","title":"Get: Constructs a new MobTarget"}]},"io.wolfscript.event.entity.PotionEffectApplied":{"namespace":"io.wolfscript.event.entity","title":"PotionEffectApplied","description":"PotionEffectApplied<br> Called when a {@link io.wolfscript.api.potion.PotionEffect} is applied to a {@link io.wolfscript.api.entity.living.LivingBase}","doc":{"author":["Jason (darkdiplomat)"]},"name":"PotionEffectApplied","qualifiedname":"io.wolfscript.event.entity.PotionEffectApplied","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.potion.PotionEffect","io.wolfscript.hook.Hook"],"properties":[{"name":"PotionEffect","modifier":"writeonly","args":[{"name":"effect","type":"io.wolfscript.api.potion.PotionEffect","description":"the {@link io.wolfscript.api.potion.PotionEffect} being applied /\n    public PotionEffectApplied(LivingBase entity, PotionEffect effect) {\n        this.entity = entity;\n        this.effect = effect;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.LivingBase} having a {@link io.wolfscript.api.potion.PotionEffect} applied to"}],"description":"Set: Constructs a new PotionEffectApplied","doc":{"return":["the {@link io.wolfscript.api.entity.living.LivingBase} /\n    public LivingBase getEntity() {\n        return entity;\n    }\n\n    /** Gets the {@link io.wolfscript.api.potion.PotionEffect} being applied","the {@link io.wolfscript.api.potion.PotionEffect} /\n    public PotionEffect getPotionEffect() {\n        return effect;\n    }\n\n    /** Sets the {@link io.wolfscript.api.potion.PotionEffect} to apply"]},"return":"void","scope":"public","title":"Set: Constructs a new PotionEffectApplied"}]},"io.wolfscript.event.entity.PotionEffectFinish":{"namespace":"io.wolfscript.event.entity","title":"PotionEffectFinish","description":"PotionEffectFinish<br> Called when a {@link io.wolfscript.api.potion.PotionEffect} finishes it's effect on a {@link io.wolfscript.api.entity.living.LivingBase}","doc":{"author":["Jason (darkdiplomat)"]},"name":"PotionEffectFinish","qualifiedname":"io.wolfscript.event.entity.PotionEffectFinish","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.potion.PotionEffect","io.wolfscript.hook.Hook"],"properties":[{"name":"PotionEffect","modifier":"readonly","args":[],"description":"Get: Constructs a new PotionEffectFinshHook","doc":{"param":["entity the {@link LivingBase} having the {@link PotionEffect} finishing it's effect","effect the {@link PotionEffect} being finished /\n    public PotionEffectFinish(LivingBase entity, PotionEffect effect) {\n        this.entity = entity;\n        this.effect = effect;\n    }\n\n    /** Gets the {@link LivingBase} having a {@link PotionEffect} finishing it's effect"],"return":["the {@link io.wolfscript.api.entity.living.LivingBase} /\n    public LivingBase getEntity() {\n        return entity;\n    }\n\n    /** Gets the {@link io.wolfscript.api.potion.PotionEffect} finishing","the {@link io.wolfscript.api.potion.PotionEffect}"]},"return":"io.wolfscript.api.potion.PotionEffect","scope":"public","title":"Get: Constructs a new PotionEffectFinshHook"}]},"io.wolfscript.event.entity.ProjectileHit":{"namespace":"io.wolfscript.event.entity","title":"ProjectileHit","description":"ProjectileHit<br> Called when a Projectile hits something","doc":{"author":["Jason (darkdiplomat)"]},"name":"ProjectileHit","qualifiedname":"io.wolfscript.event.entity.ProjectileHit","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"EntityHit","modifier":"readonly","args":[],"description":"Get: Constructs a new ProjectileHit","doc":{"param":["projectile the {@link Entity} projectile","hit the {@link Entity} hit if present /\n    public ProjectileHit(Entity projectile, Entity hit) {\n        this.projectile = projectile;\n        this.hit = hit;\n    }\n\n    /** Gets the {@link Entity} projectile"],"return":["the projectile /\n    public Entity getProjectile() {\n        return projectile;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.Entity} hit by the projectile","{@link io.wolfscript.api.entity.Entity} if present; {@code null} otherwise"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Constructs a new ProjectileHit"}]},"io.wolfscript.event.entity.SlimeSplit":{"namespace":"io.wolfscript.event.entity","title":"Slime split hook, Contains information about a slime split.","description":"Slime split hook, Contains information about a slime split.","doc":{"author":["Ehud (EhudB)"]},"name":"SlimeSplit","qualifiedname":"io.wolfscript.event.entity.SlimeSplit","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.monster.Slime","io.wolfscript.hook.Hook","java.util.List"],"properties":[{"name":"ChildSlimes","modifier":"readonly","args":[],"description":"Get: Constructs a new SlimeSplit","doc":{"param":["originalSlime the original {@link Slime} that died","childSlimes the {@link Slime}s that should spawn /\n    public SlimeSplit(Slime originalSlime, List<Slime> childSlimes) {\n        this.originalSlime = originalSlime;\n        this.childSlimes = childSlimes;\n    }\n\n    /** Get the original {@link Slime} that died"],"return":["the {@link io.wolfscript.api.entity.living.monster.Slime} that died /\n    public Slime getOriginalSlime() {\n        return this.originalSlime;\n    }\n\n    /** Get the {@link io.wolfscript.api.entity.living.monster.Slime}s that should be spawned","a list of {@link io.wolfscript.api.entity.living.monster.Slime}s that will spawn"]},"return":"List<Slime>","scope":"public","title":"Get: Constructs a new SlimeSplit"}]},"io.wolfscript.event.entity.VehicleCollision":{"namespace":"io.wolfscript.event.entity","title":"Is called when a vehicle collides with a LivingEntity","description":"Is called when a vehicle collides with a LivingEntity","doc":{"author":["Chris (damagefilter)"]},"name":"VehicleCollision","qualifiedname":"io.wolfscript.event.entity.VehicleCollision","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.EntityLiving","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Get: Constructs a Collision hook.","doc":{"param":["vehicle","entity entity that got hit by a vehicle /\n    public VehicleCollision(Vehicle vehicle, Entity entity) {\n        this.vehicle = vehicle;\n        this.collisioner = entity;\n    }\n\n    /** Get the {@link Vehicle} that caused the collision"],"return":["the vehicle /\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    /** Get the {@link io.wolfscript.api.entity.living.EntityLiving} that got hit by the vehicle","the enteringEntity"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Constructs a Collision hook."}]},"io.wolfscript.event.entity.VehicleDamage":{"namespace":"io.wolfscript.event.entity","title":"Vehicle Damage hook. Contains information about a vehicle receiving damage.","description":"Vehicle Damage hook. Contains information about a vehicle receiving damage.","doc":{"author":["Chris (damagefilter)"]},"name":"VehicleDamage","qualifiedname":"io.wolfscript.event.entity.VehicleDamage","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"VehicleDamage constructor","description":"VehicleDamage constructor","scope":"public","name":"VehicleDamage","args":[{"name":"vehicle","type":"io.wolfscript.api.entity.vehicle.Vehicle","description":"vehicle argument"},{"name":"attacker","type":"io.wolfscript.api.entity.Entity","description":"attacker argument"},{"name":"source","type":"io.wolfscript.api.DamageSource","description":"source argument"},{"name":"dealt","type":"float","description":"dealt argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.DamageSource","io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"DamageDealt","modifier":"readonly","args":[],"description":"Get: Get the vehicle that is about to be damaged","doc":{"return":["attacker if there is one, null otherwise /\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    /** Get the entity that is inflicting the damage to the vehicle","defender /\n    public Entity getAttacker() {\n        return attacker;\n    }\n\n    /** Gets the {@link io.wolfscript.api.DamageSource} type","source /\n    public DamageSource getDamageSource() {\n        return source;\n    }\n\n    /** Gets the amount of damage dealt","dealt"]},"return":"float","scope":"public","title":"Get: Get the vehicle that is about to be damaged"}]},"io.wolfscript.event.entity.VehicleDestroy":{"namespace":"io.wolfscript.event.entity","title":"VehicleDestoryHook","description":"VehicleDestoryHook<br> Called when a Minecart or Boat is destroyed","doc":{"author":["Jason (darkdiplomat)"]},"name":"VehicleDestroy","qualifiedname":"io.wolfscript.event.entity.VehicleDestroy","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"VehicleDestroy constructor","description":"VehicleDestroy constructor","scope":"public","name":"VehicleDestroy","args":[{"name":"vehicle","type":"io.wolfscript.api.entity.vehicle.Vehicle","description":"vehicle argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.hook.Hook"],"properties":[{"name":"Vehicle","modifier":"readonly","args":[],"description":"Get: The {@link io.wolfscript.api.entity.vehicle.Vehicle} being destoryed","doc":{"return":["the {@link io.wolfscript.api.entity.vehicle.Vehicle}"]},"return":"io.wolfscript.api.entity.vehicle.Vehicle","scope":"public","title":"Get: The {@link io.wolfscript.api.entity.vehicle.Vehicle} being destoryed"}]},"io.wolfscript.event.entity.VehicleEnter":{"namespace":"io.wolfscript.event.entity","title":"Is called when a LivingEntity enters a vehicle","description":"Is called when a LivingEntity enters a vehicle","doc":{"author":["Chris (damagefilter)"]},"name":"VehicleEnter","qualifiedname":"io.wolfscript.event.entity.VehicleEnter","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"VehicleEnter constructor","description":"VehicleEnter constructor","scope":"public","name":"VehicleEnter","args":[{"name":"vehicle","type":"io.wolfscript.api.entity.vehicle.Vehicle","description":"vehicle argument"},{"name":"entity","type":"io.wolfscript.api.entity.living.LivingBase","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Entity property","doc":{"return":["the vehicle /\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    /**","the enteringEntity"]},"return":"io.wolfscript.api.entity.living.LivingBase","scope":"public","title":"Entity property"}]},"io.wolfscript.event.entity.VehicleExit":{"namespace":"io.wolfscript.event.entity","title":"Is called when a LivingEntity exits a vehicle","description":"Is called when a LivingEntity exits a vehicle","doc":{"author":["Chris (damagefilter)"]},"name":"VehicleExit","qualifiedname":"io.wolfscript.event.entity.VehicleExit","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"VehicleExit constructor","description":"VehicleExit constructor","scope":"public","name":"VehicleExit","args":[{"name":"vehicle","type":"io.wolfscript.api.entity.vehicle.Vehicle","description":"vehicle argument"},{"name":"entity","type":"io.wolfscript.api.entity.living.LivingBase","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Entity property","doc":{"return":["the vehicle /\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    /**","the enteringEntity"]},"return":"io.wolfscript.api.entity.living.LivingBase","scope":"public","title":"Entity property"}]},"io.wolfscript.event.entity.VehicleMove":{"namespace":"io.wolfscript.event.entity","title":"Is called when a LivingEntity moves a vehicle","description":"Is called when a LivingEntity moves a vehicle","doc":{"author":["Chris (damagefilter)"]},"name":"VehicleMove","qualifiedname":"io.wolfscript.event.entity.VehicleMove","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"VehicleMove constructor","description":"VehicleMove constructor","scope":"public","name":"VehicleMove","args":[{"name":"vehicle","type":"io.wolfscript.api.entity.vehicle.Vehicle","description":"vehicle argument"},{"name":"from","type":"io.wolfscript.api.world.position.Vector3D","description":"from argument"},{"name":"to","type":"io.wolfscript.api.world.position.Vector3D","description":"to argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.vehicle.Vehicle","io.wolfscript.api.world.position.Vector3D","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"To","modifier":"writeonly","args":[{"name":"to","type":"io.wolfscript.api.world.position.Vector3D","description":"the to to set"}],"description":"To property","doc":{"return":["the vehicle /\n    public Vehicle getVehicle() {\n        return vehicle;\n    }\n\n    /**","the from /\n    public Vector3D getFrom() {\n        return from;\n    }\n\n    /**","the to /\n    public Vector3D getTo() {\n        return to;\n    }\n\n    /** Override this vehicles target position"]},"return":"void","scope":"public","title":"To property"}]},"io.wolfscript.event.entity.VillagerTradeUnlock":{"namespace":"io.wolfscript.event.entity","title":"VillagerTradeUnlock hook","description":"VillagerTradeUnlock hook<br> Called when a Trade is unlocked","doc":{"author":["Jason (darkdiplomat)"]},"name":"VillagerTradeUnlock","qualifiedname":"io.wolfscript.event.entity.VillagerTradeUnlock","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.VillagerTrade","io.wolfscript.api.entity.living.humanoid.Villager","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Trade","modifier":"readonly","args":[],"description":"Get: Constructs a new VillagerTradeUnlock","doc":{"param":["villager the {@link Villager} merchant","trade the {@link VillagerTrade} unlocked /\n    public VillagerTradeUnlock(Villager villager, VillagerTrade trade) {\n        this.villager = villager;\n        this.trade = trade;\n    }\n\n    /** Gets the {@link Villager} merchant"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Villager} /\n    public Villager getVillager() {\n        return villager;\n    }\n\n    /** Gets the {@link io.wolfscript.api.VillagerTrade} unlocked","the {@link io.wolfscript.api.VillagerTrade} unlocked"]},"return":"io.wolfscript.api.VillagerTrade","scope":"public","title":"Get: Constructs a new VillagerTradeUnlock"}]},"io.wolfscript.event.player.0":{"namespace":"io.wolfscript.event","title":"Classes and interfaces for namespace io.wolfscript.event.player","description":"Classes and interfaces for namespace io.wolfscript.event.player","name":"player","qualifiedname":"io.wolfscript.event.player.0","packagename":"io.wolfscript.event.player","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.event.player.AnvilUse","io.wolfscript.event.player.ArmorBroken","io.wolfscript.event.player.ArmorStandModify","io.wolfscript.event.player.Ban","io.wolfscript.event.player.BedEnter","io.wolfscript.event.player.BedExit","io.wolfscript.event.player.BlockDestroy","io.wolfscript.event.player.BlockLeftClick","io.wolfscript.event.player.BlockPlace","io.wolfscript.event.player.BlockRightClick","io.wolfscript.event.player.BookEdit","io.wolfscript.event.player.Chat","io.wolfscript.event.player.Connection","io.wolfscript.event.player.Craft","io.wolfscript.event.player.Disconnection","io.wolfscript.event.player.Eat","io.wolfscript.event.player.Enchant","io.wolfscript.event.player.EntityRightClick","io.wolfscript.event.player.Experience","io.wolfscript.event.player.FoodExhaustion","io.wolfscript.event.player.FoodLevel","io.wolfscript.event.player.FoodSaturation","io.wolfscript.event.player.GameModeChange","io.wolfscript.event.player.HealthChange","io.wolfscript.event.player.HeldItemChange","io.wolfscript.event.player.Inventory","io.wolfscript.event.player.ItemDrop","io.wolfscript.event.player.ItemFrameRotate","io.wolfscript.event.player.ItemFrameSetItem","io.wolfscript.event.player.ItemPickup","io.wolfscript.event.player.ItemUse","io.wolfscript.event.player.Kick","io.wolfscript.event.player.LevelUp","io.wolfscript.event.player.PlayerArmSwing","io.wolfscript.event.player.PlayerDeath","io.wolfscript.event.player.PlayerIdle","io.wolfscript.event.player.PlayerList","io.wolfscript.event.player.PlayerMove","io.wolfscript.event.player.PlayerRespawned","io.wolfscript.event.player.PlayerRespawning","io.wolfscript.event.player.PortalUse","io.wolfscript.event.player.PreConnection","io.wolfscript.event.player.ReturnFromIdle","io.wolfscript.event.player.SignChange","io.wolfscript.event.player.SignShow","io.wolfscript.event.player.SlotClick","io.wolfscript.event.player.StatGained","io.wolfscript.event.player.ToolBroken","io.wolfscript.event.player.VillagerTrade"],"interfaces":[],"enums":["io.wolfscript.event.player.TeleportCause"],"namespaces":[],"properties":[]},"io.wolfscript.event.player.AnvilUse":{"namespace":"io.wolfscript.event.player","title":"AnvilUse Hook","description":"AnvilUse Hook <p/> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} uses an Anvil<br> Get the {@link io.wolfscript.api.world.blocks.Anvil} and modify it's values directly","doc":{"author":["Jason (darkdiplomat)"]},"name":"AnvilUse","qualifiedname":"io.wolfscript.event.player.AnvilUse","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Anvil","io.wolfscript.hook.Hook"],"properties":[{"name":"Anvil","modifier":"readonly","args":[],"description":"Get: Constructs a new AnvilUse","doc":{"param":["player the {@link Player} using the {@link Anvil}","anvil the {@link Anvil} being used /\n    public AnvilUse(Player player, Anvil anvil) {\n        this.player = player;\n        this.anvil = anvil;\n    }\n\n    /** Gets the {@link Player} using the {@link Anvil}"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Anvil} in use","the {@link io.wolfscript.api.world.blocks.Anvil}"]},"return":"io.wolfscript.api.world.blocks.Anvil","scope":"public","title":"Get: Constructs a new AnvilUse"}]},"io.wolfscript.event.player.ArmorBroken":{"namespace":"io.wolfscript.event.player","title":"Called when a piece of Armor has been destroyed","description":"Called when a piece of Armor has been destroyed","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ArmorBroken","qualifiedname":"io.wolfscript.event.player.ArmorBroken","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ArmorBroken constructor","description":"ArmorBroken constructor","scope":"public","name":"ArmorBroken","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"armor","type":"io.wolfscript.api.inventory.Item","description":"armor argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.hook.Hook"],"properties":[{"name":"Armor","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} who's armor has broken","doc":{"return":["player who's armor has broken /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the armor that was broken<p/> NOTE: Amount will be 0; to restore the item set amount back to 1","the tool that was broken"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} who's armor has broken"}]},"io.wolfscript.event.player.ArmorStandModify":{"namespace":"io.wolfscript.event.player","title":"Called when a @{link Player} places/replaces armor in an {@link io.wolfscript.api.entity.ArmorStand}","description":"Called when a @{link Player} places/replaces armor in an {@link io.wolfscript.api.entity.ArmorStand}","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ArmorStandModify","qualifiedname":"io.wolfscript.event.player.ArmorStandModify","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ArmorStandModify constructor","description":"ArmorStandModify constructor","scope":"public","name":"ArmorStandModify","args":[{"name":"armorStand","type":"io.wolfscript.api.entity.ArmorStand","description":"armorStand argument"},{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"slotId","type":"int","description":"slotId argument"},{"name":"current","type":"io.wolfscript.api.inventory.Item","description":"current argument"},{"name":"setting","type":"io.wolfscript.api.inventory.Item","description":"setting argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.ArmorStand","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"SettingItem","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} modifying the ArmorStand","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} currently in the ArmorStand","the current {@link io.wolfscript.api.inventory.Item} or {@code null} if currently no item is in the slot /\n    public Item getCurrentItem() {\n        return current;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} being set in the ArmorStand","the placing/replacing {@link io.wolfscript.api.inventory.Item} or {@code null} if removing armor from the stand"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} modifying the ArmorStand"},{"name":"SlotId","modifier":"readonly","args":[],"description":"SlotId property","return":"int","scope":"public","title":"SlotId property"}]},"io.wolfscript.event.player.Ban":{"namespace":"io.wolfscript.event.player","title":"Ban hook. Contains information about an issued Ban","description":"Ban hook. Contains information about an issued Ban","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Ban","qualifiedname":"io.wolfscript.event.player.Ban","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"Ban constructor","description":"Ban constructor","scope":"public","name":"Ban","args":[{"name":"banned","type":"io.wolfscript.api.PlayerReference","description":"banned argument"},{"name":"ip","type":"String","description":"ip argument"},{"name":"moderator","type":"io.wolfscript.chat.MessageReceiver","description":"moderator argument"},{"name":"reason","type":"String","description":"reason argument"},{"name":"bantime","type":"long","description":"bantime argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.PlayerReference","io.wolfscript.chat.MessageReceiver","io.wolfscript.hook.Hook"],"properties":[{"name":"Bantime","modifier":"readonly","args":[],"description":"Get: Get the {@link io.wolfscript.api.PlayerReference} that has been banned. This might be null if the banned player is offline/not currently on the server","doc":{"return":["banned if not ipban, null otherwise /\n    public PlayerReference getBannedPlayer() {\n        return banned;\n    }\n\n    /** Checks if this is an IP ban","true if is IP ban /\n    public boolean isIpBan() {\n        return ipban;\n    }\n\n    /** Gets the banned IP address","ip if is ipban, null otherwise /\n    public String getIp() {\n        return ip;\n    }\n\n    /** Get the {@link io.wolfscript.chat.MessageReceiver} that has issued the ban.","moderator /\n    public MessageReceiver getModerator() {\n        return moderator;\n    }\n\n    /** Gets the reason for the ban","reason /\n    public String getReason() {\n        return reason;\n    }\n\n    /** Return the ban time as unix timestamp. This is the amount of seconds this ban lasts","the bantime, -1 if ban is a perma-ban"]},"return":"long","scope":"public","title":"Get: Get the {@link io.wolfscript.api.PlayerReference} that has been banned."}]},"io.wolfscript.event.player.BedEnter":{"namespace":"io.wolfscript.event.player","title":"Bed enter hook, called when a player enters a bed","description":"Bed enter hook, called when a player enters a bed","doc":{"author":["Ehud (EhudB)"]},"name":"BedEnter","qualifiedname":"io.wolfscript.event.player.BedEnter","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Bed","modifier":"readonly","args":[],"description":"Get: Create a new BedEnter","doc":{"param":["player the player that entered the bed","bed the bed that the player entered /\n    public BedEnter(Player player, Block bed) {\n        this.player = player;\n        this.bed = bed;\n    }\n\n    /** Gets the {@link Player} entering the bed"],"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the bed {@link io.wolfscript.api.world.blocks.Block} the {@link io.wolfscript.api.entity.living.humanoid.Player} is entering","bed block player is entering"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Create a new BedEnter"}]},"io.wolfscript.event.player.BedExit":{"namespace":"io.wolfscript.event.player","title":"Bed exit hook, called when a player leaves a bed","description":"Bed exit hook, called when a player leaves a bed","doc":{"author":["Ehud (EhudB)"]},"name":"BedExit","qualifiedname":"io.wolfscript.event.player.BedExit","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.Hook"],"properties":[{"name":"Bed","modifier":"readonly","args":[],"description":"Get: Create a new BedExit","doc":{"param":["player the player that left the bed","bed the bed the player left /\n    public BedExit(Player player, Block bed) {\n        this.player = player;\n        this.bed = bed;\n    }\n\n    /** Gets the {@link Player} leaving the bed"],"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the bed {@link io.wolfscript.api.world.blocks.Block} the {@link io.wolfscript.api.entity.living.humanoid.Player} is leaving","bed block player is leaving"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Create a new BedExit"}]},"io.wolfscript.event.player.BlockDestroy":{"namespace":"io.wolfscript.event.player","title":"Called when a player destroy a block","description":"Called when a player destroy a block","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockDestroy","qualifiedname":"io.wolfscript.event.player.BlockDestroy","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BlockDestroy constructor","description":"BlockDestroy constructor","scope":"public","name":"BlockDestroy","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Block","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the {@link io.wolfscript.api.world.blocks.Block} the {@link io.wolfscript.api.entity.living.humanoid.Player} is left clicking","block if player is clicking a block, null otherwise"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking"}]},"io.wolfscript.event.player.BlockLeftClick":{"namespace":"io.wolfscript.event.player","title":"Left click hook. Contains information about a Player left clicking.","description":"Left click hook. Contains information about a Player left clicking.","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockLeftClick","qualifiedname":"io.wolfscript.event.player.BlockLeftClick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BlockLeftClick constructor","description":"BlockLeftClick constructor","scope":"public","name":"BlockLeftClick","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Block","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the {@link io.wolfscript.api.world.blocks.Block} the {@link io.wolfscript.api.entity.living.humanoid.Player} is left clicking","block if player is clicking a block, null otherwise"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking"}]},"io.wolfscript.event.player.BlockPlace":{"namespace":"io.wolfscript.event.player","title":"Is called when a player right-clicks a block, eg. uses it.","description":"Is called when a player right-clicks a block, eg. uses it.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"BlockPlace","qualifiedname":"io.wolfscript.event.player.BlockPlace","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"BlockPlaced","modifier":"readonly","args":[],"description":"Get: Constructs a new BlockPlace","doc":{"param":["player the {@link Player} placing a {@link Block}","clicked the {@link Block} being clicked","placed the {@link Block} to be placed /\n    public BlockPlace(Player player, Block clicked, Block placed) {\n        this.player = player;\n        this.clicked = clicked;\n        this.placed = placed;\n    }\n\n    /** Get the player who is placing a {@link Block}"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} placing /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the {@link io.wolfscript.api.world.blocks.Block} that was clicked","the {@link io.wolfscript.api.world.blocks.Block} that was clicked /\n    public Block getBlockClicked() {\n        return clicked;\n    }\n\n    /** Gets the block that will be placed","the {@link io.wolfscript.api.world.blocks.Block} to be placed"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Constructs a new BlockPlace"}]},"io.wolfscript.event.player.BlockRightClick":{"namespace":"io.wolfscript.event.player","title":"Is called when a player right-clicks a block, eg. uses it.","description":"Is called when a player right-clicks a block, eg. uses it.","doc":{"author":["Chris (damagefilter)","Jason (darkdoplomat)"]},"name":"BlockRightClick","qualifiedname":"io.wolfscript.event.player.BlockRightClick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"BlockClicked","modifier":"readonly","args":[],"description":"Get: Construct a new BlockRightClick","doc":{"param":["player the Player doing the clicking","clicked the block being clicked /\n    public BlockRightClick(Player player, Block clicked) {\n        this.clicked = clicked;\n        this.player = player;\n    }\n\n    /** Get the {@link Player} who clicked the {@link Block}"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the {@link io.wolfscript.api.world.blocks.Block} that was clicked.","the {@link io.wolfscript.api.world.blocks.Block} that was clicked"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Construct a new BlockRightClick"}]},"io.wolfscript.event.player.BookEdit":{"namespace":"io.wolfscript.event.player","title":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} edits a Book {@link io.wolfscript.api.inventory.Item}","description":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} edits a Book {@link io.wolfscript.api.inventory.Item}","doc":{"author":["Jason (darkdiplomat)"]},"name":"BookEdit","qualifiedname":"io.wolfscript.event.player.BookEdit","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BookEdit constructor","description":"BookEdit constructor","scope":"public","name":"BookEdit","args":[{"name":"book","type":"io.wolfscript.api.inventory.Item","description":"book argument"},{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"}]}],"methods":[{"title":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} editting the Book","description":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} editting the Book","doc":{"return":["the player doing the editting /\n    public final Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the Book {@link io.wolfscript.api.inventory.Item} being editted","the book being editted /\n    public final Item getBook() {\n        return book;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.ItemType","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.player.Chat":{"namespace":"io.wolfscript.event.player","title":"Chat hook. Contains player, prefix, message and receivers information","description":"Chat hook. Contains player, prefix, message and receivers information","doc":{"author":["Chris (damagefilter)"]},"name":"Chat","qualifiedname":"io.wolfscript.event.player.Chat","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Chat constructor","description":"Chat constructor","scope":"public","name":"Chat","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"format","type":"String","description":"format argument"}]}],"methods":[{"title":"Get the {@link io.wolfscript.api.entity.living.humanoid.Player} instance","description":"Get the {@link io.wolfscript.api.entity.living.humanoid.Player} instance","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the message prefix. The prefix contains the following data:<br> This is the prefix as defined in Player or Group.","the prefix string /\n    public String getPrefix() {\n        return placeholders.get(\"%prefix\");\n    }\n\n    /** Get the message this player has sent","the message /\n    public String getMessage() {\n        return placeholders.get(\"%message\");\n    }\n\n    /** Change the message completely","display name /\n    public String getPlayerDisplayName() {\n        return placeholders.get(\"%name\");\n    }\n\n    /** Append the given String to the existing message","the list of {@link io.wolfscript.api.entity.living.humanoid.Player} receivers /\n    public List<Player> getReceiverList() {\n        return receivers;\n    }\n\n    /** Override the list of receivers","the format /\n    public String getFormat() {\n        return format;\n    }\n\n    /** Override the default chatting format.","placeholder map /\n    public Map<String, String> getPlaceholderMapping() {\n        return placeholders;\n    }\n\n    /** Create the message that will be sent from the placeholder list and the format.","message"],"param":["message the message to set /\n    public void setMessage(String message) {\n        placeholders.put(\"%message\", message);\n    }\n\n    /** Set the name that is used for this player","name the display name to set /\n    public void setPlayerDisplayName(String name) {\n        placeholders.put(\"%name\", name);\n    }\n\n    /** Get the currently used name for this player","toAppend the message string to append /\n    public void appendToMessage(String toAppend) {\n        placeholders.put(\"%message\", getMessage().concat(toAppend));\n    }\n\n    /** Override the players chat prefix","newPrefix the prefix to be set /\n    public void setPrefix(String newPrefix) {\n        placeholders.put(\"%prefix\", newPrefix);\n    }\n\n    /** Get a list of all receivers for this message","receiverList the list of {@link Player} receivers /\n    public void setReceiverList(ArrayList<Player> receiverList) {\n        receivers = receiverList;\n    }\n\n    /** Remove a {@link Player} from the receiver list","player the {@link Player} to remove /\n    public void removeFromReceiverList(Player player) {\n        receivers.remove(player);\n    }\n\n    /** Add a {@link Player} to the receiver list. This better not be null!","player the {@link Player} to add /\n    public void addToReceiverList(Player player) {\n        receivers.add(player);\n    }\n\n    /** Get the chat format. This is a string like this:<br> &lt;%prefix %name&gt; %message You can modify this to your liking. Replacement values can be found in the placeholder map.<br> This is a formatting template, do not replace the placeholders with real values. This will happen automatically.","format the format to set","placeholder the palceholder, such as %name or %extraData - something to your liking","value The value to substitute the placeholder with when the chat message is dispatched /\n    public void setPlaceholder(String placeholder, String value) {\n        placeholders.put(placeholder, value);\n    }\n\n    /** Remove a specified placeholder value.","placeholder the placeholder to remove /\n    public void removePlaceholder(String placeholder) {\n        placeholders.remove(placeholder);\n    }\n\n    /** Returns the map containing the placeholder => value mappings"],"see":["Chat#getFormat() /\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    /** Set or override a placeholder and a value"]},"scope":"public","return":"String","name":"buildSendMessage","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.hook.CancelableHook","java.util.ArrayList","java.util.List","java.util.Map"],"properties":[]},"io.wolfscript.event.player.Connection":{"namespace":"io.wolfscript.event.player","title":"Connection hook. Contains information about a player connecting.","description":"Connection hook. Contains information about a player connecting.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Connection","qualifiedname":"io.wolfscript.event.player.Connection","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"Connection constructor","description":"Connection constructor","scope":"public","name":"Connection","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"message","type":"String","description":"message argument"},{"name":"firstTime","type":"boolean","description":"firstTime argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"Hidden","modifier":"writeonly","args":[{"name":"hidden","type":"boolean","description":"{@code true} to hide message; {@code false} for not"}],"description":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the message sent to all","the message sent to all /\n    public String getMessage() {\n        return message;\n    }\n\n    /** Sets the message set to all","{@code true} for hidden; {@code false} for not /\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /** Returns true if this player has never connected before.","{@code true} if first connection; {@code false} if not /\n    public boolean isFirstConnection() {\n        return firstTime;\n    }\n\n    /** Sets whether this should be a hidden connect/disconnect"]},"return":"void","scope":"public","title":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.Craft":{"namespace":"io.wolfscript.event.player","title":"Craft Hook","description":"Craft Hook <p/> Called when a matching crafting recipe if found for a {@link io.wolfscript.api.entity.living.humanoid.Player} crafting","doc":{"author":["Jason (darkdiplomat)"]},"name":"Craft","qualifiedname":"io.wolfscript.event.player.Craft","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.CraftingMatrix","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.recipes.Recipe","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"MatchingRecipe","modifier":"readonly","args":[],"description":"Get: Creates a new Craft.","doc":{"param":["player The crafting player.","craftingMatrix The crafting inventory used.","recipeResult The recipe's result. /\n    public Craft(Player player, CraftingMatrix craftingMatrix, Item recipeResult) {\n        this.player = player;\n        this.craftingMatrix = craftingMatrix;\n        this.recipeResult = recipeResult;\n        for (Recipe recipe : Wolf.getServer().getServerRecipes()) {\n            if (recipe.matchesMatrix(craftingMatrix)) {\n                match = recipe;\n                break;\n            }\n        }\n    }\n\n    /** Gets the crafting player.","recipeResult The recipe's result. /\n    public void setRecipeResult(Item recipeResult) {\n        this.recipeResult = recipeResult;\n    }\n\n    /** Gets the recipe that matches the matrix"],"return":["The crafting player. /\n    public Player getPlayer() {\n        return this.player;\n    }\n\n    /** Returns the crafting inventory the player is working on.","The crafting inventory the player is working on. /\n    public CraftingMatrix getCraftingMatrix() {\n        return this.craftingMatrix;\n    }\n\n    /** Returns the recipe's result item.","The recipe's result item. /\n    public Item getRecipeResult() {\n        return this.recipeResult;\n    }\n\n    /** Sets the recipe's result.","the matching {@link io.wolfscript.api.inventory.recipes.Recipe}"]},"return":"io.wolfscript.api.inventory.recipes.Recipe","scope":"public","title":"Get: Creates a new Craft."}]},"io.wolfscript.event.player.Disconnection":{"namespace":"io.wolfscript.event.player","title":"Disconnection hook. Contains information about a {@link io.wolfscript.api.entity.living.humanoid.Player} disconnecting.","description":"Disconnection hook. Contains information about a {@link io.wolfscript.api.entity.living.humanoid.Player} disconnecting.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Disconnection","qualifiedname":"io.wolfscript.event.player.Disconnection","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"Disconnection constructor","description":"Disconnection constructor","scope":"public","name":"Disconnection","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"reason","type":"String","description":"reason argument"},{"name":"leave","type":"String","description":"leave argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"Hidden","modifier":"writeonly","args":[{"name":"hidden","type":"boolean","description":"{@code true} for hiding message; {@code false} for not"}],"description":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} disconnected","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Get the reason for disconnect (if applicable)","reason if disconnecting, null otherwise /\n    public String getReason() {\n        return reason;\n    }\n\n    /** Set the reason for disconnection that will be displayed","leaveMessage /\n    public String getLeaveMessage() {\n        return this.leave;\n    }\n\n    /** Sets the LeaveMessage","{@code true} for hidden; {@code false} for not /\n    public boolean isHidden() {\n        return hidden;\n    }\n\n    /** Sets whether this should be a hidden connect/disconnect"]},"return":"void","scope":"public","title":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} disconnected"}]},"io.wolfscript.event.player.Eat":{"namespace":"io.wolfscript.event.player","title":"Eat","description":"Eat <p/> Contains information about a {@link io.wolfscript.api.entity.living.humanoid.Player} having finished eating Food","doc":{"author":["Jason (darkdiplomat)"]},"name":"Eat","qualifiedname":"io.wolfscript.event.player.Eat","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new Eat","description":"Constructs a new Eat","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} that is being consumed","the {@link io.wolfscript.api.inventory.Item} /\n    public Item getItem() {\n        return item;\n    }\n\n    /** Gets the amount of Food Level the {@link io.wolfscript.api.entity.living.humanoid.Player} will gain from consuming","food level gain /\n    public int getLevelGain() {\n        return levelGain;\n    }\n\n    /** Sets the Food Level the {@link io.wolfscript.api.entity.living.humanoid.Player} will gain from consuming","food saturation gain /\n    public float getSaturationGain() {\n        return saturationGain;\n    }\n\n    /** Sets the Food Saturation the {@link io.wolfscript.api.entity.living.humanoid.Player} will gain from consuming","PotionEffects /\n    public PotionEffect[] getPotionEffects() {\n        return effects;\n    }\n\n    /** Sets the {@link io.wolfscript.api.potion.PotionEffect}s to applied on consumption."]},"scope":"public","return":"void","name":"setPotionEffects","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.api.potion.PotionEffect","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.player.Enchant":{"namespace":"io.wolfscript.event.player","title":"Enchant hook. Contains information about a player enchanting an item.","description":"Enchant hook. Contains information about a player enchanting an item.","doc":{"author":["Jason (darkdiplomat)","Chris (damagefilter)"]},"name":"Enchant","qualifiedname":"io.wolfscript.event.player.Enchant","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Enchant constructor","description":"Enchant constructor","scope":"public","name":"Enchant","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"item","type":"io.wolfscript.api.inventory.Item","description":"item argument"},{"name":"enchtab","type":"io.wolfscript.api.world.blocks.EnchantmentTable","description":"enchtab argument"}]}],"methods":[{"title":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} enchanting an {@link io.wolfscript.api.inventory.Item}","description":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} enchanting an {@link io.wolfscript.api.inventory.Item}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} enchanting /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item}","the {@link io.wolfscript.api.inventory.Item} being enchanted /\n    public Item getItem() {\n        return item;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.EnchantmentTable} in use","the in use {@link io.wolfscript.api.world.blocks.EnchantmentTable} /\n    public EnchantmentTable getEnchantmentTable() {\n        return enchtab;\n    }\n\n    /** Gets the new {@link io.wolfscript.api.inventory.Enchantment} as list","enchantment list /\n    public List<Enchantment> getEnchantmentList() {\n        return enchantments;\n    }\n\n    /** Override the whole list of enchantments","{@code true} if valid; {@code false} if not"]},"scope":"public","return":"boolean","name":"isValid","args":[{"name":"checkStackable","type":"boolean","description":"{@code true} to check if can stack; {@code false} for not"}]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Enchantment","io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.EnchantmentTable","io.wolfscript.hook.CancelableHook","java.util.List"],"properties":[]},"io.wolfscript.event.player.EntityRightClick":{"namespace":"io.wolfscript.event.player","title":"Is called when a player right-clicks an entity, for instance a villager for trading or a vehicle for entering","description":"Is called when a player right-clicks an entity, for instance a villager for trading or a vehicle for entering","doc":{"author":["Chris (damagefilter)"]},"name":"EntityRightClick","qualifiedname":"io.wolfscript.event.player.EntityRightClick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Get: Construct a new EntityRightClick","doc":{"param":["clicked the {@link Entity} clicked","player the {@link Player} clicking /\n    public EntityRightClick(Entity clicked, Player player) {\n        this.clickedEntity = clicked;\n        this.player = player;\n    }\n\n    /** Get the player who clicked"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Returns the entity that was clicked","the {@link io.wolfscript.api.entity.Entity}"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Construct a new EntityRightClick"}]},"io.wolfscript.event.player.Experience":{"namespace":"io.wolfscript.event.player","title":"Experience hook. Contains information about player experience changes.","description":"Experience hook. Contains information about player experience changes.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Experience","qualifiedname":"io.wolfscript.event.player.Experience","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Experience constructor","description":"Experience constructor","scope":"public","name":"Experience","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"oldval","type":"int","description":"oldval argument"},{"name":"newval","type":"int","description":"newval argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewValue","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old experience value","oldval /\n    public int getOldValue() {\n        return oldval;\n    }\n\n    /** Gets the new experience value","newval"]},"return":"int","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.FoodExhaustion":{"namespace":"io.wolfscript.event.player","title":"Food exhaustion change hook. Contains information about a player's food exhaustion changes","description":"Food exhaustion change hook. Contains information about a player's food exhaustion changes","doc":{"author":["Jason (darkdiplomat)"]},"name":"FoodExhaustion","qualifiedname":"io.wolfscript.event.player.FoodExhaustion","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"NewValue","modifier":"writeonly","args":[{"name":"value","type":"float","description":"the Exhaustion level to set"}],"description":"Set: Constructs a new FoodExhaustion","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old (current) exhaustion level","the old exhaustion level /\n    public float getOldValue() {\n        return oldval;\n    }\n\n    /** Gets the new exhaustion level","the new exhaustion level /\n    public float getNewValue() {\n        return newval;\n    }\n\n    /** Sets the new value to actually be set"]},"return":"void","scope":"public","title":"Set: Constructs a new FoodExhaustion"}]},"io.wolfscript.event.player.FoodLevel":{"namespace":"io.wolfscript.event.player","title":"Food level hook. Contains information about a player's food level changes","description":"Food level hook. Contains information about a player's food level changes","doc":{"author":["Jason (darkdiplomat)"]},"name":"FoodLevel","qualifiedname":"io.wolfscript.event.player.FoodLevel","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"NewValue","modifier":"writeonly","args":[{"name":"value","type":"int","description":"the level to set"}],"description":"Set: Constructs a new FoodLevel","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old (current) level","the old level /\n    public int getOldValue() {\n        return oldval;\n    }\n\n    /** Gets the new level","the new level /\n    public int getNewValue() {\n        return newval;\n    }\n\n    /** Sets the new value to actually be set"]},"return":"void","scope":"public","title":"Set: Constructs a new FoodLevel"}]},"io.wolfscript.event.player.FoodSaturation":{"namespace":"io.wolfscript.event.player","title":"Food saturation change hook. Contains information about a player's food saturation changes","description":"Food saturation change hook. Contains information about a player's food saturation changes","doc":{"author":["Jason (darkdiplomat)"]},"name":"FoodSaturation","qualifiedname":"io.wolfscript.event.player.FoodSaturation","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"NewValue","modifier":"writeonly","args":[{"name":"value","type":"float","description":"the level to set"}],"description":"Set: Constructs a new FoodSaturation","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old (current) level","the old level /\n    public float getOldValue() {\n        return oldval;\n    }\n\n    /** Gets the new level","the new level /\n    public float getNewValue() {\n        return newval;\n    }\n\n    /** Sets the new value to actually be set"]},"return":"void","scope":"public","title":"Set: Constructs a new FoodSaturation"}]},"io.wolfscript.event.player.GameModeChange":{"namespace":"io.wolfscript.event.player","title":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} changes GameModes","description":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} changes GameModes","doc":{"author":["Jason (darkdiplomat)"]},"name":"GameModeChange","qualifiedname":"io.wolfscript.event.player.GameModeChange","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"GameModeChange constructor","description":"GameModeChange constructor","scope":"public","name":"GameModeChange","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"newMode","type":"io.wolfscript.api.GameMode","description":"newMode argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.GameMode","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewMode","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} changing modes","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old (current) {@link io.wolfscript.api.GameMode}","old {@link io.wolfscript.api.GameMode} /\n    public GameMode getOldMode() {\n        return player.getMode();\n    }\n\n    /** Gets the new (changing to) {@link io.wolfscript.api.GameMode}","new {@link io.wolfscript.api.GameMode}"]},"return":"io.wolfscript.api.GameMode","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} changing modes"}]},"io.wolfscript.event.player.HealthChange":{"namespace":"io.wolfscript.event.player","title":"Health Change hook","description":"Health Change hook","doc":{"author":["Jason (darkdiplomat)"]},"name":"HealthChange","qualifiedname":"io.wolfscript.event.player.HealthChange","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewValue","modifier":"readonly","args":[],"description":"Get: Constructs a new HealthChange hook","doc":{"param":["player the {@link Player} who's health is changing","oldVal the old health value","newVal the new health value /\n    public HealthChange(Player player, float oldVal, float newVal) {\n        this.player = player;\n        this.oldVal = oldVal;\n        this.newVal = newVal;\n    }\n\n    /** Gets the {@link Player} who's health is changing"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old Health value","old value /\n    public float getOldValue() {\n        return oldVal;\n    }\n\n    /** Gets the new Health value","new value"]},"return":"float","scope":"public","title":"Get: Constructs a new HealthChange hook"}]},"io.wolfscript.event.player.HeldItemChange":{"namespace":"io.wolfscript.event.player","title":"Held item change hook. Contains information about a player's held slot changes","description":"Held item change hook. Contains information about a player's held slot changes","doc":{"author":["ar56te876mis <ar56te876mis@yahoo.de>"]},"name":"HeldItemChange","qualifiedname":"io.wolfscript.event.player.HeldItemChange","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"NewValue","modifier":"writeonly","args":[{"name":"value","type":"int","description":"the held slot to set"}],"description":"Set: Constructs a new HeldItemChange","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the old (current) held slot","the old held slot /\n    public int getOldValue() {\n        return oldval;\n    }\n\n    /** Gets the new held slot","the new held slot /\n    public int getNewValue() {\n        return newval;\n    }\n\n    /** Sets the new value to actually be set"]},"return":"void","scope":"public","title":"Set: Constructs a new HeldItemChange"}]},"io.wolfscript.event.player.Inventory":{"namespace":"io.wolfscript.event.player","title":"Inventory hook. Contains information about a player either opening or closing an inventory","description":"Inventory hook. Contains information about a player either opening or closing an inventory","doc":{"author":["Jason (darkdiplomat)"]},"name":"Inventory","qualifiedname":"io.wolfscript.event.player.Inventory","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Inventory constructor","description":"Inventory constructor","scope":"public","name":"Inventory","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"inventory","type":"io.wolfscript.api.inventory.Inventory","description":"inventory argument"},{"name":"closing","type":"boolean","description":"closing argument"}]}],"methods":[{"title":"isClosing method","description":"isClosing method","scope":"public","return":"boolean","name":"isClosing","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Inventory","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Inventory","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Inventory}","the inventory"]},"return":"io.wolfscript.api.inventory.Inventory","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.ItemDrop":{"namespace":"io.wolfscript.event.player","title":"Item Hook. Contains EntityItem and Player","description":"Item Hook. Contains EntityItem and Player","doc":{"author":["Chris (damagefilter)"]},"name":"ItemDrop","qualifiedname":"io.wolfscript.event.player.ItemDrop","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ItemDrop constructor","description":"ItemDrop constructor","scope":"public","name":"ItemDrop","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"item","type":"io.wolfscript.api.entity.EntityItem","description":"item argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Item","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.EntityItem}","the {@link io.wolfscript.api.entity.EntityItem}"]},"return":"io.wolfscript.api.entity.EntityItem","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.ItemFrameRotate":{"namespace":"io.wolfscript.event.player","title":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} rotates an {@link io.wolfscript.api.inventory.Item} in an {@link io.wolfscript.api.entity.hanging.ItemFrame}","description":"Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} rotates an {@link io.wolfscript.api.inventory.Item} in an {@link io.wolfscript.api.entity.hanging.ItemFrame}","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ItemFrameRotate","qualifiedname":"io.wolfscript.event.player.ItemFrameRotate","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ItemFrameRotate constructor","description":"ItemFrameRotate constructor","scope":"public","name":"ItemFrameRotate","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"itemFrame","type":"io.wolfscript.api.entity.hanging.ItemFrame","description":"itemFrame argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.MathHelp","io.wolfscript.api.entity.hanging.ItemFrame","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewRotation","modifier":"writeonly","args":[{"name":"rotation","type":"int","description":"new rotation value (0-3)"}],"description":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} interacting with the {@link io.wolfscript.api.entity.hanging.ItemFrame}","doc":{"return":["the player /\n    public final Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.hanging.ItemFrame} being interacted with","the item frame /\n    public final ItemFrame getItemFrame() {\n        return itemFrame;\n    }\n\n    /** Gets the current rotation of the {@link io.wolfscript.api.inventory.Item} in the {@link io.wolfscript.api.entity.hanging.ItemFrame}<br/> This is the same as calling {@link io.wolfscript.api.entity.hanging.ItemFrame#getItemRotation}","item rotation /\n    public int getCurrentRotation() {\n        return itemFrame.getItemRotation();\n    }\n\n    /** Gets the new rotation that the {@link io.wolfscript.api.inventory.Item} in the {@link io.wolfscript.api.entity.hanging.ItemFrame} will be at.","new rotation /\n    public int getNewRotation() {\n        return newRotation;\n    }\n\n    /** Sets the new rotation."]},"return":"void","scope":"public","title":"Set: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} interacting with the {@link io.wolfscript.api.entity.hanging.ItemFrame}"}]},"io.wolfscript.event.player.ItemFrameSetItem":{"namespace":"io.wolfscript.event.player","title":"Called when an {@link io.wolfscript.api.entity.living.humanoid.Player} sets and {@link io.wolfscript.api.inventory.Item} in a {@link io.wolfscript.api.entity.hanging.ItemFrame}","description":"Called when an {@link io.wolfscript.api.entity.living.humanoid.Player} sets and {@link io.wolfscript.api.inventory.Item} in a {@link io.wolfscript.api.entity.hanging.ItemFrame}","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ItemFrameSetItem","qualifiedname":"io.wolfscript.event.player.ItemFrameSetItem","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ItemFrameSetItem constructor","description":"ItemFrameSetItem constructor","scope":"public","name":"ItemFrameSetItem","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"itemFrame","type":"io.wolfscript.api.entity.hanging.ItemFrame","description":"itemFrame argument"},{"name":"item","type":"io.wolfscript.api.inventory.Item","description":"item argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.hanging.ItemFrame","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Item","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} interacting with the {@link io.wolfscript.api.entity.hanging.ItemFrame}","doc":{"return":["the player /\n    public final Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.hanging.ItemFrame} being interacted with","the item frame /\n    public ItemFrame getItemFrame() {\n        return itemFrame;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} being placed into the {@link io.wolfscript.api.entity.hanging.ItemFrame}","the item or {@code null} if the item is being removed from the frame"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} interacting with the {@link io.wolfscript.api.entity.hanging.ItemFrame}"}]},"io.wolfscript.event.player.ItemPickup":{"namespace":"io.wolfscript.event.player","title":"Item Hook. Contains EntityItem and Player","description":"Item Hook. Contains EntityItem and Player","doc":{"author":["Chris (damagefilter)"]},"name":"ItemPickup","qualifiedname":"io.wolfscript.event.player.ItemPickup","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ItemPickup constructor","description":"ItemPickup constructor","scope":"public","name":"ItemPickup","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"item","type":"io.wolfscript.api.entity.EntityItem","description":"item argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.EntityItem","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Item","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.EntityItem}","the {@link io.wolfscript.api.entity.EntityItem}"]},"return":"io.wolfscript.api.entity.EntityItem","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.ItemUse":{"namespace":"io.wolfscript.event.player","title":"Item use hook. Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} uses an {@link io.wolfscript.api.inventory.Item}","description":"Item use hook. Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} uses an {@link io.wolfscript.api.inventory.Item}","doc":{"author":["Jason (darkdiplomat)"]},"name":"ItemUse","qualifiedname":"io.wolfscript.event.player.ItemUse","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ItemUse constructor","description":"ItemUse constructor","scope":"public","name":"ItemUse","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"item","type":"io.wolfscript.api.inventory.Item","description":"item argument"},{"name":"clicked","type":"io.wolfscript.api.world.blocks.Block","description":"clicked argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"BlockClicked","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} doing the clicking /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item}","the {@link io.wolfscript.api.inventory.Item} /\n    public Item getItem() {\n        return item;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block} being clicked on, or Air if no block is being clicked","the {@link io.wolfscript.api.world.blocks.Block} being clicked"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.Kick":{"namespace":"io.wolfscript.event.player","title":"Kick hook. Contains the player who was kicked and the MessageReceiver who kicked them","description":"Kick hook. Contains the player who was kicked and the MessageReceiver who kicked them","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Kick","qualifiedname":"io.wolfscript.event.player.Kick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"Kick constructor","description":"Kick constructor","scope":"public","name":"Kick","args":[{"name":"kickedPlayer","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"kickedPlayer argument"},{"name":"moderator","type":"io.wolfscript.chat.MessageReceiver","description":"moderator argument"},{"name":"reason","type":"String","description":"reason argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.MessageReceiver","io.wolfscript.hook.Hook"],"properties":[{"name":"Reason","modifier":"readonly","args":[],"description":"Get: Get the {@link io.wolfscript.api.entity.living.humanoid.Player} being kicked","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} kicked /\n    public Player getKickedPlayer() {\n        return kicked;\n    }\n\n    /** Get the {@link io.wolfscript.chat.MessageReceiver} that has issued the kick","the {@link io.wolfscript.chat.MessageReceiver} that issued the kick /\n    public MessageReceiver getModerator() {\n        return moderator;\n    }\n\n    /** Gets the reason for the kick","the kick reason"]},"return":"String","scope":"public","title":"Get: Get the {@link io.wolfscript.api.entity.living.humanoid.Player} being kicked"}]},"io.wolfscript.event.player.LevelUp":{"namespace":"io.wolfscript.event.player","title":"LevelUp hook. Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} levels up","description":"LevelUp hook. Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} levels up","doc":{"author":["Chris (damagefilter)"]},"name":"LevelUp","qualifiedname":"io.wolfscript.event.player.LevelUp","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"LevelUp constructor","description":"LevelUp constructor","scope":"public","name":"LevelUp","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"Player","modifier":"readonly","args":[],"description":"Get: Get the {@link io.wolfscript.api.entity.living.humanoid.Player} instance","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} leveling up"]},"return":"io.wolfscript.api.entity.living.humanoid.Player","scope":"public","title":"Get: Get the {@link io.wolfscript.api.entity.living.humanoid.Player} instance"}]},"io.wolfscript.event.player.PlayerArmSwing":{"namespace":"io.wolfscript.event.player","title":"Player Left Click Hook","description":"Player Left Click Hook<br> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} swings their arm with a Left Click","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerArmSwing","qualifiedname":"io.wolfscript.event.player.PlayerArmSwing","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PlayerArmSwing constructor","description":"PlayerArmSwing constructor","scope":"public","name":"PlayerArmSwing","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"Player","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player}"]},"return":"io.wolfscript.api.entity.living.humanoid.Player","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking"}]},"io.wolfscript.event.player.PlayerDeath":{"namespace":"io.wolfscript.event.player","title":"Player Death hook","description":"Player Death hook","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerDeath","qualifiedname":"io.wolfscript.event.player.PlayerDeath","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.DamageSource","io.wolfscript.api.chat.ChatComponent","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[{"name":"DamageSource","modifier":"readonly","args":[],"description":"Get: Constructs a new PlayerDeath","doc":{"param":["player the {@link Player} that died","source the {@link DamageSource} that killed the {@link Player}","msg the Death message to send all if DeathMessages aren't disabled /\n    public PlayerDeath(Player player, DamageSource source, ChatComponent msg) {\n        this.player = player;\n        this.msg = msg;\n        this.source = source;\n    }\n\n    /** Gets the {@link Player} who died","msg the death message","chatComponent the {@link io.wolfscript.api.chat.ChatComponent} containing the death message /\n    public void setDeathMessage1(ChatComponent chatComponent) {\n        this.msg = chatComponent;\n    }\n\n    /** Gets the {@link DamageSource} that killed the {@link Player}"],"return":["the dead {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the message to send on Death","the death message","the ChatComponent containing the death message /\n    public ChatComponent getDeathMessage1() {\n        return msg;\n    }\n\n    /** Sets the message to send, if death message are enabled","the death dealing {@link io.wolfscript.api.DamageSource}"],"deprecated":["Replaced by #getDeathMessage1 /\n    @Deprecated\n    public String getDeathMessage() {\n        return msg.getFullText();\n    }\n\n    /** Gets the {@link io.wolfscript.api.chat.ChatComponent} containing the death message","Replaced by #setDeathMessage1 /\n    @Deprecated\n    public void setDeathMessage(String msg) {\n        this.msg = Wolf.factory().getChatComponentFactory().newChatComponent(msg);\n    }\n\n    /** Gets the {@link io.wolfscript.api.chat.ChatComponent} containing the death message"]},"return":"io.wolfscript.api.DamageSource","scope":"public","title":"Get: Constructs a new PlayerDeath"}]},"io.wolfscript.event.player.PlayerIdle":{"namespace":"io.wolfscript.event.player","title":"Player Idle Hook<p/>","description":"Player Idle Hook<p/> Called when a Player is idle for too long and just before them being kicked for idling.<br/> Canceling this hook will stop the kicking process.<br/> NOTE: This hook only fires if PlayerIdle time is set above 0 in the sever.cfg and for {@link io.wolfscript.api.entity.living.humanoid.Player}(s) who aren't set to ignoresRestrictions","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PlayerIdle","qualifiedname":"io.wolfscript.event.player.PlayerIdle","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new PlayerIdle","description":"Constructs a new PlayerIdle","doc":{"param":["player the {@link io.wolfscript.api.entity.living.humanoid.Player} who is idle","millisIdle the number of milliseconds the player has been idle /\n    public PlayerIdle(Player player, long millisIdle) {\n        this.player = player;\n        this.millisIdle = millisIdle;\n    }\n\n    /** Gets the idle {@link io.wolfscript.api.entity.living.humanoid.Player}"],"return":["idle {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return this.player;\n    }\n\n    /** Gets the number of milliseconds the player has been idle","idle time in milliseconds /\n    public long getTimeIdle() {\n        return millisIdle;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.player.PlayerList":{"namespace":"io.wolfscript.event.player","title":"PlayerList","description":"PlayerList <p/> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} information is sent to another {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerList","qualifiedname":"io.wolfscript.event.player.PlayerList","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new PlayerListEntryHook","description":"Constructs a new PlayerListEntryHook","doc":{"param":["entry the {@link io.wolfscript.api.PlayerListData} being sent","receiver the {@link io.wolfscript.api.entity.living.humanoid.Player} to receiver the {@link io.wolfscript.api.PlayerListData} /\n    public PlayerList(PlayerListData data, Player receiver) {\n        this.data = data;\n        this.receiver = receiver;\n    }\n\n    /** Gets the {@link io.wolfscript.api.PlayerListData} being sent"],"return":["{@link io.wolfscript.api.PlayerListData} being sent /\n    public final PlayerListData getData() {\n        return data;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} to receive the PlayerListEntry","the {@link io.wolfscript.api.entity.living.humanoid.Player} receiver /\n    public final Player getReceiver() {\n        return receiver;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.PlayerListData","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.player.PlayerMove":{"namespace":"io.wolfscript.event.player","title":"Player move hook. Contains information about a player's movement","description":"Player move hook. Contains information about a player's movement","doc":{"author":["Jason (darkdiplomat)"]},"name":"PlayerMove","qualifiedname":"io.wolfscript.event.player.PlayerMove","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"PlayerMove constructor","description":"PlayerMove constructor","scope":"public","name":"PlayerMove","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"from","type":"io.wolfscript.api.world.position.Location","description":"from argument"},{"name":"to","type":"io.wolfscript.api.world.position.Location","description":"to argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"To","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the from {@link io.wolfscript.api.world.position.Location}","from /\n    public Location getFrom() {\n        return from;\n    }\n\n    /** Gets the to {@link io.wolfscript.api.world.position.Location} (same as player's location)","to"]},"return":"io.wolfscript.api.world.position.Location","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.PlayerRespawned":{"namespace":"io.wolfscript.event.player","title":"Player respawned hook. Contains the reference to the freshly spawned player entity","description":"Player respawned hook. Contains the reference to the freshly spawned player entity and the location it spawned in. The location can not be overridden at this point. If you need the player to go somewhere else, use {@link Player#teleportTo(Location)} etc","doc":{"author":["Jason (darkdiplomat)","Chris (damagefilter)"]},"name":"PlayerRespawned","qualifiedname":"io.wolfscript.event.player.PlayerRespawned","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PlayerRespawned constructor","description":"PlayerRespawned constructor","scope":"public","name":"PlayerRespawned","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"location","type":"io.wolfscript.api.world.position.Location","description":"location argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.Hook"],"properties":[{"name":"Location","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.position.Location} where this player will finally spawn","spawn location"]},"return":"io.wolfscript.api.world.position.Location","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.PlayerRespawning":{"namespace":"io.wolfscript.event.player","title":"Player pre-respawn hook.","description":"Player pre-respawn hook. This hook is called before the new location and repsawn point for a player is determined. Use it to alter those information.","doc":{"author":["Jason (darkdiplomat)","Chris (damagefilter)"]},"name":"PlayerRespawning","qualifiedname":"io.wolfscript.event.player.PlayerRespawning","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PlayerRespawning constructor","description":"PlayerRespawning constructor","scope":"public","name":"PlayerRespawning","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"respawn","type":"io.wolfscript.api.world.position.Location","description":"respawn argument"},{"name":"bedSpawn","type":"boolean","description":"bedSpawn argument"}]}],"methods":[{"title":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","description":"Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["{@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the respawn {@link io.wolfscript.api.world.position.Location}","respawn location /\n    public Location getRespawnLocation() {\n        return respawn;\n    }\n\n    /** Sets the respawn {@link io.wolfscript.api.world.position.Location}","{@code true} if bed spawn"],"param":["respawn the respawn location /\n    public void setRespawnLocation(Location respawn) {\n        this.respawn = respawn;\n    }\n\n    /** Returns true if the player is supposed to respawn at his bed"]},"scope":"public","return":"boolean","name":"isBedSpawn","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.Hook"],"properties":[]},"io.wolfscript.event.player.PortalUse":{"namespace":"io.wolfscript.event.player","title":"PortalUse Hook","description":"PortalUse Hook","doc":{"author":["Jason (darkdiplomat)"]},"name":"PortalUse","qualifiedname":"io.wolfscript.event.player.PortalUse","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"To","modifier":"readonly","args":[],"description":"Get: Constructs a new PortalUse","doc":{"param":["player the {@link Player} using the Portal","to the {@link Location} the portal goes to /\n    public PortalUse(Player player, Location to) {\n        this.player = player;\n        this.to = to;\n    }\n\n    /** Gets the {@link Player} using a portal"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} using a portal /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.position.Location} the portal goes to","the {@link io.wolfscript.api.world.position.Location} the portal goes to"]},"return":"io.wolfscript.api.world.position.Location","scope":"public","title":"Get: Constructs a new PortalUse"}]},"io.wolfscript.event.player.PreConnection":{"namespace":"io.wolfscript.event.player","title":"Login checks hook. Comes with ip, name and a kickReason that is to be returned,","description":"Login checks hook. Comes with ip, name and a kickReason that is to be returned, and should be null if a player should not be kicked.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"PreConnection","qualifiedname":"io.wolfscript.event.player.PreConnection","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PreConnection constructor","description":"PreConnection constructor","scope":"public","name":"PreConnection","args":[{"name":"ip","type":"String","description":"ip argument"},{"name":"name","type":"String","description":"name argument"},{"name":"id","type":"java.util.UUID","description":"id argument"},{"name":"dimType","type":"io.wolfscript.api.world.DimensionType","description":"dimType argument"},{"name":"world","type":"String","description":"world argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.DimensionType","io.wolfscript.hook.Hook","java.util.UUID"],"properties":[{"name":"World","args":[{"name":"world","type":"String","description":"world argument"}],"description":"World property","return":"String","scope":"public","title":"World property"},{"name":"WorldType","args":[{"name":"dimensionType","type":"io.wolfscript.api.world.DimensionType","description":"dimensionType argument"}],"description":"WorldType property","return":"io.wolfscript.api.world.DimensionType","scope":"public","title":"WorldType property"},{"name":"KickReason","modifier":"writeonly","args":[{"name":"reason","type":"String","description":"reason argument"}],"description":"Set: Get the IP of the joining {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"retur":["n /\n    public String getIp() {\n        return ip;\n    }\n\n    /** Get the name of the joining {@link Player} /\n    public String getName() {\n        return name;\n    }\n\n    public UUID getUUID() {\n        return this.id;\n    }\n\n    /** Get the currently set kick reason","n /\n    public String getKickReason() {\n        return kickReason;\n    }\n\n    /** Set the kick reason. Make it null to not kick the {@link Player}"]},"return":"void","scope":"public","title":"Set: Get the IP of the joining {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.ReturnFromIdle":{"namespace":"io.wolfscript.event.player","title":"Called when the Player is no longer idle","description":"Called when the Player is no longer idle","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ReturnFromIdle","qualifiedname":"io.wolfscript.event.player.ReturnFromIdle","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ReturnFromIdle constructor","description":"ReturnFromIdle constructor","scope":"public","name":"ReturnFromIdle","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"idle","type":"long","description":"idle argument"}]}],"methods":[{"title":"Get the {@link io.wolfscript.api.entity.living.humanoid.Player} that was Idle","description":"Get the {@link io.wolfscript.api.entity.living.humanoid.Player} that was Idle","doc":{"return":["the idle player /\n    public Player getPlayer() {\n        return this.player;\n    }\n\n    /** Gets the amount of time the {@link io.wolfscript.api.entity.living.humanoid.Player} was idle","time idle /\n    public long getTimeIdle() {\n        return idle;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.hook.Hook"],"properties":[]},"io.wolfscript.event.player.SignChange":{"namespace":"io.wolfscript.event.player","title":"Sign Change hook. Contains information about a sign either being changed by a player","description":"Sign Change hook. Contains information about a sign either being changed by a player","doc":{"author":["Jason (darkdiplomat)"]},"name":"SignChange","qualifiedname":"io.wolfscript.event.player.SignChange","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"SignChange constructor","description":"SignChange constructor","scope":"public","name":"SignChange","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"sign","type":"io.wolfscript.api.world.blocks.Sign","description":"sign argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Sign","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Sign","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}","doc":{"return":["player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Sign}","sign"]},"return":"io.wolfscript.api.world.blocks.Sign","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player}"}]},"io.wolfscript.event.player.SignShow":{"namespace":"io.wolfscript.event.player","title":"Sign Change hook. Contains information about a sign shown to a player","description":"Sign Change hook. Contains information about a sign shown to a player","doc":{"author":["Jason (darkdiplomat)"]},"name":"SignShow","qualifiedname":"io.wolfscript.event.player.SignShow","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Sign","io.wolfscript.hook.Hook"],"properties":[{"name":"Sign","modifier":"readonly","args":[],"description":"Get: Constructs a new SignShow","doc":{"param":["player the {@link Player} being shown a {@link Sign}","sign the {@link Sign} being shown /\n    public SignShow(Player player, Sign sign) {\n        this.player = player;\n        this.sign = sign;\n    }\n\n    /** Gets the {@link Player} being shown a {@link Sign}"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Sign} being shown","the {@link io.wolfscript.api.world.blocks.Sign}"]},"return":"io.wolfscript.api.world.blocks.Sign","scope":"public","title":"Get: Constructs a new SignShow"}]},"io.wolfscript.event.player.SlotClick":{"namespace":"io.wolfscript.event.player","title":"Slot click hook","description":"Slot click hook <p/> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} clicks a slot or outside a inventory window","doc":{"author":["Jason (darkdiplomat)"]},"name":"SlotClick","qualifiedname":"io.wolfscript.event.player.SlotClick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new SlotClick","description":"Constructs a new SlotClick","doc":{"param":["player the {@link Player} clicking","inventory the {@link Inventory} thats open","item the {@link Item} in the slot clicked","slotType the {@link SlotType} being clicked","secondarySlotType the {@link SecondarySlotType} being clicked","grabMode the {@link GrabMode} of the link","button the {@link ButtonPress}","slotId the slot id","transNum the transaction number /\n    public SlotClick(Player player, Inventory inventory, Item item, SlotType slotType, SecondarySlotType secondarySlotType, GrabMode grabMode, ButtonPress button, short slotId, short transNum) {\n        this.player = player;\n        this.inventory = inventory;\n        this.item = item;\n        this.slotType = slotType;\n        this.secondarySlotType = secondarySlotType;\n        this.grabMode = grabMode;\n        this.button = button;\n        this.slotId = slotId;\n        this.transNum = transNum;\n    }\n\n    /** Gets the {@link Player} doing the clicking","update {@code true} to notify; {@code false} otherwise /\n    public void setDoUpdate(boolean update) {\n        this.update = update;\n    }\n\n    /** Gets the {@link Item} on the player's cursor"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} clicking /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Inventory} that is open and being clicked in","the open {@link io.wolfscript.api.inventory.Inventory} /\n    public Inventory getInventory() {\n        return inventory;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} in the slot clicked","the {@link io.wolfscript.api.inventory.Item} clicked; {@code null} if there isn't an item in the slot /\n    public Item getItem() {\n        return item;\n    }\n\n    /** Gets the type of Slot being clicked","the {@link io.wolfscript.api.inventory.slot.SlotType} clicked /\n    public SlotType getSlotType() {\n        return slotType;\n    }\n\n    /** Gets the secondary type of the Slot being clicked","the {@link io.wolfscript.api.inventory.slot.SecondarySlotType} clicked /\n    public SecondarySlotType getSecondarySlotType() {\n        return secondarySlotType;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.slot.GrabMode} used in the click","the {@link io.wolfscript.api.inventory.slot.GrabMode} /\n    public GrabMode getGrabMode() {\n        return grabMode;\n    }\n\n    /** Gets the button pressed","The {@link io.wolfscript.api.inventory.slot.ButtonPress} /\n    public ButtonPress getButtonPress() {\n        return button;\n    }\n\n    /** Gets the id of the slot clicked","the slot id /\n    public short getSlotId() {\n        return slotId;\n    }\n\n    /** Gets the transaction number (increments up by 1 while the window is open)","the transaction number /\n    public short getTransactionNumber() {\n        return transNum;\n    }\n\n    /** Gets whether to notify the client of a update if canceled","{@code true} if notify; {@code false} otherwise /\n    public boolean doUpdate() {\n        return update;\n    }\n\n    /** Sets whether to notify the client of an update","the {@link io.wolfscript.api.inventory.Item} on the cursor; {@code null} if there isn't an item on the cursor /\n    public Item getItemOnCursor() {\n        return this.player.getInventory().getItemOnCursor();\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Inventory","io.wolfscript.api.inventory.Item","io.wolfscript.api.inventory.slot.ButtonPress","io.wolfscript.api.inventory.slot.GrabMode","io.wolfscript.api.inventory.slot.SecondarySlotType","io.wolfscript.api.inventory.slot.SlotType","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.player.StatGained":{"namespace":"io.wolfscript.event.player","title":"StatGained","description":"StatGained<br> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} gains a Stat","doc":{"author":["Jason (darkdiplomat)"]},"name":"StatGained","qualifiedname":"io.wolfscript.event.player.StatGained","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.statistics.Stat","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Gain","modifier":"readonly","args":[],"description":"Get: Constructs a new StatGained","doc":{"param":["player the {@link Player} gaining a stat","stat the {@link Stat} being gained /\n    public StatGained(Player player, Stat stat, int gain) {\n        this.player = player;\n        this.stat = stat;\n    }\n\n    /** Gets the {@link Player} gaining a {@link Stat}"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.statistics.Stat} being gained","the {@link io.wolfscript.api.statistics.Stat} /\n    public Stat getStat() {\n        return stat;\n    }\n\n    /** Gets the amount of the stat gained","gain amount"]},"return":"int","scope":"public","title":"Get: Constructs a new StatGained"}]},"io.wolfscript.event.player.TeleportCause":{"namespace":"io.wolfscript.event.player","title":"Teleport hook. Contains player who is teleporting and their destination","description":"Teleport hook. Contains player who is teleporting and their destination","doc":{"author":["Brian (WWOL)","Jason (darkdiplomat) /\npublic final class Teleport extends CancelableHook {\n    private Player player;\n    private Location destination;\n    private TeleportCause cause;\n\n    public Teleport(Player player, Location destination, TeleportCause cause) {\n        this.player = player;\n        this.destination = destination;\n        this.cause = cause;\n    }\n\n    /** Get the {@link Player} instance.","Jason (darkdiplomat)"],"return":["the teleporting Player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link Player}'s current location","the current {@link Location} of the Player /\n    public Location getCurrentLocation() {\n        return player.getLocation();\n    }\n\n    /** Get the destination {@link Location} for the teleport.","the {@link Location} of the destination /\n    public Location getDestination() {\n        return destination;\n    }\n\n    /** Gets the {@link TeleportCause}","the {@link TeleportCause} /\n    public TeleportCause getTeleportReason() {\n        return cause;\n    }\n\n    @Override\n    public final String toString() {\n        return String.format(\"%s[Player=%s, Destination=%s, TeleportCause=%s]\", getHookName(), player, destination, cause);\n    }\n\n    /** Teleport Reasoning enum"]},"name":"TeleportCause","qualifiedname":"io.wolfscript.event.player.TeleportCause","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.hook.CancelableHook"],"enum":[{"code":"WARP","value":"","title":"Teleported by sleeping in/waking up from a bed","description":"Teleported by sleeping in/waking up from a bed /\n        BED,\n        //\n        /** Teleported by use of a command /\n        COMMAND,\n        //\n        /** Teleported by mounting/unmounting an {@link io.wolfscript.api.entity.Entity} /\n        MOUNT_CHANGE,\n        //\n        /** Teleported by normal moving /\n        MOVEMENT,\n        //\n        /** Teleported by a plugin /\n        PLUGIN,\n        //\n        /** Teleported by a Portal /\n        PORTAL,\n        //\n        /** Teleported by respawn /\n        RESPAWN,\n        //\n        /** Generic Reasoning /\n        UNDEFINED,\n        //\n        /** WARP SYSTEM","doc":{}}],"properties":[]},"io.wolfscript.event.player.ToolBroken":{"namespace":"io.wolfscript.event.player","title":"Called when a tool/sword runs out of uses and is destroyed","description":"Called when a tool/sword runs out of uses and is destroyed","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"ToolBroken","qualifiedname":"io.wolfscript.event.player.ToolBroken","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ToolBroken constructor","description":"ToolBroken constructor","scope":"public","name":"ToolBroken","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"},{"name":"tool","type":"io.wolfscript.api.inventory.Item","description":"tool argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.hook.Hook"],"properties":[{"name":"Tool","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} who's tool has broken","doc":{"return":["player who's tool has broken /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the tool that was broken<p/> NOTE: Amount will be 0; to restore the item set amount back to 1<br/> Also note the damage value will be 0","the tool that was broken"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.entity.living.humanoid.Player} who's tool has broken"}]},"io.wolfscript.event.player.VillagerTrade":{"namespace":"io.wolfscript.event.player","title":"VillagerTrade Hook","description":"VillagerTrade Hook<br> Called when a {@link io.wolfscript.api.entity.living.humanoid.Player} trades with a {@link io.wolfscript.api.VillagerTrade} from an {@link io.wolfscript.api.entity.living.humanoid.Villager}","doc":{"author":["Jason (darkdiplomat)"]},"name":"VillagerTrade","qualifiedname":"io.wolfscript.event.player.VillagerTrade","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.VillagerTrade","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.entity.living.humanoid.Villager","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Trade","modifier":"readonly","args":[],"description":"Get: Constructs a new VillagerTrade","doc":{"param":["player the {@link Player} who is trading","villager the {@link Villager} merchant","trade the {@link VillagerTrade} /\n    public VillagerTrade(Player player, Villager villager, VillagerTrade trade) {\n        this.player = player;\n        this.villager = villager;\n        this.trade = trade;\n    }\n\n    /** Gets the {@link Player} who is trading"],"return":["the {@link io.wolfscript.api.entity.living.humanoid.Player} /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.living.humanoid.Villager} merchant","the {@link io.wolfscript.api.entity.living.humanoid.Villager} /\n    public Villager getVillager() {\n        return villager;\n    }\n\n    /** Gets the {@link io.wolfscript.api.VillagerTrade}","the {@link io.wolfscript.api.VillagerTrade}"]},"return":"io.wolfscript.api.VillagerTrade","scope":"public","title":"Get: Constructs a new VillagerTrade"}]},"io.wolfscript.event.system.0":{"namespace":"io.wolfscript.event","title":"Classes and interfaces for namespace io.wolfscript.event.system","description":"Classes and interfaces for namespace io.wolfscript.event.system","name":"system","qualifiedname":"io.wolfscript.event.system.0","packagename":"io.wolfscript.event.system","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.event.system.LoadWorld","io.wolfscript.event.system.PermissionCheck","io.wolfscript.event.system.PluginDisable","io.wolfscript.event.system.PluginEnable","io.wolfscript.event.system.ServerGuiStart","io.wolfscript.event.system.ServerListPing","io.wolfscript.event.system.ServerShutdown","io.wolfscript.event.system.ServerTick","io.wolfscript.event.system.UnloadWorld"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.event.system.LoadWorld":{"namespace":"io.wolfscript.event.system","title":"Load World Hook","description":"Load World Hook <p/> Called when a {@link io.wolfscript.api.world.World} is loaded and initialized","doc":{"author":["Jason (darkdiplomat)"]},"name":"LoadWorld","qualifiedname":"io.wolfscript.event.system.LoadWorld","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"LoadWorld constructor","description":"LoadWorld constructor","scope":"public","name":"LoadWorld","args":[{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"}]}],"methods":[{"title":"Gets the {@link io.wolfscript.api.world.World} that has loaded","description":"Gets the {@link io.wolfscript.api.world.World} that has loaded","doc":{"return":["the {@link io.wolfscript.api.world.World} that loaded /\n    public World getWorld() {\n        return world;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.hook.Hook"],"properties":[]},"io.wolfscript.event.system.PermissionCheck":{"namespace":"io.wolfscript.event.system","title":"This hook is called after the PermissionProvider has resolved the permission,","description":"This hook is called after the PermissionProvider has resolved the permission, to alter the final outcome and eventually temporary allow a permission to a player","doc":{"author":["Chris (damagefilter)"]},"name":"PermissionCheck","qualifiedname":"io.wolfscript.event.system.PermissionCheck","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PermissionCheck constructor","description":"PermissionCheck constructor","scope":"public","name":"PermissionCheck","args":[{"name":"permission","type":"String","description":"permission argument"},{"name":"player","type":"io.wolfscript.chat.MessageReceiver","description":"player argument"},{"name":"result","type":"boolean","description":"result argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.chat.MessageReceiver","io.wolfscript.hook.Hook"],"properties":[{"name":"Result","modifier":"writeonly","args":[{"name":"result","type":"boolean","description":"result argument"}],"description":"Set: Gets the permission that was checked","doc":{"retur":["n /\n    public String getPermission() {\n        return permission;\n    }\n\n    /** Get the MessageReceiver for whom the permission check was issued","n /\n    public MessageReceiver getSubject() {\n        return subject;\n    }\n\n    /** Get the result of the check.","n /\n    public boolean getResult() {\n        return result;\n    }\n\n    /** Override the final result for the permission check"]},"return":"void","scope":"public","title":"Set: Gets the permission that was checked"}]},"io.wolfscript.event.system.PluginDisable":{"namespace":"io.wolfscript.event.system","title":"Called when a plugin is disabled","description":"Called when a plugin is disabled","doc":{"author":["greatman"]},"name":"PluginDisable","qualifiedname":"io.wolfscript.event.system.PluginDisable","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PluginDisable constructor","description":"PluginDisable constructor","scope":"public","name":"PluginDisable","args":[{"name":"plugin","type":"io.wolfscript.plugin.Plugin","description":"plugin argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.hook.Hook","io.wolfscript.plugin.Plugin"],"properties":[{"name":"Plugin","modifier":"readonly","args":[],"description":"Get: Retrieve the plugin that is disabled","doc":{"return":["The plugin that is disabled"]},"return":"io.wolfscript.plugin.Plugin","scope":"public","title":"Get: Retrieve the plugin that is disabled"}]},"io.wolfscript.event.system.PluginEnable":{"namespace":"io.wolfscript.event.system","title":"Called when a plugin is enabled.","description":"Called when a plugin is enabled.","doc":{"author":["greatman"]},"name":"PluginEnable","qualifiedname":"io.wolfscript.event.system.PluginEnable","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"PluginEnable constructor","description":"PluginEnable constructor","scope":"public","name":"PluginEnable","args":[{"name":"plugin","type":"io.wolfscript.plugin.Plugin","description":"plugin argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.hook.Hook","io.wolfscript.plugin.Plugin"],"properties":[{"name":"Plugin","modifier":"readonly","args":[],"description":"Get: Retrieve the plugin that is enabled","doc":{"return":["The plugin that is enabled"]},"return":"io.wolfscript.plugin.Plugin","scope":"public","title":"Get: Retrieve the plugin that is enabled"}]},"io.wolfscript.event.system.ServerGuiStart":{"namespace":"io.wolfscript.event.system","title":"Called when a GUI is started","description":"Called when a GUI is started","doc":{"author":["Larry (Larry1123)"]},"name":"ServerGuiStart","qualifiedname":"io.wolfscript.event.system.ServerGuiStart","type":"class","scope":"public","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ServerGuiStart constructor","description":"ServerGuiStart constructor","scope":"public","name":"ServerGuiStart","args":[{"name":"gui","type":"io.wolfscript.api.gui.GUIControl","description":"gui argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.gui.GUIControl","io.wolfscript.hook.Hook"],"properties":[{"name":"Gui","args":[{"name":"gui","type":"io.wolfscript.api.gui.GUIControl","description":"gui argument"}],"description":"Gui property","return":"io.wolfscript.api.gui.GUIControl","scope":"public","title":"Gui property"}]},"io.wolfscript.event.system.ServerListPing":{"namespace":"io.wolfscript.event.system","title":"Called when a client ping the server","description":"Called when a client ping the server","doc":{"author":["greatman","Jason (darkdiplomat)"]},"name":"ServerListPing","qualifiedname":"io.wolfscript.event.system.ServerListPing","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ServerListPing constructor","description":"ServerListPing constructor","scope":"public","name":"ServerListPing","args":[{"name":"remoteSocket","type":"java.net.InetSocketAddress","description":"remoteSocket argument"},{"name":"requesterProtocol","type":"int","description":"requesterProtocol argument"},{"name":"hostNamePinged","type":"String","description":"hostNamePinged argument"},{"name":"portPinged","type":"int","description":"portPinged argument"},{"name":"motd","type":"io.wolfscript.api.chat.ChatComponent","description":"motd argument"},{"name":"currentPlayers","type":"int","description":"currentPlayers argument"},{"name":"maxPlayers","type":"int","description":"maxPlayers argument"},{"name":"favicon","type":"String","description":"favicon argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["com.google.common.io.BaseEncoding","com.mojang.authlib.GameProfile","io.wolfscript.Wolf","io.wolfscript.api.chat.ChatComponent","io.wolfscript.hook.CancelableHook","javax.imageio.ImageIO","java.awt.image.BufferedImage","java.io.ByteArrayOutputStream","java.io.File","java.io.IOException","java.io.RandomAccessFile","java.net.InetAddress","java.net.InetSocketAddress","java.util.Arrays","java.util.List"],"properties":[{"name":"Favicon","modifier":"writeonly","args":[{"name":"favicon","type":"String","description":"the base64 encoded PNG file"}],"description":"Set: Gets the {@link java.net.InetAddress} (IP) of the requesting party","doc":{"return":["{@link java.net.InetAddress} of requesting party /\n    public InetAddress getRequesterAddress() {\n        return requesterAddress;\n    }\n\n    /** Gets the port used by the requesting party","port /\n    public int getRequesterPort() {\n        return requesterPort;\n    }\n\n    /** Gets the protocol version for the requesting party","requester's protocol version /\n    public int getRequesterProtocol() {\n        return requesterProtocol;\n    }\n\n    /** Gets the HostName (or IP) used by the requester to connect to the server","host name (or IP) used /\n    public String getHostNamePinged() {\n        return hostNamePinged;\n    }\n\n    /** Gets the port the Requester has stated it has pinged","port pinged /\n    public int getPortPinged() {\n        return portPinged;\n    }\n\n    /** Retrieve the MOTD that will be sent to the client","The MOTD that will be sent to the client /\n    public ChatComponent getMotd() {\n        return motd;\n    }\n\n    /** Retrieve the maximum amount of players the server allows that will be sent to the client.","The maximum amount of players /\n    public int getMaxPlayers() {\n        return maxPlayers;\n    }\n\n    /** Retrieve the current amount of players connected to the server that will be sent to the client.","The current amount of players /\n    public int getCurrentPlayers() {\n        return currentPlayers;\n    }\n\n    /** Set the MOTD that will be sent to the client","profile list /\n    public List<GameProfile> getProfiles() {\n        return profiles;\n    }\n\n    /** Returns the Favicon encoded string to be sent","the favicon string /\n    public String getFavicon() {\n        return favicon;\n    }\n\n    /** Sets the favicon encoded string.<br/> The string should be formatted as data:image/png;base64,[base64encodedImage].<br/>"],"throws":["IllegalArgumentException"]},"return":"void","scope":"public","title":"Set: Gets the {@link java.net.InetAddress} (IP) of the requesting party"}]},"io.wolfscript.event.system.ServerShutdown":{"namespace":"io.wolfscript.event.system","title":"Server shutdown hook. Contains information about the reason the server is","description":"Server shutdown hook. Contains information about the reason the server is shutting down","doc":{"author":["Jason (darkdiplomat)"]},"name":"ServerShutdown","qualifiedname":"io.wolfscript.event.system.ServerShutdown","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ServerShutdown constructor","description":"ServerShutdown constructor","scope":"public","name":"ServerShutdown","args":[{"name":"reason","type":"String","description":"reason argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.hook.Hook"],"properties":[{"name":"Reason","modifier":"writeonly","args":[{"name":"reason","type":"String","description":"reason argument"}],"description":"Set: Get the reason for disconnect (if applicable)","doc":{"return":["reason if disconnecting, null otherwise /\n    public String getReason() {\n        return reason;\n    }\n\n    /** Set the reason for disconnection that will be displayed"]},"return":"void","scope":"public","title":"Set: Get the reason for disconnect (if applicable)"}]},"io.wolfscript.event.system.ServerTick":{"namespace":"io.wolfscript.event.system","title":"Called in the servers tick loop, before world processing.","description":"Called in the servers tick loop, before world processing. For informational use","doc":{"author":["Chris (damagefilter)"]},"name":"ServerTick","qualifiedname":"io.wolfscript.event.system.ServerTick","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ServerTick constructor","description":"ServerTick constructor","scope":"public","name":"ServerTick","args":[{"name":"deltaTime","type":"long","description":"deltaTime argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.hook.Hook"],"properties":[{"name":"DeltaTime","modifier":"writeonly","args":[{"name":"deltaTime","type":"long","description":"the deltaTime to set"}],"description":"DeltaTime property","doc":{"return":["the deltaTime /\n    public long getDeltaTime() {\n        return deltaTime;\n    }\n\n    /**"]},"return":"void","scope":"public","title":"DeltaTime property"}]},"io.wolfscript.event.system.UnloadWorld":{"namespace":"io.wolfscript.event.system","title":"Called before a world is unloaded.","description":"Called before a world is unloaded.<br> Before a world is unloaded, it will be saved! After a world is unloaded it will not be processed in the tick loop anymore. A world can not be unloaded if it still has players on it. For informational use - to give plugins a chance to null their references to that world, if they have any.","doc":{"author":["Chris (damagefilter)"]},"name":"UnloadWorld","qualifiedname":"io.wolfscript.event.system.UnloadWorld","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"UnloadWorld constructor","description":"UnloadWorld constructor","scope":"public","name":"UnloadWorld","args":[{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.hook.Hook"],"properties":[{"name":"World","modifier":"readonly","args":[],"description":"Get: Returns the world that is about to be unloaded","doc":{"return":["the world"]},"return":"io.wolfscript.api.world.World","scope":"public","title":"Get: Returns the world that is about to be unloaded"}]},"io.wolfscript.event.world.0":{"namespace":"io.wolfscript.event","title":"Classes and interfaces for namespace io.wolfscript.event.world","description":"Classes and interfaces for namespace io.wolfscript.event.world","name":"world","qualifiedname":"io.wolfscript.event.world.0","packagename":"io.wolfscript.event.world","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.event.world.BlockDropXp","io.wolfscript.event.world.BlockGrow","io.wolfscript.event.world.BlockPhysics","io.wolfscript.event.world.BlockUpdate","io.wolfscript.event.world.ChunkCreated","io.wolfscript.event.world.ChunkCreation","io.wolfscript.event.world.ChunkLoaded","io.wolfscript.event.world.ChunkUnload","io.wolfscript.event.world.Decorate","io.wolfscript.event.world.Dispense","io.wolfscript.event.world.Explosion","io.wolfscript.event.world.FireworkExplode","io.wolfscript.event.world.Flow","io.wolfscript.event.world.HopperTransfer","io.wolfscript.event.world.LeafDecay","io.wolfscript.event.world.LightningStrike","io.wolfscript.event.world.LiquidDestroy","io.wolfscript.event.world.NoteBlockPlay","io.wolfscript.event.world.PistonExtend","io.wolfscript.event.world.PistonRetract","io.wolfscript.event.world.PortalCreate","io.wolfscript.event.world.PortalDestroy","io.wolfscript.event.world.RedstoneChange","io.wolfscript.event.world.Smelt","io.wolfscript.event.world.SmeltBegin","io.wolfscript.event.world.TimeChange","io.wolfscript.event.world.TreeGrow","io.wolfscript.event.world.WeatherChange"],"interfaces":[],"enums":["io.wolfscript.event.world.ActivationCause","io.wolfscript.event.world.IgnitionCause"],"namespaces":[],"properties":[]},"io.wolfscript.event.world.ActivationCause":{"namespace":"io.wolfscript.event.world","title":"TNT Activate Hook","description":"TNT Activate Hook <p/> Called when a TNT block or TNTMinecart is activated","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]},"name":"ActivationCause","qualifiedname":"io.wolfscript.event.world.ActivationCause","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.LivingBase","io.wolfscript.api.entity.vehicle.TNTMinecart","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"enum":[{"code":"ENTITY","value":"","title":"ENTITY ActivationCause","description":"ENTITY ActivationCause","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]}},{"code":"FIRE","value":"","title":"FIRE ActivationCause","description":"FIRE ActivationCause","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]}},{"code":"EXPLOSION","value":"","title":"EXPLOSION ActivationCause","description":"EXPLOSION ActivationCause","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]}},{"code":"REDSTONE","value":"","title":"REDSTONE ActivationCause","description":"REDSTONE ActivationCause","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]}},{"code":"UNKNOWN","value":"","title":"UNKNOWN ActivationCause","description":"UNKNOWN ActivationCause","doc":{"author":["Jason (darkdiplomat) /\npublic final class TNTActivate extends CancelableHook {\n    private Block tnt;\n    private TNTMinecart tntMinecart;\n    private LivingBase activator;\n    private ActivationCause cause;\n\n    /** Constructs a new TNTActivate for a TNT Block","Jason (darkdiplomat)"],"param":["tnt the TNT being activated","activator the {@link io.wolfscript.api.entity.living.LivingBase} activating the TNT if present","cause the {@link io.wolfscript.event.world.TNTActivate.ActivationCause} /\n    public TNTActivate(Block tnt, LivingBase activator, ActivationCause cause) {\n        this.tnt = tnt;\n        this.activator = activator;\n        this.cause = cause;\n    }\n\n    /** Constucts a new TNTActivate for a {@link io.wolfscript.api.entity.vehicle.TNTMinecart}","tntMinecart the TNTMinecart being activated /\n    public TNTActivate(TNTMinecart tntMinecart) {\n        this.tnt = null;\n        this.activator = null;\n        this.cause = ActivationCause.REDSTONE;\n        this.tntMinecart = tntMinecart;\n    }\n\n    /** Gets the {@link Block} of TNT being activated if not a TNTMinecart call"],"return":["the {@link Block} of TNT; {@code null} if TNTMinecart /\n    public Block getTNT() {\n        return tnt;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.vehicle.TNTMinecart} being activated if not a TNT Block","the {@link io.wolfscript.api.entity.vehicle.TNTMinecart}; {@code null} if TNT Block /\n    public TNTMinecart getTNTCart() {\n        return tntMinecart;\n    }\n\n    /** Gets the {@link LivingBase} that is causing the TNT to activate (if applicable)","the {@link LivingBase} if present; {@code null} otherwise /\n    public LivingBase getActivator() {\n        return activator;\n    }\n\n    /** Gets the {@link ActivationCause} of the TNT Activation","the {@link ActivationCause} /\n    public ActivationCause getCause() {\n        return cause;\n    }\n\n    /** {@inheritDoc} /\n    @Override\n    public String toString() {\n        return String.format(\"%s[TNT=%s, Activator=%s, Cause=%s]\", getHookName(), tnt != null ? tnt : tntMinecart, activator, cause);\n    }\n\n    /** TNT Activation causes"]}}],"properties":[]},"io.wolfscript.event.world.BlockDropXp":{"namespace":"io.wolfscript.event.world","title":"Event thrown when a block that drop experience (spawner, ore, redstone ore) is destroyed","description":"Event thrown when a block that drop experience (spawner, ore, redstone ore) is destroyed","doc":{"author":["greatman"]},"name":"BlockDropXp","qualifiedname":"io.wolfscript.event.world.BlockDropXp","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BlockDropXp constructor","description":"BlockDropXp constructor","scope":"public","name":"BlockDropXp","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"},{"name":"xp","type":"int","description":"xp argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Xp","modifier":"writeonly","args":[{"name":"xp","type":"int","description":"The experience amount that will be dropped"}],"description":"Set: Get the block that gives the dropped experience","doc":{"return":["The block /\n    public Block getBlock() {\n        return block;\n    }\n\n    /** Get the experience amount that will be dropped.","the xp amount /\n    public int getXp() {\n        return xp;\n    }\n\n    /** Set the experience amount that will be dropped."]},"return":"void","scope":"public","title":"Set: Get the block that gives the dropped experience"}]},"io.wolfscript.event.world.BlockGrow":{"namespace":"io.wolfscript.event.world","title":"Called when a block \"grows\"","description":"Called when a block \"grows\"","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"BlockGrow","qualifiedname":"io.wolfscript.event.world.BlockGrow","type":"class","scope":"public","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BlockGrow constructor","description":"BlockGrow constructor","scope":"public","name":"BlockGrow","args":[{"name":"original","type":"io.wolfscript.api.world.blocks.Block","description":"original argument"},{"name":"growth","type":"io.wolfscript.api.world.blocks.Block","description":"growth argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Growth","modifier":"readonly","args":[],"description":"Growth property","return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Growth property"},{"name":"Original","modifier":"readonly","args":[],"description":"Original property","return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Original property"}]},"io.wolfscript.event.world.BlockPhysics":{"namespace":"io.wolfscript.event.world","title":"Block physics hook. Contains information about a block's physics being updated.","description":"Block physics hook. Contains information about a block's physics being updated.","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockPhysics","qualifiedname":"io.wolfscript.event.world.BlockPhysics","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"BlockPhysics constructor","description":"BlockPhysics constructor","scope":"public","name":"BlockPhysics","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"},{"name":"placed","type":"boolean","description":"placed argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]},{"title":"Gets the {@link io.wolfscript.api.world.blocks.Block}","description":"Gets the {@link io.wolfscript.api.world.blocks.Block}","doc":{"return":["block /\n    public Block getBlock() {\n        return block;\n    }\n\n    /** Gets whether this {@link io.wolfscript.api.world.blocks.Block} was just placed","true is was placed"]},"scope":"public","return":"boolean","name":"wasPlaced","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.world.BlockUpdate":{"namespace":"io.wolfscript.event.world","title":"Block update hook. Contains information about a block updating.","description":"Block update hook. Contains information about a block updating.","doc":{"author":["Jason (darkdiplomat)"]},"name":"BlockUpdate","qualifiedname":"io.wolfscript.event.world.BlockUpdate","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewBlockType","modifier":"readonly","args":[],"description":"NewBlockType property","doc":{"deprecated":["Use the other constructor instead /\n    @Deprecated\n    public BlockUpdate(Block block, int newBlockId) {\n        this.block = block;\n        this.newBlockId = newBlockId;\n        this.newBlockType = BlockType.fromId(newBlockId);\n    }\n\n    public BlockUpdate(Block block, BlockType newBlockType) {\n        this.block = block;\n        this.newBlockType = newBlockType;\n        this.newBlockId = newBlockType.getId();\n    }\n\n    /** Gets {@link io.wolfscript.api.world.blocks.Block} updating"],"return":["The {@link io.wolfscript.api.world.blocks.Block} updated. /\n    public Block getBlock() {\n        return block;\n    }\n\n    /** Gets the block id of the new {@link io.wolfscript.api.world.blocks.Block}","{@link io.wolfscript.api.world.blocks.Block} ID value. /\n    public int getNewBlockId() {\n        return newBlockId;\n    }\n\n    /** Gets the block type of the new {@link io.wolfscript.api.world.blocks.Block}","{@link io.wolfscript.api.world.blocks.BlockType} type"]},"return":"io.wolfscript.api.world.blocks.BlockType","scope":"public","title":"NewBlockType property"}]},"io.wolfscript.event.world.ChunkCreated":{"namespace":"io.wolfscript.event.world","title":"Chunk created hook","description":"Chunk created hook","doc":{"author":["Chris (damagefilter)"]},"name":"ChunkCreated","qualifiedname":"io.wolfscript.event.world.ChunkCreated","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ChunkCreated constructor","description":"ChunkCreated constructor","scope":"public","name":"ChunkCreated","args":[{"name":"chunk","type":"io.wolfscript.api.world.Chunk","description":"chunk argument"},{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.Chunk","io.wolfscript.api.world.World","io.wolfscript.hook.Hook"],"properties":[{"name":"World","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.world.Chunk}","doc":{"return":["{@link io.wolfscript.api.world.Chunk} created. /\n    public Chunk getChunk() {\n        return chunk;\n    }\n\n    /** Gets the world that this chunk is a part of.","the {@link io.wolfscript.api.world.World}"]},"return":"io.wolfscript.api.world.World","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.world.Chunk}"}]},"io.wolfscript.event.world.ChunkCreation":{"namespace":"io.wolfscript.event.world","title":"Chunk creation hook. Contains information about a new chunk being created.","description":"Chunk creation hook. Contains information about a new chunk being created.","doc":{"author":["Jason (darkdiplomat)"]},"name":"ChunkCreation","qualifiedname":"io.wolfscript.event.world.ChunkCreation","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ChunkCreation constructor","description":"ChunkCreation constructor","scope":"public","name":"ChunkCreation","args":[{"name":"x","type":"int","description":"x argument"},{"name":"z","type":"int","description":"z argument"},{"name":"dimension","type":"io.wolfscript.api.world.World","description":"dimension argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.BiomeType","io.wolfscript.api.world.World","io.wolfscript.hook.Hook"],"properties":[{"name":"BiomeData","modifier":"readonly","args":[],"description":"Get: Gets the x coordinate of the chunk","doc":{"return":["x coordinate. /\n    public int getX() {\n        return x;\n    }\n\n    /** Gets the z coordinate of the chunk","z coordinate. /\n    public int getZ() {\n        return z;\n    }\n\n    /** Gets the dimension the chunk is in","dimension /\n    public World getWorld() {\n        return dimension;\n    }\n\n    /** Sets the blocks data. Tips: Set a int[32768] if you want to generate a new chunk. The block index equals (x 16 + z) 128 + y where 16>x<=0, 16>z<=0, and 128>y<=0 /\n    public void setBlockData(int[] blockdata) {\n        this.blockdata = blockdata;\n    }\n\n    /** Gets the block data of the chunk","blockdata /\n    public int[] getBlockData() {\n        return blockdata;\n    }\n\n    /** Sets the biome data of each y column in the chunk","An array of {@link io.wolfscript.api.world.BiomeType} for the biome data in a chunk."],"param":["biomedata An array of {@link BiomeType} for setting biome data in a chunk. /\n    public void setBiomeData(BiomeType[] biomedata) {\n        this.biomedata = biomedata;\n    }\n\n    /** Gets the biomedata for the chunk"]},"return":"BiomeType[]","scope":"public","title":"Get: Gets the x coordinate of the chunk"}]},"io.wolfscript.event.world.ChunkLoaded":{"namespace":"io.wolfscript.event.world","title":"Chunk created hook","description":"Chunk created hook","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"ChunkLoaded","qualifiedname":"io.wolfscript.event.world.ChunkLoaded","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[{"title":"ChunkLoaded constructor","description":"ChunkLoaded constructor","scope":"public","name":"ChunkLoaded","args":[{"name":"chunk","type":"io.wolfscript.api.world.Chunk","description":"chunk argument"},{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"},{"name":"newchunk","type":"boolean","description":"newchunk argument"}]}],"methods":[{"title":"Gets the {@link io.wolfscript.api.world.Chunk}","description":"Gets the {@link io.wolfscript.api.world.Chunk}","doc":{"return":["The {@link io.wolfscript.api.world.Chunk}. /\n    public Chunk getChunk() {\n        return chunk;\n    }\n\n    /** Gets the world this chunk is a part of.","the world /\n    public World getWorld() {\n        return world;\n    }\n\n    /** Gets whether this chunk was a freshly created chunk","{@code true} if new; {@code false} otherwise"]},"scope":"public","return":"boolean","name":"isNew","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.Chunk","io.wolfscript.api.world.World","io.wolfscript.hook.Hook"],"properties":[]},"io.wolfscript.event.world.ChunkUnload":{"namespace":"io.wolfscript.event.world","title":"Chunk unload hook","description":"Chunk unload hook","doc":{"author":["Chris (damagefilter)"]},"name":"ChunkUnload","qualifiedname":"io.wolfscript.event.world.ChunkUnload","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"ChunkUnload constructor","description":"ChunkUnload constructor","scope":"public","name":"ChunkUnload","args":[{"name":"chunk","type":"io.wolfscript.api.world.Chunk","description":"chunk argument"},{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.Chunk","io.wolfscript.api.world.World","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"World","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.world.Chunk}","doc":{"return":["The {@link io.wolfscript.api.world.Chunk}. /\n    public Chunk getChunk() {\n        return chunk;\n    }\n\n    /** Gets the world this chunk is a part of.","the world"]},"return":"io.wolfscript.api.world.World","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.world.Chunk}"}]},"io.wolfscript.event.world.Decorate":{"namespace":"io.wolfscript.event.world","title":"Called when decorating terrain with trees, glowstone etc.","description":"Called when decorating terrain with trees, glowstone etc.","doc":{"author":["Brian (WWOL)"]},"name":"Decorate","qualifiedname":"io.wolfscript.event.world.Decorate","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Decorate constructor","description":"Decorate constructor","scope":"public","name":"Decorate","args":[{"name":"x","type":"int","description":"x argument"},{"name":"z","type":"int","description":"z argument"},{"name":"world","type":"io.wolfscript.api.world.World","description":"world argument"},{"name":"name","type":"String","description":"name argument"}]}],"methods":[{"title":"Gets the x coordinate","description":"Gets the x coordinate","doc":{"return":["x /\n    public int getX() {\n        return x;\n    }\n\n    /** Gets the z coordinate","z /\n    public int getZ() {\n        return z;\n    }\n\n    /** Return the {@link io.wolfscript.api.world.World}","world /\n    public World getWorld() {\n        return world;\n    }\n\n    /** Gets the {@link DecoratorType}","type /\n    public DecoratorType getDecoratorType() {\n        return decoratorType;\n    }\n\n    /** Return a {@link DecoratorType} from a string","{@link DecoratorType#UNKNOWN} if of unknown type."]},"scope":"public","return":"DecoratorType","name":"getFromName","args":[{"name":"name","type":"String","description":"name argument"}]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.world.Dispense":{"namespace":"io.wolfscript.event.world","title":"Dispense hook. Contains information about a Dispenser dispensing an entity.","description":"Dispense hook. Contains information about a Dispenser dispensing an entity.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Dispense","qualifiedname":"io.wolfscript.event.world.Dispense","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Dispense constructor","description":"Dispense constructor","scope":"public","name":"Dispense","args":[{"name":"dispenser","type":"io.wolfscript.api.world.blocks.Dispenser","description":"dispenser argument"},{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.world.blocks.Dispenser","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Entity","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.world.blocks.Dispenser}","doc":{"return":["dispenser /\n    public Dispenser getDispenser() {\n        return dispenser;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.Entity} being dispensed","entity"]},"return":"io.wolfscript.api.entity.Entity","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.world.blocks.Dispenser}"}]},"io.wolfscript.event.world.Explosion":{"namespace":"io.wolfscript.event.world","title":"Explosion hook. Contains information about an explosion.","description":"Explosion hook. Contains information about an explosion.","doc":{"author":["Jason (darkdiplomat)"]},"name":"Explosion","qualifiedname":"io.wolfscript.event.world.Explosion","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Explosion constructor","description":"Explosion constructor","scope":"public","name":"Explosion","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"},{"name":"entity","type":"io.wolfscript.api.entity.Entity","description":"entity argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.Entity","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook","java.util.List"],"properties":[{"name":"AffectedBlocks","modifier":"readonly","args":[],"description":"Get: Gets the base affected {@link io.wolfscript.api.world.blocks.Block}","doc":{"return":["block /\n    public Block getBlock() {\n        return block;\n    }\n\n    /** Gets the {@link io.wolfscript.api.entity.Entity} causing the explosion","entity /\n    public Entity getEntity() {\n        return entity;\n    }\n\n    /** Gets the list of affected blocks","blocksaffected"]},"return":"List<Block>","scope":"public","title":"Get: Gets the base affected {@link io.wolfscript.api.world.blocks.Block}"}]},"io.wolfscript.event.world.FireworkExplode":{"namespace":"io.wolfscript.event.world","title":"FireworkExplode","description":"FireworkExplode <p/> Called when a Firework Rocket is to explode","doc":{"author":["Jason (darkdiplomat)"]},"name":"FireworkExplode","qualifiedname":"io.wolfscript.event.world.FireworkExplode","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.FireworkRocket","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"FireworkRocket","modifier":"readonly","args":[],"description":"Get: Constructs a new FireworkExplode","doc":{"param":["rocket the {@link FireworkRocket} to explode /\n    public FireworkExplode(FireworkRocket rocket) {\n        this.rocket = rocket;\n    }\n\n    /** Gets the {@link FireworkRocket} set to explode"],"return":["the {@link io.wolfscript.api.entity.FireworkRocket}"]},"return":"io.wolfscript.api.entity.FireworkRocket","scope":"public","title":"Get: Constructs a new FireworkExplode"}]},"io.wolfscript.event.world.Flow":{"namespace":"io.wolfscript.event.world","title":"Flow hook. Contains information about a liquid flowing from one block to another","description":"Flow hook. Contains information about a liquid flowing from one block to another","doc":{"author":["Jason (darkdiplomat)"]},"name":"Flow","qualifiedname":"io.wolfscript.event.world.Flow","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"Flow constructor","description":"Flow constructor","scope":"public","name":"Flow","args":[{"name":"from","type":"io.wolfscript.api.world.blocks.Block","description":"from argument"},{"name":"to","type":"io.wolfscript.api.world.blocks.Block","description":"to argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"BlockTo","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.world.blocks.Block} flowing from","doc":{"return":["the {@link io.wolfscript.api.world.blocks.Block} /\n    public Block getBlockFrom() {\n        return from;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block} flowing to","the {@link io.wolfscript.api.world.blocks.Block}"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.world.blocks.Block} flowing from"}]},"io.wolfscript.event.world.HopperTransfer":{"namespace":"io.wolfscript.event.world","title":"Hook parameter for when Hoppers Transfer Items","description":"Hook parameter for when Hoppers Transfer Items","doc":{"author":["Somners"]},"name":"HopperTransfer","qualifiedname":"io.wolfscript.event.world.HopperTransfer","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"HopperTransfer constructor","description":"HopperTransfer constructor","scope":"public","name":"HopperTransfer","args":[{"name":"hopper","type":"io.wolfscript.api.inventory.Hopper","description":"hopper argument"},{"name":"itemTransferred","type":"io.wolfscript.api.inventory.Item","description":"itemTransferred argument"},{"name":"inputting","type":"boolean","description":"inputting argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.inventory.Hopper","io.wolfscript.api.inventory.Item","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"ItemTransferred","modifier":"readonly","args":[],"description":"Get: Gets the hopper involved with this transfer. Use instanceof to Check if it is a HopperBlock or HopperMincart.","doc":{"return":["The Hopper.","True if the item is being transferred into the hopper. /\n    public boolean isInputting() {\n        return this.inputting;\n    }\n\n    /** Is the transfer outputting into the Hopper?","True if the item is being transferred out of hopper. /\n    public boolean isOutputting() {\n        return !this.inputting;\n    }\n\n    /** Gets the item being transferred in this event.","The Item."],"see":["io.wolfscript.api.entity.vehicle.HopperMinecart","io.wolfscript.api.world.blocks.HopperBlock /\n    public Hopper getHopper() {\n        return this.hopper;\n    }\n\n    /** Is the transfer inputting into the Hopper?"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Gets the hopper involved with this transfer."}]},"io.wolfscript.event.world.IgnitionCause":{"namespace":"io.wolfscript.event.world","title":"Ignition hook. Contains information about a {@link io.wolfscript.api.world.blocks.Block} being set on fire.","description":"Ignition hook. Contains information about a {@link io.wolfscript.api.world.blocks.Block} being set on fire.","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat) /\npublic final class IgnitionHook extends CancelableHook {\n\n    private final Player player;\n    private final Block ignited, clicked;\n    private final IgnitionCause cause;\n\n    public IgnitionHook(Block ignited, Player player, Block clicked, IgnitionCause cause) {\n        this.ignited = ignited;\n        this.player = player;\n        this.clicked = clicked;\n        this.cause = cause;\n    }\n\n    /** Gets the {@link Block} that is about to go up in flames <p/> Block Statuses: <b>NOTE: Block statuses are subject to future removal. Use {@link #getCause} instead.</b> <ul> <li><b>1</b> - Lava</li> <li><b>2</b> - Flint&Steel</li> <li><b>3</b> - Spread</li> <li><b>4</b> - Burned Up</li> <li><b>5</b> - Lightning Strike</li> <li><b>6</b> - Small FireBall click</li> <li><b>7</b> - FireBall hitting a block</li> </ul>","Jason (darkdiplomat)"],"return":["the {@link Block} catching fire","the {@link Player} starting the fire or {@code null} if not started by a Player /\n    public Player getPlayer() {\n        return player;\n    }\n\n    /** The {@link Block} that was clicked to cause an ignition if applicable.","{@link Block} if one was clicked; {@code null} otherwise. /\n    public Block getClickedBlock() {\n        return clicked;\n    }\n\n    /** Gets the {@link IgnitionCause} causing the ignition","the {@link IgnitionCause} /\n    public IgnitionCause getCause() {\n        return cause;\n    }\n\n    @Override\n    public final String toString() {\n        return String.format(\"%s[Player=%s, Ignited=%s, Clicked=%s, IgnitionCause=%s]\", getHookName(), player, ignited, clicked, cause);\n    }\n\n    /** Ignition Cause <p/> Replacement for the block status codes to signify what caused the ignition<br> Constants are ordered in the original block status numbers with the exception of 0 being the UNDEFINED"],"see":["Block#getStatus()","IgnitionCause /\n    public Block getBlock() {\n        return ignited;\n    }\n\n    /** The {@link Player} starting the fire if present"]},"name":"IgnitionCause","qualifiedname":"io.wolfscript.event.world.IgnitionCause","type":"enum","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"enum":[{"code":"FIREBALL_HIT","value":"","title":"Unknown/Undefined reason","description":"Unknown/Undefined reason /\n        UNDEFINED,\n        //\n        /** Lava causing ignition /\n        LAVA,\n        //\n        /** Flint & Steel clicking /\n        FLINT_AND_STEEL,\n        //\n        /** Natural Fire Spread /\n        FIRE_SPREAD,\n        //\n        /** Block burning up from fire nearby /\n        BURNT,\n        //\n        /** Lightning strikes /\n        LIGHTNING_STRIKE,\n        //\n        /** Small Fireball clicking /\n        FIREBALL_CLICK,\n        //\n        /** Small or Large Fireball hitting a block","doc":{}}],"properties":[]},"io.wolfscript.event.world.LeafDecay":{"namespace":"io.wolfscript.event.world","title":"Block update hook. Contains information about a block updating.","description":"Block update hook. Contains information about a block updating.","doc":{"author":["Jason (darkdiplomat)"]},"name":"LeafDecay","qualifiedname":"io.wolfscript.event.world.LeafDecay","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"LeafDecay constructor","description":"LeafDecay constructor","scope":"public","name":"LeafDecay","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Block","modifier":"readonly","args":[],"description":"Get: Get the leaf block that is about to decay","doc":{"return":["the {@link io.wolfscript.api.world.blocks.Block} of leaves"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Get the leaf block that is about to decay"}]},"io.wolfscript.event.world.LightningStrike":{"namespace":"io.wolfscript.event.world","title":"LightningStrike","description":"LightningStrike <p/> Called when a {@link io.wolfscript.api.entity.effect.LightningBolt} strikes","doc":{"author":["Jason (darkdiplomat)"],"see":["EntityLightningStruck"]},"name":"LightningStrike","qualifiedname":"io.wolfscript.event.world.LightningStrike","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.Hook"],"constructors":[],"fields":[{"title":"lightbolt field","description":"lightbolt field","name":"lightbolt","scope":"public","type":"io.wolfscript.api.entity.effect.LightningBolt"}],"methods":[{"title":"Creates a new LightningStrike","description":"Creates a new LightningStrike","doc":{"param":["lightbolt the {@link LightningBolt} striking /\n    public LightningStrike(LightningBolt lightbolt) {\n        this.lightbolt = lightbolt;\n    }\n\n    /** Gets the {@link LightningBolt} striking"],"return":["the striking {@link io.wolfscript.api.entity.effect.LightningBolt} /\n    public LightningBolt getLightningBolt() {\n        return lightbolt;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.entity.effect.LightningBolt","io.wolfscript.hook.Hook","io.wolfscript.event.entity.EntityLightningStruck"],"properties":[]},"io.wolfscript.event.world.LiquidDestroy":{"namespace":"io.wolfscript.event.world","title":"Is called when a liquid is about to destroy something (crops, popping off torches etc)","description":"Is called when a liquid is about to destroy something (crops, popping off torches etc)","doc":{"author":["Chris (damagefilter)"]},"name":"LiquidDestroy","qualifiedname":"io.wolfscript.event.world.LiquidDestroy","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"LiquidDestroy constructor","description":"LiquidDestroy constructor","scope":"public","name":"LiquidDestroy","args":[{"name":"block","type":"io.wolfscript.api.world.blocks.Block","description":"block argument"}]},{"title":"LiquidDestroy constructor","description":"LiquidDestroy constructor","scope":"public","name":"LiquidDestroy","args":[{"name":"liquidType","type":"io.wolfscript.api.world.blocks.BlockType","description":"liquidType argument"},{"name":"toDestroy","type":"io.wolfscript.api.world.blocks.Block","description":"toDestroy argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.blocks.BlockType","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"ForceDestroy","modifier":"writeonly","args":[{"name":"forceDestroy","type":"boolean","description":"{@code true} for force destroy"}],"description":"Set: Get the block that would be destroyed by the liquid flow","doc":{"return":["the {@link io.wolfscript.api.world.blocks.Block} /\n    public Block getBlock() {\n        return block;\n    }\n\n    /** Returns the {@link io.wolfscript.api.world.blocks.BlockType} of the liquid. Always returns the Flowing variant.","The liquid's {@link io.wolfscript.api.world.blocks.BlockType} /\n    public BlockType getLiquidType() {\n        return liquidType;\n    }\n\n    /** Check if the block in question will be destroyed regardless of what it is.","{@code true} if force destroy /\n    public boolean isForceDestroy() {\n        return forceDestroy;\n    }\n\n    /** Set this to true to force the block to be destroyed. This will not work if the hook is canceled already!"]},"return":"void","scope":"public","title":"Set: Get the block that would be destroyed by the liquid flow"}]},"io.wolfscript.event.world.NoteBlockPlay":{"namespace":"io.wolfscript.event.world","title":"Called when a {@link io.wolfscript.api.world.blocks.NoteBlock} is played","description":"Called when a {@link io.wolfscript.api.world.blocks.NoteBlock} is played","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"NoteBlockPlay","qualifiedname":"io.wolfscript.event.world.NoteBlockPlay","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new NoteBlockPlay","description":"Constructs a new NoteBlockPlay","doc":{"param":["noteBlock the {@link io.wolfscript.api.world.blocks.NoteBlock} being played /\n    public NoteBlockPlay(NoteBlock noteBlock) {\n        this.noteBlock = noteBlock;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.NoteBlock} being played"],"return":["the playing NoteBlock /\n    public final NoteBlock getNoteBlock() {\n        return this.noteBlock;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.NoteBlock","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.world.PistonExtend":{"namespace":"io.wolfscript.event.world","title":"Piston Extend Hook","description":"Piston Extend Hook<br> Called when a Piston extends","doc":{"author":["Jason (darkdiplomat)"]},"name":"PistonExtend","qualifiedname":"io.wolfscript.event.world.PistonExtend","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"PistonExtend constructor","description":"PistonExtend constructor","scope":"public","name":"PistonExtend","args":[{"name":"piston","type":"io.wolfscript.api.world.blocks.Block","description":"piston argument"},{"name":"moving","type":"io.wolfscript.api.world.blocks.Block","description":"moving argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Moving","modifier":"readonly","args":[],"description":"Get: Gets the piston {@link io.wolfscript.api.world.blocks.Block}","doc":{"return":["piston /\n    public Block getPiston() {\n        return piston;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block} the piston is pushing/pulling","{@link io.wolfscript.api.world.blocks.Block}"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the piston {@link io.wolfscript.api.world.blocks.Block}"}]},"io.wolfscript.event.world.PistonRetract":{"namespace":"io.wolfscript.event.world","title":"Piston Retract hook","description":"Piston Retract hook<br> Called when a piston retracts","doc":{"author":["Jason (darkdiplomat)"]},"name":"PistonRetract","qualifiedname":"io.wolfscript.event.world.PistonRetract","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"PistonRetract constructor","description":"PistonRetract constructor","scope":"public","name":"PistonRetract","args":[{"name":"piston","type":"io.wolfscript.api.world.blocks.Block","description":"piston argument"},{"name":"moving","type":"io.wolfscript.api.world.blocks.Block","description":"moving argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Moving","modifier":"readonly","args":[],"description":"Get: Gets the piston {@link io.wolfscript.api.world.blocks.Block}","doc":{"return":["piston /\n    public Block getPiston() {\n        return piston;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Block} the piston is pushing/pulling","the {@link io.wolfscript.api.world.blocks.Block}"]},"return":"io.wolfscript.api.world.blocks.Block","scope":"public","title":"Get: Gets the piston {@link io.wolfscript.api.world.blocks.Block}"}]},"io.wolfscript.event.world.PortalCreate":{"namespace":"io.wolfscript.event.world","title":"PortalCreate","description":"PortalCreate<br/> Contains information about a portal being created","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"PortalCreate","qualifiedname":"io.wolfscript.event.world.PortalCreate","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.position.Position","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"World","modifier":"readonly","args":[],"description":"Get: Constructs a new PortalCreate","doc":{"param":["blocks the {@link Block} set the make up the portal","pos the {@link io.wolfscript.api.world.position.Position} where the portal is started","world the {@link World} the portal is being made in /\n    public PortalCreate(Block[][] blocks, Position pos, World world) {\n        this.blocks = blocks;\n        this.pos = pos;\n        this.world = world;\n    }\n\n    /** Get the set of blocks that are used to create this portal"],"return":["block /\n    public Block[][] getBlockSet() {\n        return blocks;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.position.Position} where the portal is started","position /\n    public Position getPosition() {\n        return this.pos;\n    }\n\n    /** Gets the world the portal will be in","the world"]},"return":"io.wolfscript.api.world.World","scope":"public","title":"Get: Constructs a new PortalCreate"}]},"io.wolfscript.event.world.PortalDestroy":{"namespace":"io.wolfscript.event.world","title":"PortalDestroy","description":"PortalDestroy<br/> Contains information about a portal being destroyed","doc":{"author":["Chris (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"PortalDestroy","qualifiedname":"io.wolfscript.event.world.PortalDestroy","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.Block","io.wolfscript.api.world.position.Position","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"World","modifier":"readonly","args":[],"description":"Get: Constructs a new PortalDestroy","doc":{"param":["blocks the {@link Block} set the make up the portal /\n    public PortalDestroy(Block[][] blocks, Position pos, World world) {\n        this.blocks = blocks;\n        this.pos = pos;\n        this.world = world;\n    }\n\n    /** Get the set of blocks that make up the Portal"],"return":["block /\n    public Block[][] getBlockSet() {\n        return blocks;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.position.Position} where the portal is being destroyed","position /\n    public Position getPosition() {\n        return this.pos;\n    }\n\n    /** Gets the world the portal was","the world"]},"return":"io.wolfscript.api.world.World","scope":"public","title":"Get: Constructs a new PortalDestroy"}]},"io.wolfscript.event.world.RedstoneChange":{"namespace":"io.wolfscript.event.world","title":"RedstoneChange hook. Contains information about power flowing from one block to another","description":"RedstoneChange hook. Contains information about power flowing from one block to another","doc":{"author":["Chris (damagefilter)"]},"name":"RedstoneChange","qualifiedname":"io.wolfscript.event.world.RedstoneChange","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[{"title":"RedstoneChange constructor","description":"RedstoneChange constructor","scope":"public","name":"RedstoneChange","args":[{"name":"source","type":"io.wolfscript.api.world.blocks.Block","description":"source argument"},{"name":"oldLevel","type":"int","description":"oldLevel argument"},{"name":"newLevel","type":"int","description":"newLevel argument"}]}],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"NewLevel","modifier":"readonly","args":[],"description":"Get: Gets the {@link io.wolfscript.api.world.blocks.Block} the redstone is on","doc":{"retur":["n /\n    public Block getSourceBlock() {\n        return sourceBlock;\n    }\n\n    /** Get the power level for the redstone before the change","n /\n    public int getOldLevel() {\n        return oldLevel;\n    }\n\n    /** get the powerlevel for redstone that it would be after the change","n"]},"return":"int","scope":"public","title":"Get: Gets the {@link io.wolfscript.api.world.blocks.Block} the redstone is on"}]},"io.wolfscript.event.world.Smelt":{"namespace":"io.wolfscript.event.world","title":"Smelt","description":"Smelt <p/> Called when a {@link io.wolfscript.api.world.blocks.Furnace} smelts an Item","doc":{"author":["Jason (darkdiplomat)"]},"name":"Smelt","qualifiedname":"io.wolfscript.event.world.Smelt","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.Furnace","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Result","modifier":"readonly","args":[],"description":"Get: Constructs a new Smelt","doc":{"param":["furnace the {@link Furnace} doing the smelting","smelted the {@link Item} that was smelted","result the {@link Item} result /\n    public Smelt(Furnace furnace, Item smelted, Item result) {\n        this.furnace = furnace;\n        this.smelted = smelted;\n        this.result = result;\n    }\n\n    /** Gets the {@link Furnace} doing the smelting"],"return":["the {@link io.wolfscript.api.world.blocks.Furnace} /\n    public Furnace getFurnace() {\n        return furnace;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} that was smelted","the {@link io.wolfscript.api.inventory.Item} smelted /\n    public Item getSmelted() {\n        return smelted;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} result","the {@link io.wolfscript.api.inventory.Item}"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Constructs a new Smelt"}]},"io.wolfscript.event.world.SmeltBegin":{"namespace":"io.wolfscript.event.world","title":"SmeltBegin","description":"SmeltBegin <p/> Called when a {@link io.wolfscript.api.world.blocks.Furnace} begins to smelts an Item","doc":{"author":["Jason (darkdiplomat)"]},"name":"SmeltBegin","qualifiedname":"io.wolfscript.event.world.SmeltBegin","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.inventory.Item","io.wolfscript.api.world.blocks.Furnace","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Smelting","modifier":"readonly","args":[],"description":"Get: Constructs a new Smelt","doc":{"param":["furnace the {@link io.wolfscript.api.world.blocks.Furnace} doing the smelting","smelting the {@link io.wolfscript.api.inventory.Item} being smelted /\n    public SmeltBegin(Furnace furnace, Item smelting) {\n        this.furnace = furnace;\n        this.smelting = smelting;\n    }\n\n    /** Gets the {@link io.wolfscript.api.world.blocks.Furnace} doing the smelting"],"return":["the {@link io.wolfscript.api.world.blocks.Furnace} /\n    public Furnace getFurnace() {\n        return furnace;\n    }\n\n    /** Gets the {@link io.wolfscript.api.inventory.Item} smelting","the {@link io.wolfscript.api.inventory.Item}"]},"return":"io.wolfscript.api.inventory.Item","scope":"public","title":"Get: Constructs a new Smelt"}]},"io.wolfscript.event.world.TimeChange":{"namespace":"io.wolfscript.event.world","title":"Time Change hook","description":"Time Change hook","doc":{"author":["Jason (darkdiplomat)"]},"name":"TimeChange","qualifiedname":"io.wolfscript.event.world.TimeChange","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.hook.CancelableHook"],"properties":[{"name":"Time","modifier":"readonly","args":[],"description":"Get: Constructs a new TimeChange","doc":{"param":["world the {@link World} the time is changing in","time the time being set to /\n    public TimeChange(World world, long time) {\n        this.world = world;\n        this.time = time;\n    }\n\n    /** Gets the {@link World} the time is changing in"],"return":["the {@link io.wolfscript.api.world.World} of the time change /\n    public World getWorld() {\n        return world;\n    }\n\n    /** Gets the time the {@link io.wolfscript.api.world.World} is being set to","time to be set"]},"return":"long","scope":"public","title":"Get: Constructs a new TimeChange"}]},"io.wolfscript.event.world.TreeGrow":{"namespace":"io.wolfscript.event.world","title":"Tree Grow Hook","description":"Tree Grow Hook <p/> Called with a sapling attempts to become a Tree<br> This does not signal that a tree can grow or how it would grow.","doc":{"author":["Jason (darkdiplomat)"]},"name":"TreeGrow","qualifiedname":"io.wolfscript.event.world.TreeGrow","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"Constructs a new TreeGrow","description":"Constructs a new TreeGrow","doc":{"param":["sapling the sapling trying to grow /\n    public TreeGrow(Block sapling) {\n        this.sapling = sapling;\n    }\n\n    /** Gets the sapling trying to grow"],"return":["the sapling /\n    public Block getSapling() {\n        return sapling;\n    }\n\n    /** {@inheritDoc}"]},"scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.api.world.blocks.Block","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.event.world.WeatherChange":{"namespace":"io.wolfscript.event.world","title":"WeatherChange Hook","description":"WeatherChange Hook","doc":{"author":["Jason (darkdiplomat)"]},"name":"WeatherChange","qualifiedname":"io.wolfscript.event.world.WeatherChange","type":"class","scope":"public","describe":"final","extends":["io.wolfscript.hook.CancelableHook"],"constructors":[],"methods":[{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]},{"title":"Constructs a new WeatherChange","description":"Constructs a new WeatherChange","doc":{"param":["world the World where weather is changing","on whether weather is turning on or off","thunder whether or not thunder is changing /\n    public WeatherChange(World world, boolean on, boolean thunder) {\n        this.world = world;\n        this.on = on;\n        this.thunder = thunder;\n    }\n\n    /** Gets the {@link World} of the change"],"return":["the {@link io.wolfscript.api.world.World} the weather is changing /\n    public World getWorld() {\n        return world;\n    }\n\n    /** Checks if it's a thunder change or rain change","{@code true} if thunder is changing; {@code false} if rain is changing /\n    public boolean isThunderChange() {\n        return thunder;\n    }\n\n    /** Checks if weather is turning on or off","{@code true} if turning on; {@code false} if turning off"]},"scope":"public","return":"boolean","name":"turningOn","args":[]}],"imports":["io.wolfscript.api.world.World","io.wolfscript.hook.CancelableHook"],"properties":[]},"io.wolfscript.exceptions.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.exceptions","description":"Classes and interfaces for namespace io.wolfscript.exceptions","name":"exceptions","qualifiedname":"io.wolfscript.exceptions.0","packagename":"io.wolfscript.exceptions","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.exceptions.InvalidInstanceException","io.wolfscript.exceptions.InvalidPluginException","io.wolfscript.exceptions.PluginDependencyException","io.wolfscript.exceptions.PluginLoadFailedException"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.exceptions.InvalidInstanceException":{"namespace":"io.wolfscript.exceptions","title":"Indicates a interface casting is invalid. See message and cause for more information.","description":"Indicates a interface casting is invalid. See message and cause for more information.","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"InvalidInstanceException","qualifiedname":"io.wolfscript.exceptions.InvalidInstanceException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"InvalidInstanceException constructor","description":"InvalidInstanceException constructor","scope":"public","name":"InvalidInstanceException","args":[]},{"title":"InvalidInstanceException constructor","description":"InvalidInstanceException constructor","scope":"public","name":"InvalidInstanceException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"InvalidInstanceException constructor","description":"InvalidInstanceException constructor","scope":"public","name":"InvalidInstanceException","args":[{"name":"message","type":"String","description":"message argument"},{"name":"cause","type":"Throwable","description":"cause argument"}]},{"title":"InvalidInstanceException constructor","description":"InvalidInstanceException constructor","scope":"public","name":"InvalidInstanceException","args":[{"name":"cause","type":"Throwable","description":"cause argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.exceptions.InvalidPluginException":{"namespace":"io.wolfscript.exceptions","title":"Indicates a plugin is invalid. See message and cause for more information.","description":"Indicates a plugin is invalid. See message and cause for more information.","doc":{"author":["Pwoootage"]},"name":"InvalidPluginException","qualifiedname":"io.wolfscript.exceptions.InvalidPluginException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"InvalidPluginException constructor","description":"InvalidPluginException constructor","scope":"public","name":"InvalidPluginException","args":[]},{"title":"InvalidPluginException constructor","description":"InvalidPluginException constructor","scope":"public","name":"InvalidPluginException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"InvalidPluginException constructor","description":"InvalidPluginException constructor","scope":"public","name":"InvalidPluginException","args":[{"name":"message","type":"String","description":"message argument"},{"name":"cause","type":"Throwable","description":"cause argument"}]},{"title":"InvalidPluginException constructor","description":"InvalidPluginException constructor","scope":"public","name":"InvalidPluginException","args":[{"name":"cause","type":"Throwable","description":"cause argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.exceptions.PluginDependencyException":{"namespace":"io.wolfscript.exceptions","title":"Indicates that a plugin is missing some dependencies. See message for more information.","description":"Indicates that a plugin is missing some dependencies. See message for more information.","doc":{"author":["Pwootage"]},"name":"PluginDependencyException","qualifiedname":"io.wolfscript.exceptions.PluginDependencyException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"PluginDependencyException constructor","description":"PluginDependencyException constructor","scope":"public","name":"PluginDependencyException","args":[]},{"title":"PluginDependencyException constructor","description":"PluginDependencyException constructor","scope":"public","name":"PluginDependencyException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"PluginDependencyException constructor","description":"PluginDependencyException constructor","scope":"public","name":"PluginDependencyException","args":[{"name":"message","type":"String","description":"message argument"},{"name":"cause","type":"Throwable","description":"cause argument"}]},{"title":"PluginDependencyException constructor","description":"PluginDependencyException constructor","scope":"public","name":"PluginDependencyException","args":[{"name":"cause","type":"Throwable","description":"cause argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.exceptions.PluginLoadFailedException":{"namespace":"io.wolfscript.exceptions","title":"Indicates that a plugin has failed to load. Look at cause for more information.","description":"Indicates that a plugin has failed to load. Look at cause for more information.","doc":{"author":["Pwootage"]},"name":"PluginLoadFailedException","qualifiedname":"io.wolfscript.exceptions.PluginLoadFailedException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"PluginLoadFailedException constructor","description":"PluginLoadFailedException constructor","scope":"public","name":"PluginLoadFailedException","args":[]},{"title":"PluginLoadFailedException constructor","description":"PluginLoadFailedException constructor","scope":"public","name":"PluginLoadFailedException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"PluginLoadFailedException constructor","description":"PluginLoadFailedException constructor","scope":"public","name":"PluginLoadFailedException","args":[{"name":"message","type":"String","description":"message argument"},{"name":"cause","type":"Throwable","description":"cause argument"}]},{"title":"PluginLoadFailedException constructor","description":"PluginLoadFailedException constructor","scope":"public","name":"PluginLoadFailedException","args":[{"name":"cause","type":"Throwable","description":"cause argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.help.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.help","description":"Classes and interfaces for namespace io.wolfscript.help","name":"help","qualifiedname":"io.wolfscript.help.0","packagename":"io.wolfscript.help","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.help.HelpManager","io.wolfscript.help.HelpNode"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.help.HelpManager":{"namespace":"io.wolfscript.help","title":"class HelpManager","description":"class HelpManager","doc":{"author":["Jos (Jarvix)","Chris (damagefilter)"]},"name":"HelpManager","qualifiedname":"io.wolfscript.help.HelpManager","type":"class","scope":"public","constructors":[{"title":"HelpManager constructor","description":"HelpManager constructor","scope":"public","name":"HelpManager","args":[]}],"methods":[],"imports":["io.wolfscript.Translator","io.wolfscript.api.Server","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommand","io.wolfscript.commandsys.CommandOwner","java.util.ArrayList","java.util.Collections","java.util.Iterator","java.util.List","java.util.Map","java.util.TreeMap"],"properties":[]},"io.wolfscript.help.HelpNode":{"namespace":"io.wolfscript.help","title":"Contains relevant information about a piece of help.","description":"Contains relevant information about a piece of help. One help node contains the localized description of a command, its tooltip, required permissions, keywords (currently unused), parent and a list of sub commands.","doc":{"author":["Chris (damagefilter)","Jarvix"]},"name":"HelpNode","qualifiedname":"io.wolfscript.help.HelpNode","type":"class","scope":"public","constructors":[],"fields":[{"title":"The Plugin (or Server) that has registered this command","description":"The Plugin (or Server) that has registered this command /\n    private CommandOwner plugin;\n    /** A list of names of sub commands","doc":{},"name":"subCommands","scope":"public","type":"String[]"}],"methods":[{"title":"The Plugin (or Server) that has registered this command","description":"The Plugin (or Server) that has registered this command /\n    private CommandOwner plugin;\n    /** A list of names of sub commands /\n    public String[] subCommands;\n\n    private WolfCommand command;\n\n    public HelpNode(CommandOwner owner, WolfCommand command) {\n        this.command = command;\n        this.plugin = owner;\n        this.subCommands = HelpManager.subCommandsToStringArray(command.getSubCommands());\n    }\n\n    /** get the Plugin (or WolfScript instance) that has registered this help","doc":{"retur":["n /\n    public CommandOwner getOwner() {\n        return plugin;\n    }\n\n    /** Gets the first alias (or name) for this command","n /\n    public String getCommand() {\n        return command.meta.aliases()[0];\n    }\n\n    /** Returns a coloured string that displays all command aliases in the specified color","n /\n    public String getPrintableAliases(String color) {\n        StringBuilder str = new StringBuilder(color).append(\"[\");\n        for (String alias : command.meta.aliases()) {\n            str.append(alias).append(\", \");\n        }\n        // Removes the last space and comma\n        str.deleteCharAt(str.length() - 1);\n        str.deleteCharAt(str.length() - 1);\n        str.append(\"]\").append(ChatFormat.WHITE);\n        return str.toString();\n    }\n\n    /** Returns an uncoloured string that displays all command aliases in the specified color","n /\n    public String getPrintableAliases() {\n        StringBuilder str = new StringBuilder().append(\"[\");\n        for (String alias : command.meta.aliases()) {\n            str.append(alias).append(\", \");\n        }\n        // Removes the last space and comma\n        str.deleteCharAt(str.length() - 1);\n        str.deleteCharAt(str.length() - 1);\n        str.append(\"]\");\n        return str.toString();\n    }\n\n    /** Gets the description for this command","n /\n    public String getDescription() {\n        return command.meta.description();\n    }\n\n    /** get the tooltip for this command","n /\n    public String getTooltip() {\n        return command.meta.toolTip();\n    }\n\n    /** get some keywords for this command. Used for looking up help contexts","n /\n    public String[] getKeywords() {\n        return command.meta.searchTerms();\n    }\n\n    /** Get the name of this commands parent command. Returns an empty string if there is no parent","n /\n    public String getParent() {\n        return command.meta.parent();\n    }\n\n    /** Returns true if this is a sub command (parent is not empty)","n /\n    public boolean isSubCommand() {\n        return !command.meta.parent().isEmpty();\n    }\n\n    /** Returns an array of all subcommands for this","n /\n    public String[] getSubCommands() {\n        return subCommands;\n    }\n\n    /** Check if this node has the given alias","n /\n    public boolean hasAlias(String name) {\n        for (String n : command.meta.aliases()) {\n            if (n.equals(name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Checks if a MessageReceiver (Player for instance) can use the command associated with this help node"],"return":["true if player can use this command, false otherwise"]},"scope":"public","return":"boolean","name":"canUse","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]}],"imports":["io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.commandsys.WolfCommand","io.wolfscript.commandsys.CommandOwner"],"properties":[]},"io.wolfscript.hook.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.hook","description":"Classes and interfaces for namespace io.wolfscript.hook","name":"hook","qualifiedname":"io.wolfscript.hook.0","packagename":"io.wolfscript.hook","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.hook.CancelableHook","io.wolfscript.hook.Dispatcher","io.wolfscript.hook.Hook","io.wolfscript.hook.HookConsistencyException","io.wolfscript.hook.HookExecutionException","io.wolfscript.hook.HookExecutor"],"interfaces":["io.wolfscript.hook.HookExecutorInterface"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.hook.CancelableHook":{"namespace":"io.wolfscript.hook","title":"A cancelable hook. The calling chain will be broken once this hook has been","description":"A cancelable hook. The calling chain will be broken once this hook has been set as cancelled and its current state will be returned to the system.","doc":{"author":["Chris (damagefilter)"]},"name":"CancelableHook","qualifiedname":"io.wolfscript.hook.CancelableHook","type":"class","scope":"public","describe":"abstract","extends":["io.wolfscript.hook.Hook"],"constructors":[],"methods":[{"title":"Calls a Hook if not already executed","description":"Calls a Hook if not already executed","doc":{"return":["this"]},"scope":"public","return":"io.wolfscript.hook.CancelableHook","name":"call","args":[]},{"title":"isCanceled method","description":"isCanceled method","scope":"public","return":"boolean","name":"isCanceled","args":[]},{"title":"setCanceled method","description":"setCanceled method","scope":"public","return":"void","name":"setCanceled","args":[]}],"imports":[],"properties":[]},"io.wolfscript.hook.Dispatcher":{"namespace":"io.wolfscript.hook","title":"This class invokes a method on a listener.","description":"This class invokes a method on a listener. It is inline-implemented in HookExecutor.registerHook, for each hook seperately","doc":{"author":["Chris (damagefilter)"]},"name":"Dispatcher","qualifiedname":"io.wolfscript.hook.Dispatcher","type":"class","scope":"public","describe":"abstract","constructors":[],"fields":[{"title":"ignoreCanceled field","description":"ignoreCanceled field","name":"ignoreCanceled","scope":"public","type":"boolean"}],"methods":[{"title":"execute method","description":"execute method","scope":"public","describe":"abstract","return":"void","name":"execute","args":[{"name":"listener","type":"io.wolfscript.plugin.PluginListener","description":"listener argument"},{"name":"hook","type":"io.wolfscript.hook.Hook","description":"hook argument"}]}],"imports":["io.wolfscript.plugin.PluginListener"],"properties":[]},"io.wolfscript.hook.Hook":{"namespace":"io.wolfscript.hook","title":"A basic hook you can implement to create custom hooks. System Hooks also","description":"A basic hook you can implement to create custom hooks. System Hooks also extend this","doc":{"author":["Chris Ksoll","Jason Jones"]},"name":"Hook","qualifiedname":"io.wolfscript.hook.Hook","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[{"title":"Get the name of this hook.","description":"Get the name of this hook.","doc":{"return":["simple class name /\n    public final String getHookName() {\n        return getClass().getSimpleName();\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = getClass().getSimpleName().length();\n\n        return hash getClass().getSimpleName().hashCode() + 2;\n    }\n\n    /** Calls a Hook if not already executed","this"]},"scope":"public","return":"io.wolfscript.hook.Hook","name":"call","args":[]}],"imports":["io.wolfscript.Wolf"],"properties":[]},"io.wolfscript.hook.HookConsistencyException":{"namespace":"io.wolfscript.hook","title":"Thrown when a hook can not be passed to a listener due to the method","description":"Thrown when a hook can not be passed to a listener due to the method signature being inccorect","doc":{"author":["Chris (damagefilter)"]},"name":"HookConsistencyException","qualifiedname":"io.wolfscript.hook.HookConsistencyException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"HookConsistencyException constructor","description":"HookConsistencyException constructor","scope":"public","name":"HookConsistencyException","args":[{"name":"message","type":"String","description":"message argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.hook.HookExecutionException":{"namespace":"io.wolfscript.hook","title":"Thrown when an exception propogates up to the hook dispatcher","description":"Thrown when an exception propogates up to the hook dispatcher The exception is wrapped in this exception","doc":{"author":["Chris (damagefilter)"]},"name":"HookExecutionException","qualifiedname":"io.wolfscript.hook.HookExecutionException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"HookExecutionException constructor","description":"HookExecutionException constructor","scope":"public","name":"HookExecutionException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"HookExecutionException constructor","description":"HookExecutionException constructor","scope":"public","name":"HookExecutionException","args":[{"name":"msg","type":"String","description":"msg argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.hook.HookExecutor":{"namespace":"io.wolfscript.hook","title":"Stores registered listeners and performs hook dispatches.","description":"Stores registered listeners and performs hook dispatches.","doc":{"author":["Chris (damagefilter)","Jos Kuijpers","Yariv Livay"]},"name":"HookExecutor","qualifiedname":"io.wolfscript.hook.HookExecutor","type":"class","scope":"public","implements":["io.wolfscript.hook.HookExecutorInterface"],"constructors":[],"methods":[{"title":"Register a {@link io.wolfscript.plugin.PluginListener} for a system hook","description":"Register a {@link io.wolfscript.plugin.PluginListener} for a system hook /\n    @Override\n    public void registerListener(PluginListener listener, Plugin plugin) {\n        Method[] methods = ToolBox.safeArrayMerge(listener.getClass().getMethods(), listener.getClass().getDeclaredMethods(), new Method[1]);\n        for (final Method method : methods) {\n            // Check if the method is a hook handling method\n            final HookHandler handler = method.getAnnotation(HookHandler.class);\n\n            if (handler == null) {\n                continue; // Next, not one of our things\n            }\n            // Check the parameters for number and type and decide if it's one\n            // that is really a handler method\n            Class<?>[] parameters = method.getParameterTypes();\n\n            if (parameters.length > 1 || parameters.length == 0) {\n                throw new HookConsistencyException(\"Amount of parameters for \" + method.getName() + \" is invalid. Expected 1, was \" + parameters.length);\n            }\n            Class<?> hookCls = parameters[0];\n\n            if (!Hook.class.isAssignableFrom(hookCls)) {\n                throw new HookConsistencyException(\"Hook is not assignable from \" + hookCls.getName());\n            }\n\n            Dispatcher dispatcher = new Dispatcher() {\n\n                @Override\n                public void execute(PluginListener listener, Hook hook) {\n                    try {\n                        method.invoke(listener, hook);\n                    }\n                    catch (Throwable thrown) {\n                        if (thrown.getCause() != null) {\n                            // Skip past wrapper exceptions and cut straight to the point\n                            throw new HookExecutionException(thrown.getCause().getMessage(), thrown.getCause());\n                        }\n                        throw new HookExecutionException(thrown.getMessage(), thrown);\n                    }\n                }\n            };\n            dispatcher.ignoreCanceled = handler.ignoreCanceled();\n\n            registerHook(listener, plugin, hookCls, dispatcher, handler.priority());\n        }\n    }\n\n    /** A more flexible hook interface used internally. Adds flexibility required for Scala hook registration. /\n    public void registerHook(PluginListener listener, Plugin plugin, Class<?> hookCls, Dispatcher dispatcher, Priority priority) {\n        // Caller is assumed to check class (this is an internal API)\n        listeners.put((Class<? extends Hook>)hookCls, new RegisteredPluginListener(listener, plugin, dispatcher, priority));\n        Collections.sort(listeners.get((Class<? extends Hook>)hookCls), listener_comp);\n    }\n\n    /** Unregisters all listeners for specified plugin","scope":"public","return":"void","name":"callHook","args":[{"name":"hook","type":"io.wolfscript.hook.Hook","description":"hook argument"}]},{"title":"compare method","description":"compare method","scope":"public","return":"int","name":"compare","args":[{"name":"o1","type":"io.wolfscript.plugin.RegisteredPluginListener","description":"o1 argument"},{"name":"o2","type":"io.wolfscript.plugin.RegisteredPluginListener","description":"o2 argument"}]}],"imports":["com.google.common.collect.ArrayListMultimap","io.wolfscript.ToolBox","io.wolfscript.plugin.Plugin","io.wolfscript.plugin.PluginListener","io.wolfscript.plugin.Priority","io.wolfscript.plugin.RegisteredPluginListener","java.lang.reflect.Method","java.util.Collections","java.util.Comparator","java.util.Iterator","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.hook.HookExecutorInterface":{"namespace":"io.wolfscript.hook","title":"Interface for a hook executor.","description":"Interface for a hook executor.","doc":{"author":["Chris (damagefilter)"]},"name":"HookExecutorInterface","qualifiedname":"io.wolfscript.hook.HookExecutorInterface","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.plugin.Plugin","io.wolfscript.plugin.PluginListener"],"properties":[]},"io.wolfscript.kit.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.kit","description":"Classes and interfaces for namespace io.wolfscript.kit","name":"kit","qualifiedname":"io.wolfscript.kit.0","packagename":"io.wolfscript.kit","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.kit.Kit","io.wolfscript.kit.KitProvider"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.kit.Kit":{"namespace":"io.wolfscript.kit","title":"Contains information about a kit","description":"Contains information about a kit","doc":{"author":["Chris (damagefilter)"]},"name":"Kit","qualifiedname":"io.wolfscript.kit.Kit","type":"class","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.inventory.Item","io.wolfscript.chat.ChatFormat","java.util.ArrayList","java.util.HashMap","java.util.List","java.util.Map"],"properties":[{"name":"Id","modifier":"writeonly","args":[{"name":"id","type":"int","description":"id argument"}],"description":"Set: Time between uses as unix timestamp applicable number /\n    private int delay;\n\n    /** Owner if applicable /\n    private String[] owners = null;\n\n    /** Groups if applicable /\n    private String[] groups = null;\n\n    /** List of last usages per player /\n    private Map<String, Long> lastUsages = new HashMap<String, Long>();\n\n    private String name;\n\n    /** The content of this kit as IItems Each list entry shall be a different Item /\n    private List<Item> content = new ArrayList<Item>();\n\n    public int getDelay() {\n        return delay;\n    }\n\n    public void setDelay(int delay) {\n        this.delay = delay;\n    }\n\n    public String[] getOwner() {\n        return owners;\n    }\n\n    public void setOwner(String[] owner) {\n        this.owners = owner;\n    }\n\n    public String[] getGroups() {\n        return groups;\n    }\n\n    public void setGroups(String[] groups) {\n        this.groups = groups;\n    }\n\n    public List<Item> getContent() {\n        return content;\n    }\n\n    public void setContent(ArrayList<Item> content) {\n        this.content = content;\n    }\n\n    /** Tests if a given {@link io.wolfscript.api.entity.living.humanoid.Player} can receive this kit","doc":{"return":["{@code true} if can be given; {@code false} if not /\n    public boolean canBeGiven(Player player) {\n        if (owners != null && owners.length > 0) {\n            for (String owner : owners) {\n                if (owner.equals(player.getName())) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        if (groups != null && groups.length > 0) {\n            for (String g : groups) {\n                if (player.getGroup().hasControlOver(Wolf.usersAndGroups().getGroup(g))) {\n                    return true;\n                }\n                else if (player.isInGroup(g, false)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n\n    /** Give this kit to player, if possible","{@code true} if successful; {@code false} if not /\n    public boolean giveKit(Player player, boolean override) {\n        if (override) {\n            apply(player);\n            return true;\n        }\n        Long lastUsed = lastUsages.get(player.getName());\n\n        if (lastUsed == null) {\n            lastUsed = 0L;\n            lastUsages.put(player.getName(), lastUsed);\n        }\n        if (lastUsed + delay < ToolBox.getUnixTimestamp()) {\n            if (canBeGiven(player)) {\n                lastUsages.put(player.getName(), ToolBox.getUnixTimestamp());\n                apply(player);\n                return true;\n            }\n        }\n        else {\n            player.notice(\"You have to wait \" + ChatFormat.GOLD + ToolBox.getTimeUntil(lastUsed, delay) + ChatFormat.RED + \" before using again.\");\n            return false;\n        }\n        return false;\n    }\n\n    private void apply(Player player) {\n        for (Item item : content) {\n            if (item != null) { // Where these null items come from, ill never know\n                item.setSlot(-1);\n                player.giveItem(item);\n            }\n        }\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    /** Mostly used for adding the items into the database"],"retur":["n /\n    public List<String> getItemsAsStringList() {\n        List<String> list = new ArrayList<String>();\n\n        for (Item i : content) {\n            if (i != null) { // Null breaks the serializer... And we don't really need to track null items\n                list.add(Wolf.serialize(i));\n            }\n        }\n        return list;\n    }\n\n    /** Used to create a new item list from data coming from the database","n /\n    public int getId() {\n        return id;\n    }\n\n    /** Only set this if you're 110% sure what you're doing. Changing the ID will not always have an effect. If you want to copy a kit and create a new one, change this kit to your likings, then add it as new to the BackboneKits. A new ID will be auto-assigned then."]},"return":"void","scope":"public","title":"Set: Time between uses as unix timestamp applicable number"}]},"io.wolfscript.kit.KitProvider":{"namespace":"io.wolfscript.kit","title":"Add, remove and get kits","description":"Add, remove and get kits","doc":{"author":["Chris (damagefilter)"]},"name":"KitProvider","qualifiedname":"io.wolfscript.kit.KitProvider","type":"class","scope":"public","constructors":[{"title":"KitProvider constructor","description":"KitProvider constructor","scope":"public","name":"KitProvider","args":[]}],"methods":[{"title":"reload method","description":"reload method","scope":"public","return":"void","name":"reload","args":[]}],"imports":["io.wolfscript.backbone.BackboneKits","java.util.Collections","java.util.List"],"properties":[{"name":"AllKits","modifier":"readonly","args":[],"description":"Get: Add new kit","doc":{"param":["kit /\n    public void addKit(Kit kit) {\n        Kit test = getKit(kit.getName());\n\n        if (test != null) {\n            kits.remove(test);\n        }\n        backbone.addKit(kit);\n        kits.add(kit);\n    }\n\n    /** Remove a kit","kit /\n    public void removeKit(Kit kit) {\n        backbone.removeKit(kit);\n        kits.remove(kit);\n    }\n\n    public void updateKit(Kit kit) {\n        Kit k = getKit(kit.getName());\n\n        if (k != null) {\n            kits.remove(k);\n        }\n        kits.add(kit);\n        backbone.updateKit(kit);\n    }\n\n    /** Returns warp that has the given name or null if not exists","name"],"retur":["n /\n    public Kit getKit(String name) {\n        for (Kit g : kits) {\n            if (g.getName().equals(name)) {\n                return g;\n            }\n        }\n        return null;\n    }\n\n    /** Return all loaded kits as non-modifiable list","n"]},"return":"List<Kit>","scope":"public","title":"Get: Add new kit"}]},"io.wolfscript.logger.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.logger","description":"Classes and interfaces for namespace io.wolfscript.logger","name":"logger","qualifiedname":"io.wolfscript.logger.0","packagename":"io.wolfscript.logger","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.logger.Logman"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.logger.Logman":{"namespace":"io.wolfscript.logger","title":"WolfScript Log manager.","description":"WolfScript Log manager. <p/> You can get an appropriate logger for your plugin here.","doc":{"author":["Chris (damagefilter)","Jos Kuijpers","Jason (darkdiplomat)","Larry1123 Updated to make use of log4j"]},"name":"Logman","qualifiedname":"io.wolfscript.logger.Logman","type":"class","scope":"public","implements":["org.apache.logging.log4j.Logger"],"constructors":[],"fields":[{"title":"NOTICE field","description":"NOTICE field","name":"NOTICE","scope":"public","type":"org.apache.logging.log4j.Marker","describe":"static final"},{"title":"MESSAGE field","description":"MESSAGE field","name":"MESSAGE","scope":"public","type":"org.apache.logging.log4j.Marker","describe":"static final"},{"title":"DERP field","description":"DERP field","name":"DERP","scope":"public","type":"org.apache.logging.log4j.Marker","describe":"static final"},{"title":"PLUGINDEBUG field","description":"PLUGINDEBUG field","name":"PLUGINDEBUG","scope":"public","type":"org.apache.logging.log4j.Marker","describe":"static final"}],"methods":[{"title":"Get a Logman for the name given","description":"Get a Logman for the name given","doc":{"return":["the Logman instance /\n    public static Logman getLogman(String name) {\n        return loggers.containsKey(name) ? loggers.get(name) : new Logman(name);\n    }\n\n    /** Convenience shortcut to System.out.println(). Prints to the output stream on a new line"]},"scope":"public","return":"void","name":"warn","args":[{"name":"message","type":"String","description":"the message to be printed to the console /\n    public static void println(String message) {\n        System.out.println(message);\n    }\n\n    /** Convenience shortcut to System.out.print().<br> Prints to the output stream on the same line"},{"name":"t","type":"Throwable","description":"t argument"}]}],"imports":["org.apache.logging.log4j.Level","org.apache.logging.log4j.LogManager","org.apache.logging.log4j.Logger","org.apache.logging.log4j.Marker","org.apache.logging.log4j.MarkerManager","org.apache.logging.log4j.message.Message","org.apache.logging.log4j.message.MessageFactory","java.util.concurrent.ConcurrentHashMap"],"properties":[]},"io.wolfscript.metrics.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.metrics","description":"Classes and interfaces for namespace io.wolfscript.metrics","name":"metrics","qualifiedname":"io.wolfscript.metrics.0","packagename":"io.wolfscript.metrics","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.metrics.WolfMetrics"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.metrics.WolfMetrics":{"namespace":"io.wolfscript.metrics","title":"Wolf implementation of Metrics","description":"Wolf implementation of Metrics","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"WolfMetrics","qualifiedname":"io.wolfscript.metrics.WolfMetrics","type":"class","scope":"public","describe":"final","extends":["org.mcstats.Metrics"],"constructors":[],"methods":[],"imports":["io.wolfscript.Wolf","org.mcstats.Metrics","java.io.File","java.io.IOException"],"properties":[{"name":"ConfigFile","modifier":"readonly","args":[],"description":"ConfigFile property","return":"java.io.File","scope":"public","title":"ConfigFile property"},{"name":"FullServerVersion","modifier":"readonly","args":[],"describe":"final","description":"FullServerVersion property","return":"String","scope":"public","title":"FullServerVersion property"},{"name":"PlayersOnline","modifier":"readonly","args":[],"describe":"final","description":"PlayersOnline property","return":"int","scope":"public","title":"PlayersOnline property"}]},"io.wolfscript.motd.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.motd","description":"Classes and interfaces for namespace io.wolfscript.motd","name":"motd","qualifiedname":"io.wolfscript.motd.0","packagename":"io.wolfscript.motd","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.motd.MessageOfTheDay","io.wolfscript.motd.WolfMessageOfTheDayListener"],"interfaces":["io.wolfscript.motd.MOTDOwner","io.wolfscript.motd.MessageOfTheDayListener"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.motd.MOTDOwner":{"namespace":"io.wolfscript.motd","title":"Message Of The Day Owner interface<p/>","description":"Message Of The Day Owner interface<p/> Used to associate either the Server or a Plugin as the owner of a MOTDListener","doc":{"author":["Jason (darkdiplomat)"]},"name":"MOTDOwner","qualifiedname":"io.wolfscript.motd.MOTDOwner","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.motd.MessageOfTheDay":{"namespace":"io.wolfscript.motd","title":"Message of the Day container","description":"Message of the Day container <p/> Loads and sends the Message of the Day to a player just joining.","doc":{"author":["Jason (darkdiplomat)"]},"name":"MessageOfTheDay","qualifiedname":"io.wolfscript.motd.MessageOfTheDay","type":"class","scope":"public","constructors":[{"title":"MessageOfTheDay constructor","description":"MessageOfTheDay constructor","scope":"public","name":"MessageOfTheDay","args":[]}],"methods":[{"title":"Sends the MOTD to a {@link io.wolfscript.chat.MessageReceiver}","description":"Sends the MOTD to a {@link io.wolfscript.chat.MessageReceiver}","scope":"public","return":"void","name":"sendMOTD","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"the {@link io.wolfscript.chat.MessageReceiver} who will receive the MOTD"}]}],"imports":["io.wolfscript.chat.MessageReceiver","java.io.File","java.io.FileInputStream","java.io.FileWriter","java.io.IOException","java.io.PrintWriter","java.lang.reflect.Method","java.util.ArrayList","java.util.Collections","java.util.Iterator","java.util.List","java.util.Scanner","java.util.regex.Matcher","java.util.regex.Pattern","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.motd.MessageOfTheDayListener":{"namespace":"io.wolfscript.motd","title":"Plugin Message Of The Day Listener","description":"Plugin Message Of The Day Listener","doc":{"author":["Jason (darkdiplomat)"]},"name":"MessageOfTheDayListener","qualifiedname":"io.wolfscript.motd.MessageOfTheDayListener","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.motd.WolfMessageOfTheDayListener":{"namespace":"io.wolfscript.motd","title":"Wolf Message Of The Day default variables listener","description":"Wolf Message Of The Day default variables listener","doc":{"author":["Jason (darkdiplomat)"]},"name":"WolfMessageOfTheDayListener","qualifiedname":"io.wolfscript.motd.WolfMessageOfTheDayListener","type":"class","scope":"public","describe":"final","implements":["io.wolfscript.motd.MessageOfTheDayListener"],"constructors":[],"methods":[{"title":"worldTimeTotal method","description":"worldTimeTotal method","scope":"public","describe":"final","return":"String","name":"worldTimeTotal","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"lastIP method","description":"lastIP method","scope":"public","describe":"final","return":"String","name":"lastIP","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"group method","description":"group method","scope":"public","describe":"final","return":"String","name":"group","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"uptime method","description":"uptime method","scope":"public","describe":"final","return":"String","name":"uptime","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"playerMax method","description":"playerMax method","scope":"public","describe":"final","return":"String","name":"playerMax","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"lastLogin method","description":"lastLogin method","scope":"public","describe":"final","return":"String","name":"lastLogin","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"playerFirstJoin method","description":"playerFirstJoin method","scope":"public","describe":"final","return":"String","name":"playerFirstJoin","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"playerList method","description":"playerList method","scope":"public","describe":"final","return":"String","name":"playerList","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"playerCount method","description":"playerCount method","scope":"public","describe":"final","return":"String","name":"playerCount","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"playerTimePlayed method","description":"playerTimePlayed method","scope":"public","describe":"final","return":"String","name":"playerTimePlayed","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"receiverName method","description":"receiverName method","scope":"public","describe":"final","return":"String","name":"receiverName","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"tps method","description":"tps method","scope":"public","describe":"final","return":"String","name":"tps","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"world method","description":"world method","scope":"public","describe":"final","return":"String","name":"world","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"worldTimeRaw method","description":"worldTimeRaw method","scope":"public","describe":"final","return":"String","name":"worldTimeRaw","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]},{"title":"worldWeather method","description":"worldWeather method","scope":"public","describe":"final","return":"String","name":"worldWeather","args":[{"name":"msgrec","type":"io.wolfscript.chat.MessageReceiver","description":"msgrec argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.CommandBlockLogic","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.World","io.wolfscript.api.world.blocks.CommandBlock","io.wolfscript.chat.MessageReceiver","net.visualillusionsent.utils.StringUtils","java.lang.management.ManagementFactory"],"properties":[]},"io.wolfscript.permissionsystem.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.permissionsystem","description":"Classes and interfaces for namespace io.wolfscript.permissionsystem","name":"permissionsystem","qualifiedname":"io.wolfscript.permissionsystem.0","packagename":"io.wolfscript.permissionsystem","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.permissionsystem.MultiworldPermissionProvider","io.wolfscript.permissionsystem.PermissionManager","io.wolfscript.permissionsystem.PermissionNode"],"interfaces":["io.wolfscript.permissionsystem.PermissionProvider"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.permissionsystem.MultiworldPermissionProvider":{"namespace":"io.wolfscript.permissionsystem","title":"A PermissionProvider implementation based on PermissionNode objects,","description":"A PermissionProvider implementation based on PermissionNode objects, with multiworld support","doc":{"author":["Chris (damagefilter)"]},"name":"MultiworldPermissionProvider","qualifiedname":"io.wolfscript.permissionsystem.MultiworldPermissionProvider","type":"class","scope":"public","implements":["io.wolfscript.permissionsystem.PermissionProvider"],"constructors":[],"methods":[{"title":"addPermission method","description":"addPermission method","scope":"public","return":"void","name":"addPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"value","type":"boolean","description":"value argument"},{"name":"id","type":"int","description":"id argument"}]},{"title":"addPermission method","description":"addPermission method","scope":"public","return":"void","name":"addPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"value","type":"boolean","description":"value argument"}]},{"title":"flushCache method","description":"flushCache method","scope":"public","return":"void","name":"flushCache","args":[]},{"title":"pathExists method","description":"pathExists method","scope":"public","return":"boolean","name":"pathExists","args":[{"name":"permission","type":"String","description":"permission argument"}]},{"title":"printPermissionsToCaller method","description":"printPermissionsToCaller method","scope":"public","return":"void","name":"printPermissionsToCaller","args":[{"name":"caller","type":"io.wolfscript.chat.MessageReceiver","description":"caller argument"}]},{"title":"queryPermission method","description":"queryPermission method","scope":"public","return":"boolean","name":"queryPermission","args":[{"name":"permission","type":"String","description":"permission argument"}]},{"title":"reload method","description":"reload method","scope":"public","return":"void","name":"reload","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.Translator","io.wolfscript.backbone.PermissionDataAccess","io.wolfscript.chat.ChatFormat","io.wolfscript.chat.MessageReceiver","io.wolfscript.database.DataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","java.util.ArrayList","java.util.HashMap","java.util.Iterator","java.util.List","java.util.Map","java.util.Map.Entry"],"properties":[{"name":"Owner","modifier":"writeonly","args":[{"name":"owner","type":"String","description":"owner argument"}],"description":"Owner property","return":"void","scope":"public","title":"Owner property"},{"name":"Parent","modifier":"readonly","args":[],"description":"Parent property","return":"io.wolfscript.permissionsystem.PermissionProvider","scope":"public","title":"Parent property"},{"name":"PermissionMap","modifier":"readonly","args":[],"description":"PermissionMap property","return":"List<PermissionNode>","scope":"public","title":"PermissionMap property"},{"name":"PermissionsAsStringList","modifier":"readonly","args":[],"description":"PermissionsAsStringList property","return":"List<String>","scope":"public","title":"PermissionsAsStringList property"},{"name":"World","modifier":"readonly","args":[],"description":"World property","return":"String","scope":"public","title":"World property"},{"name":"Type","modifier":"writeonly","args":[{"name":"isPlayerProvider","type":"boolean","description":"isPlayerProvider argument"}],"description":"Type property","return":"void","scope":"public","title":"Type property"}]},"io.wolfscript.permissionsystem.PermissionManager":{"namespace":"io.wolfscript.permissionsystem","title":"This handles the loading of permission providers for groups and players","description":"This handles the loading of permission providers for groups and players","doc":{"author":["Chris (damagefilter)"]},"name":"PermissionManager","qualifiedname":"io.wolfscript.permissionsystem.PermissionManager","type":"class","scope":"public","constructors":[{"title":"PermissionManager constructor","description":"PermissionManager constructor","scope":"public","name":"PermissionManager","args":[]}],"methods":[{"title":"addPermission method","description":"addPermission method","scope":"public","return":"int","name":"addPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"value","type":"boolean","description":"value argument"},{"name":"owner","type":"String","description":"owner argument"},{"name":"type","type":"String","description":"type argument"},{"name":"world","type":"String","description":"world argument"}]},{"title":"Load the permission set for the group with the given name.","description":"Load the permission set for the group with the given name.","doc":{"return":["{@link io.wolfscript.permissionsystem.PermissionProvider} /\n    public PermissionProvider getGroupsProvider(String name, String worldname) {\n        return backbone.loadGroupPermissions(name, worldname);\n    }\n\n    /** Load the permission set for the group with the given name.","{@link io.wolfscript.permissionsystem.PermissionProvider}"]},"scope":"public","return":"io.wolfscript.permissionsystem.PermissionProvider","name":"getPlayerProvider","args":[{"name":"uuid","type":"String","description":"uuid argument"},{"name":"worldname","type":"String","description":"The Fully qualified name of the world to load permissions for"}]},{"title":"removeAllGroupPermissions method","description":"removeAllGroupPermissions method","scope":"public","return":"void","name":"removeAllGroupPermissions","args":[{"name":"group","type":"io.wolfscript.user.Group","description":"group argument"}]},{"title":"removeGroupPermission method","description":"removeGroupPermission method","scope":"public","return":"void","name":"removeGroupPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"group","type":"io.wolfscript.user.Group","description":"group argument"}]},{"title":"removePermissions method","description":"removePermissions method","scope":"public","return":"void","name":"removePermissions","args":[{"name":"path","type":"String","description":"path argument"},{"name":"world","type":"String","description":"world argument"}]},{"title":"removePlayerPermission method","description":"removePlayerPermission method","scope":"public","return":"void","name":"removePlayerPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"player","type":"io.wolfscript.api.PlayerReference","description":"player argument"}]},{"title":"removePlayerPermission method","description":"removePlayerPermission method","scope":"public","return":"void","name":"removePlayerPermission","args":[{"name":"path","type":"String","description":"path argument"},{"name":"player","type":"String","description":"player argument"},{"name":"world","type":"String","description":"world argument"}]},{"title":"savePermissionsFromGroup method","description":"savePermissionsFromGroup method","scope":"public","return":"void","name":"savePermissionsFromGroup","args":[{"name":"g","type":"io.wolfscript.user.Group","description":"g argument"}]},{"title":"savePermissionsFromPlayer method","description":"savePermissionsFromPlayer method","scope":"public","return":"void","name":"savePermissionsFromPlayer","args":[{"name":"p","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"p argument"}]}],"imports":["io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.backbone.BackbonePermissions","io.wolfscript.user.Group"],"properties":[]},"io.wolfscript.permissionsystem.PermissionNode":{"namespace":"io.wolfscript.permissionsystem","title":"A permission node. This represents a permission. Who would have thought","description":"A permission node. This represents a permission. Who would have thought","doc":{"author":["Chris (damagefilter)"]},"name":"PermissionNode","qualifiedname":"io.wolfscript.permissionsystem.PermissionNode","type":"class","scope":"public","constructors":[],"methods":[{"title":"ID in the database","description":"ID in the database /\n    private int id;\n\n    private Map<String, PermissionNode> childs = new HashMap<String, PermissionNode>();\n\n    private PermissionNode parent = null;\n\n    /** Create a new PermissionNode.","doc":{"return":["the id /\n    public int getId() {\n        return id;\n    }\n\n    /** Set the database ID for this Node. <b style=\"color:red\">Do not use this unless you're dead sure what you're doing! it is HIGHLY unlikely that you will need this</b>","the value of this node where true means \"granted\" false means \"denied\" /\n    public boolean getValue() {\n        return value;\n    }\n\n    /** Override the initially given value for this node","the name /\n    public String getName() {\n        return name;\n    }\n\n    /** Returns the full path name for this node starting here, upwards to the first node in the inheritance tree","a string representing the path up to this node /\n    public String getFullPath() {\n        List<PermissionNode> parents = parentsToList();\n        StringBuilder path = new StringBuilder();\n\n        for (int i = parents.size() - 1; i >= 0; i--) {\n            path.append(parents.get(i).name).append(\".\");\n        }\n        path.append(this.name);\n        return path.toString();\n    }\n\n    /** This creates a list of parents starting with this nodes parent, walking the tree upwards to the first, resulting in a reverse parent list. For example if this node was wolf.world.canEnter, the list would be ordered like this: canEnter,world,wolf","list of parents /\n    private List<PermissionNode> parentsToList() {\n        ArrayList<PermissionNode> parents = new ArrayList<PermissionNode>();\n\n        walkParents(parents, this);\n        return parents;\n    }\n\n    private void walkParents(List<PermissionNode> list, PermissionNode node) {\n        if (node.parent == null) {\n            return; // Found topmost permission\n        }\n        list.add(node.parent);\n        walkParents(list, node.parent);\n    }\n\n    /** Get a child node of this node with the given name","an instance of the child node. Might be null if the specified child does not exist /\n    public PermissionNode getChildNode(String child) {\n        return childs.get(child);\n    }\n\n    /** Check if this child node exists already","a map of name=>permissionNode pairs representing this nodes children /\n    public Map<String, PermissionNode> getChilds() {\n        return childs;\n    }\n\n    /** Check if this node has childs","true if this node has children, false otherwise /\n    public boolean hasChilds() {\n        return childs.isEmpty();\n    }\n\n    /** Put the given PermissionNode into the child list of this PermissionNode","true if this is a wildcard node, false otherwise /\n    public boolean isWildcard() {\n        return name.equals(\"*\");\n    }\n\n    @Override\n    public String toString() {\n        return \"Name: \" + name + \" :: Value: \" + value;\n    }\n\n    /** Returns a permission node from a well formatted string.<br> The String should be node.path:value<br> Where value should be true or false. Value is an optional field. It will default to true","true if permission on this path is granted, false otherwise /\n    public boolean resolveToValue(String[] path, int index) {\n        boolean hasWildcardChild = this.hasChildNode(\"*\");\n\n        // If this is denied and it's not a wildcard, exit.\n        // Wildcards specify no direct path thus subsequent nodes may be allowed\n        if (!this.getValue() && !this.isWildcard()) {\n            return false;\n        }\n        // Found final node\n        if (index >= path.length) {\n            return this.getValue();\n        }\n        // Check explicit permission\n        if (this.hasChildNode(path[index])) {\n            return this.getChildNode(path[index]).resolveToValue(path, ++index);\n        }\n        // Check implicit permission via wildcards\n        else if (hasWildcardChild) {\n            return getChildNode(\"*\").getValue();\n        }\n        // Cannot resolve path to the end.\n        // If this is a wildcard, return this value, false otherwise\n        return isWildcard() && this.getValue();\n    }\n\n    /** Purely resolves a path. This can be used to see if any given permission path can be fully resolved. Wildcards are taken into account","true if path can be resolved, false otherwise"],"retur":["n /\n    public boolean hasChildNode(String child) {\n        return childs.containsKey(child);\n    }\n\n    /** Get all childs for this node","n /\n    public static PermissionNode fromString(String in) {\n        String[] split = in.split(\":\");\n        if (split.length == 1) {\n            return new PermissionNode(in, true);\n        }\n        else {\n            return new PermissionNode(split[0], Boolean.valueOf(split[1]));\n        }\n    }\n\n    public void addPath(String[] path, boolean value, int index) {\n        // If we grant a permission on a path, all preceding segments need to become granted.\n        // Conversely, if we deny a specific node, all preceding segments should remain unchanged\n        // as other paths may require them to remain granted.\n\n        // If this nodes value is false but new value is true, grant this node\n        if ((!this.getValue() && value) && !this.isWildcard()) {\n            setValue(true);\n        }\n        if (index >= path.length) {\n            // end\n            return;\n        }\n        if (!hasChildNode(path[index])) {\n            addChildNode(new PermissionNode(path[index], value));\n        }\n        getChildNode(path[index]).addPath(path, value, ++index);\n    }\n\n    /** Resolves a given path of permission names into the resulting value. This resolves the permission"]},"scope":"public","return":"boolean","name":"resolvePath","args":[{"name":"index","type":"int","description":"the current index in the string array"}]}],"imports":["java.util.ArrayList","java.util.HashMap","java.util.List","java.util.Map"],"properties":[]},"io.wolfscript.permissionsystem.PermissionProvider":{"namespace":"io.wolfscript.permissionsystem","title":"Manages and provides permissions. Handles permission queries. The implementing class can","description":"Manages and provides permissions. Handles permission queries. The implementing class can and should be instantiated per group and if player has custom permissions set also for that player.","doc":{"author":["Chris (damagefilter)"]},"name":"PermissionProvider","qualifiedname":"io.wolfscript.permissionsystem.PermissionProvider","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.chat.MessageReceiver","java.util.List"],"properties":[]},"io.wolfscript.plugin.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.plugin","description":"Classes and interfaces for namespace io.wolfscript.plugin","name":"plugin","qualifiedname":"io.wolfscript.plugin.0","packagename":"io.wolfscript.plugin","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.plugin.PluginDescriptor","io.wolfscript.plugin.PluginException","io.wolfscript.plugin.PluginLangLoader","io.wolfscript.plugin.RegisteredPluginListener"],"interfaces":["io.wolfscript.plugin.PluginLifecycle","io.wolfscript.plugin.PluginListener","io.wolfscript.plugin.PluginManager"],"enums":["io.wolfscript.plugin.PluginState","io.wolfscript.plugin.Priority"],"namespaces":["io.wolfscript.plugin.dependencies.0","io.wolfscript.plugin.lifecycle.0"],"properties":[]},"io.wolfscript.plugin.PluginDescriptor":{"namespace":"io.wolfscript.plugin","title":"Describes information about a plugin, including meta information and start/stop/load information.","description":"Describes information about a plugin, including meta information and start/stop/load information. It also contains a refrence to the loaded instance of the plugin, should there be one.","doc":{"author":["Pwootage"]},"name":"PluginDescriptor","qualifiedname":"io.wolfscript.plugin.PluginDescriptor","type":"class","scope":"public","constructors":[],"methods":[{"title":"enableEarly method","description":"enableEarly method","scope":"public","return":"boolean","name":"enableEarly","args":[]}],"imports":["io.wolfscript.exceptions.InvalidPluginException","io.wolfscript.plugin.lifecycle.PluginLifecycleFactory","net.visualillusionsent.utils.PropertiesFile","net.visualillusionsent.utils.UtilityException","java.io.File","java.io.IOException","java.util.zip.ZipFile"],"properties":[{"name":"WolfInf","modifier":"readonly","args":[],"description":"WolfInf property","return":"net.visualillusionsent.utils.PropertiesFile","scope":"public","title":"WolfInf property"},{"name":"Author","modifier":"readonly","args":[],"description":"Author property","return":"String","scope":"public","title":"Author property"},{"name":"Version","modifier":"readonly","args":[],"description":"Version property","return":"String","scope":"public","title":"Version property"},{"name":"Path","modifier":"readonly","args":[],"description":"Path property","return":"String","scope":"public","title":"Path property"},{"name":"Language","modifier":"readonly","args":[],"description":"Language property","return":"String","scope":"public","title":"Language property"},{"name":"Name","modifier":"readonly","args":[],"description":"Name property","return":"String","scope":"public","title":"Name property"},{"name":"PluginLifecycle","modifier":"readonly","args":[],"description":"PluginLifecycle property","return":"io.wolfscript.plugin.PluginLifecycle","scope":"public","title":"PluginLifecycle property"},{"name":"Plugin","modifier":"readonly","args":[],"description":"Plugin property","return":"Plugin","scope":"public","title":"Plugin property"},{"name":"Priority","args":[{"name":"priority","type":"int","description":"priority argument"}],"description":"Priority property","return":"int","scope":"public","title":"Priority property"},{"name":"Dependencies","modifier":"readonly","args":[],"description":"Dependencies property","return":"String[]","scope":"public","title":"Dependencies property"},{"name":"CurrentState","modifier":"writeonly","args":[{"name":"state","type":"io.wolfscript.plugin.PluginState","description":"New plugin state"}],"description":"Set: DO NOT CALL THIS METHOD. It is for internal use only.","return":"void","scope":"public","title":"Set: DO NOT CALL THIS METHOD. It is for internal use only."}]},"io.wolfscript.plugin.PluginException":{"namespace":"io.wolfscript.plugin","title":"class PluginException","description":"class PluginException","name":"PluginException","qualifiedname":"io.wolfscript.plugin.PluginException","type":"class","scope":"public","extends":["RuntimeException"],"constructors":[{"title":"PluginException constructor","description":"PluginException constructor","scope":"public","name":"PluginException","args":[{"name":"str","type":"String","description":"str argument"}]},{"title":"PluginException constructor","description":"PluginException constructor","scope":"public","name":"PluginException","args":[{"name":"msg","type":"String","description":"msg argument"},{"name":"t","type":"Throwable","description":"t argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.plugin.PluginLangLoader":{"namespace":"io.wolfscript.plugin","title":"Plugin Language Library Loader","description":"Plugin Language Library Loader","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"PluginLangLoader","qualifiedname":"io.wolfscript.plugin.PluginLangLoader","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"accept method","description":"accept method","scope":"public","return":"boolean","name":"accept","args":[{"name":"file","type":"java.io.File","description":"file argument"}]},{"title":"Scans pluginlangs folder, loads all valid Plugin Language Libraries and registers with {@link io.wolfscript.plugin.lifecycle.PluginLifecycleFactory}","description":"Scans pluginlangs folder, loads all valid Plugin Language Libraries and registers with {@link io.wolfscript.plugin.lifecycle.PluginLifecycleFactory}","doc":{},"scope":"public","describe":"static","return":"void","name":"load","args":[]}],"imports":["com.google.common.collect.Maps","io.wolfscript.Wolf","io.wolfscript.WolfClassLoader","io.wolfscript.plugin.lifecycle.InvalidPluginLifecycleException","io.wolfscript.plugin.lifecycle.PluginLifecycleFactory","net.visualillusionsent.utils.PropertiesFile","net.visualillusionsent.utils.UtilityException","java.io.File","java.io.FileFilter","java.lang.reflect.InvocationTargetException","java.net.MalformedURLException","java.util.Map","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.plugin.PluginLifecycle":{"namespace":"io.wolfscript.plugin","title":"Defines lifecycle methods for a plugin - load, enable, disable. Implemented by individual {@link io.wolfscript.plugin.PluginManager}s","description":"Defines lifecycle methods for a plugin - load, enable, disable. Implemented by individual {@link io.wolfscript.plugin.PluginManager}s","doc":{"author":["Pwootage"]},"name":"PluginLifecycle","qualifiedname":"io.wolfscript.plugin.PluginLifecycle","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.exceptions.PluginLoadFailedException"],"properties":[]},"io.wolfscript.plugin.PluginListener":{"namespace":"io.wolfscript.plugin","title":"Plugin listener. Plugins can implement this to listen to specific events","description":"Plugin listener. Plugins can implement this to listen to specific events","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"PluginListener","qualifiedname":"io.wolfscript.plugin.PluginListener","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.plugin.PluginManager":{"namespace":"io.wolfscript.plugin","title":"Main interface for the Wolf Plugin Manager - responsible for enabling/disabling/loading plugins.","description":"Main interface for the Wolf Plugin Manager - responsible for enabling/disabling/loading plugins.","doc":{"author":["Pwootage"]},"name":"PluginManager","qualifiedname":"io.wolfscript.plugin.PluginManager","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.exceptions.InvalidPluginException","io.wolfscript.exceptions.PluginLoadFailedException","org.apache.logging.log4j.Logger","java.util.Collection"],"properties":[]},"io.wolfscript.plugin.PluginState":{"namespace":"io.wolfscript.plugin","title":"Indicates a plugin's current state.","description":"Indicates a plugin's current state.","doc":{"author":["Pwootage"]},"name":"PluginState","qualifiedname":"io.wolfscript.plugin.PluginState","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"ENABLED","value":"","title":"Indicates the plugin is known, but not yet loaded","description":"Indicates the plugin is known, but not yet loaded /\n    KNOWN,\n    /** Indicates the plugin is loaded and enabled","doc":{}}],"properties":[]},"io.wolfscript.plugin.Priority":{"namespace":"io.wolfscript.plugin","title":"The Plugin Priority or \"Execution order\"","description":"The Plugin Priority or \"Execution order\"","doc":{"author":["Chris (damagefilter)"]},"name":"Priority","qualifiedname":"io.wolfscript.plugin.Priority","type":"enum","scope":"public","constructors":[],"methods":[],"imports":[],"enum":[{"code":"CRITICAL","value":"900","title":"For Plugins that monitor actions but do not interfere","description":"For Plugins that monitor actions but do not interfere /\n    PASSIVE(100),\n    /** Low level stuff like process player walking etc. /\n    LOW(300),\n    /** Preferred Priority. This is the usual thing for blocking/altering actions /\n    NORMAL(500),\n    /** Executed after critical. /\n    HIGH(700),\n    /** Extremely critical. Will be executed as the very first Plugin.","doc":{}}],"properties":[{"name":"PriorityValue","modifier":"readonly","args":[],"description":"PriorityValue property","return":"int","scope":"public","title":"PriorityValue property"}]},"io.wolfscript.plugin.RegisteredPluginListener":{"namespace":"io.wolfscript.plugin","title":"Container for registered plugin listeners","description":"Container for registered plugin listeners","doc":{"author":["Chris (damagefilter)"]},"name":"RegisteredPluginListener","qualifiedname":"io.wolfscript.plugin.RegisteredPluginListener","type":"class","scope":"public","constructors":[{"title":"RegisteredPluginListener constructor","description":"RegisteredPluginListener constructor","scope":"public","name":"RegisteredPluginListener","args":[{"name":"l","type":"io.wolfscript.plugin.PluginListener","description":"l argument"},{"name":"plugin","type":"Plugin","description":"plugin argument"},{"name":"executor","type":"io.wolfscript.hook.Dispatcher","description":"executor argument"},{"name":"priority","type":"io.wolfscript.plugin.Priority","description":"priority argument"}]}],"methods":[{"title":"Execute the event on the listener registered","description":"Execute the event on the listener registered","scope":"public","return":"void","name":"execute","args":[{"name":"hook","type":"io.wolfscript.hook.Hook","description":"hook argument"}]}],"imports":["io.wolfscript.hook.CancelableHook","io.wolfscript.hook.Dispatcher","io.wolfscript.hook.Hook"],"properties":[{"name":"Listener","modifier":"readonly","args":[],"description":"Listener property","return":"io.wolfscript.plugin.PluginListener","scope":"public","title":"Listener property"},{"name":"MethodPriority","modifier":"readonly","args":[],"description":"MethodPriority property","return":"io.wolfscript.plugin.Priority","scope":"public","title":"MethodPriority property"},{"name":"Plugin","modifier":"readonly","args":[],"description":"Plugin property","return":"Plugin","scope":"public","title":"Plugin property"},{"name":"PluginPriority","modifier":"readonly","args":[],"description":"PluginPriority property","return":"int","scope":"public","title":"PluginPriority property"}]},"io.wolfscript.plugin.dependencies.0":{"namespace":"io.wolfscript.plugin","title":"Classes and interfaces for namespace io.wolfscript.plugin.dependencies","description":"Classes and interfaces for namespace io.wolfscript.plugin.dependencies","name":"dependencies","qualifiedname":"io.wolfscript.plugin.dependencies.0","packagename":"io.wolfscript.plugin.dependencies","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.plugin.dependencies.DependencyGraph"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.plugin.dependencies.DependencyGraph":{"namespace":"io.wolfscript.plugin.dependencies","title":"Basic plugin dependency graph. Can look up forward and reverse dependencies.","description":"Basic plugin dependency graph. Can look up forward and reverse dependencies.","doc":{"author":["Pwootage"]},"name":"DependencyGraph","qualifiedname":"io.wolfscript.plugin.dependencies.DependencyGraph","type":"class","scope":"public","constructors":[{"title":"DependencyGraph constructor","description":"DependencyGraph constructor","scope":"public","name":"DependencyGraph","args":[]}],"methods":[{"title":"addDependencies method","description":"addDependencies method","scope":"public","return":"void","name":"addDependencies","args":[{"name":"from","type":"String","description":"from argument"}]},{"title":"addEdge method","description":"addEdge method","scope":"public","return":"void","name":"addEdge","args":[{"name":"from","type":"String","description":"from argument"},{"name":"to","type":"String","description":"to argument"}]},{"title":"getDependants method","description":"getDependants method","scope":"public","return":"Set<String>","name":"getDependants","args":[{"name":"node","type":"String","description":"node argument"}]},{"title":"getDependencies method","description":"getDependencies method","scope":"public","return":"Set<String>","name":"getDependencies","args":[{"name":"node","type":"String","description":"node argument"}]},{"title":"removeNode method","description":"removeNode method","scope":"public","return":"void","name":"removeNode","args":[{"name":"node","type":"String","description":"node argument"}]}],"imports":["java.util.Collections","java.util.HashSet","java.util.LinkedHashMap","java.util.Map","java.util.Set"],"properties":[]},"io.wolfscript.plugin.lifecycle.0":{"namespace":"io.wolfscript.plugin","title":"Classes and interfaces for namespace io.wolfscript.plugin.lifecycle","description":"Classes and interfaces for namespace io.wolfscript.plugin.lifecycle","name":"lifecycle","qualifiedname":"io.wolfscript.plugin.lifecycle.0","packagename":"io.wolfscript.plugin.lifecycle","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.plugin.lifecycle.InvalidPluginLifecycleException","io.wolfscript.plugin.lifecycle.JavaPluginLifecycle","io.wolfscript.plugin.lifecycle.PluginLifecycleBase","io.wolfscript.plugin.lifecycle.PluginLifecycleFactory"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.plugin.lifecycle.InvalidPluginLifecycleException":{"namespace":"io.wolfscript.plugin.lifecycle","title":"Indicates a plugin lifecycle is invalid. See message and cause for more information.","description":"Indicates a plugin lifecycle is invalid. See message and cause for more information.","doc":{"author":["Jason (darkdiplomat)"]},"name":"InvalidPluginLifecycleException","qualifiedname":"io.wolfscript.plugin.lifecycle.InvalidPluginLifecycleException","type":"class","scope":"public","extends":["Exception"],"constructors":[{"title":"InvalidPluginLifecycleException constructor","description":"InvalidPluginLifecycleException constructor","scope":"public","name":"InvalidPluginLifecycleException","args":[]},{"title":"InvalidPluginLifecycleException constructor","description":"InvalidPluginLifecycleException constructor","scope":"public","name":"InvalidPluginLifecycleException","args":[{"name":"message","type":"String","description":"message argument"}]},{"title":"InvalidPluginLifecycleException constructor","description":"InvalidPluginLifecycleException constructor","scope":"public","name":"InvalidPluginLifecycleException","args":[{"name":"message","type":"String","description":"message argument"},{"name":"cause","type":"Throwable","description":"cause argument"}]},{"title":"InvalidPluginLifecycleException constructor","description":"InvalidPluginLifecycleException constructor","scope":"public","name":"InvalidPluginLifecycleException","args":[{"name":"cause","type":"Throwable","description":"cause argument"}]}],"methods":[],"imports":[],"properties":[]},"io.wolfscript.plugin.lifecycle.JavaPluginLifecycle":{"namespace":"io.wolfscript.plugin.lifecycle","title":"Lifecycle manager for a java plugin","description":"Lifecycle manager for a java plugin","doc":{"author":["Pwootage"]},"name":"JavaPluginLifecycle","qualifiedname":"io.wolfscript.plugin.lifecycle.JavaPluginLifecycle","type":"class","scope":"public","extends":["io.wolfscript.plugin.lifecycle.PluginLifecycleBase"],"constructors":[{"title":"JavaPluginLifecycle constructor","description":"JavaPluginLifecycle constructor","scope":"public","name":"JavaPluginLifecycle","args":[{"name":"desc","type":"io.wolfscript.plugin.PluginDescriptor","description":"desc argument"}]}],"methods":[],"imports":["io.wolfscript.WolfClassLoader","io.wolfscript.exceptions.PluginLoadFailedException","io.wolfscript.plugin.Plugin","io.wolfscript.plugin.PluginDescriptor","java.io.File"],"properties":[]},"io.wolfscript.plugin.lifecycle.PluginLifecycleBase":{"namespace":"io.wolfscript.plugin.lifecycle","title":"Base class for plugin lifecycles","description":"Base class for plugin lifecycles","doc":{"author":["Pwootage"]},"name":"PluginLifecycleBase","qualifiedname":"io.wolfscript.plugin.lifecycle.PluginLifecycleBase","type":"class","scope":"public","describe":"abstract","implements":["io.wolfscript.plugin.PluginLifecycle"],"constructors":[{"title":"PluginLifecycleBase constructor","description":"PluginLifecycleBase constructor","scope":"public","name":"PluginLifecycleBase","args":[{"name":"desc","type":"io.wolfscript.plugin.PluginDescriptor","description":"desc argument"}]}],"methods":[{"title":"{@inheritDoc}","description":"{@inheritDoc} /\n    public boolean enable() {\n        if (desc.getCurrentState() == PluginState.ENABLED) {\n            return true;\n        }\n        if (desc.getCurrentState() == PluginState.DISABLED) {\n            boolean en = desc.getPlugin().enable();\n            if (en) {\n                desc.setCurrentState(PluginState.ENABLED);\n            }\n            return en;\n        }\n        return false;\n    }\n\n    /** {@inheritDoc} /\n    public boolean disable() {\n        if (desc.getCurrentState() == PluginState.DISABLED) {\n            return true;\n        }\n        if (desc.getCurrentState() == PluginState.ENABLED) {\n            desc.getPlugin().disable();\n            desc.setCurrentState(PluginState.DISABLED);\n            Plugin p = desc.getPlugin();\n            Wolf.hooks().unregisterPluginListeners(p);\n            Wolf.commands().unregisterCommands(p);\n            Wolf.motd().unregisterMOTDListener(p);\n            PlayerInformation.removeInfoAdditions(p);\n            ServerTaskManager.removeTasks(p);\n            return true;\n        }\n        return false;\n    }\n\n    /** Implement this method in order to do actual loading. Be sure to set the plugin object in {@link io.wolfscript.plugin.lifecycle.PluginLifecycleBase#desc} /\n    protected abstract void _load() throws PluginLoadFailedException;\n\n    /** {@inheritDoc} /\n    public Plugin load() throws PluginLoadFailedException {\n        unload();\n        _load();\n        desc.setCurrentState(PluginState.DISABLED);\n        return desc.getPlugin();\n    }\n\n    /** Implement this method in order to do specific unloading code /\n    protected abstract void _unload();\n\n    /** {@inheritDoc}","doc":{},"scope":"public","return":"void","name":"unload","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.commandsys.commands.system.PlayerInformation","io.wolfscript.exceptions.PluginLoadFailedException","io.wolfscript.plugin.Plugin","io.wolfscript.plugin.PluginDescriptor","io.wolfscript.plugin.PluginLifecycle","io.wolfscript.plugin.PluginState","io.wolfscript.tasks.ServerTaskManager"],"properties":[]},"io.wolfscript.plugin.lifecycle.PluginLifecycleFactory":{"namespace":"io.wolfscript.plugin.lifecycle","title":"Factory to create {@link io.wolfscript.plugin.PluginLifecycle} instances based on Wolf.inf","description":"Factory to create {@link io.wolfscript.plugin.PluginLifecycle} instances based on Wolf.inf (inside a {@link io.wolfscript.plugin.PluginDescriptor}","doc":{"author":["Pwootage","Jason (darkdiplomat)"]},"name":"PluginLifecycleFactory","qualifiedname":"io.wolfscript.plugin.lifecycle.PluginLifecycleFactory","type":"class","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.collect.Maps","io.wolfscript.Wolf","io.wolfscript.exceptions.InvalidPluginException","io.wolfscript.plugin.PluginDescriptor","io.wolfscript.plugin.PluginLifecycle","java.util.HashMap"],"properties":[]},"io.wolfscript.serialize.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.serialize","description":"Classes and interfaces for namespace io.wolfscript.serialize","name":"serialize","qualifiedname":"io.wolfscript.serialize.0","packagename":"io.wolfscript.serialize","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.serialize.Serializer"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.serialize.Serializer":{"namespace":"io.wolfscript.serialize","title":"Generic serializer interface","description":"Generic serializer interface","doc":{"author":["Chris (damagefilter)"]},"name":"Serializer","qualifiedname":"io.wolfscript.serialize.Serializer","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["io.wolfscript.WolfDeserializeException"],"properties":[]},"io.wolfscript.tasks.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.tasks","description":"Classes and interfaces for namespace io.wolfscript.tasks","name":"tasks","qualifiedname":"io.wolfscript.tasks.0","packagename":"io.wolfscript.tasks","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.tasks.ServerTask","io.wolfscript.tasks.ServerTaskManager"],"interfaces":["io.wolfscript.tasks.TaskOwner"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.tasks.ServerTask":{"namespace":"io.wolfscript.tasks","title":"Server Task","description":"Server Task <p/> Extend this class to add synchronized tasks to the Server queue.<br> Task are set to execute along with the Server's main thread.<br> Exact timing is not guaranteed, and based on how often the Server ticks.","doc":{"author":["Jason (darkdiplomat)"],"see":["ServerTaskManager"]},"name":"ServerTask","qualifiedname":"io.wolfscript.tasks.ServerTask","type":"class","scope":"public","describe":"abstract","constructors":[],"methods":[],"imports":["io.wolfscript.plugin.Plugin"],"properties":[]},"io.wolfscript.tasks.ServerTaskManager":{"namespace":"io.wolfscript.tasks","title":"Server Task Manager","description":"Server Task Manager <p/> The Manager for {@link io.wolfscript.tasks.ServerTask}<br> If an exception occurs while running a task, it gets removed from the queue, regardless of continuous status","doc":{"author":["Jason (darkdiplomat)"]},"name":"ServerTaskManager","qualifiedname":"io.wolfscript.tasks.ServerTaskManager","type":"class","scope":"public","describe":"final","constructors":[],"methods":[{"title":"Adds a {@link io.wolfscript.tasks.ServerTask} to the queue","description":"Adds a {@link io.wolfscript.tasks.ServerTask} to the queue","doc":{"param":["task the {@link ServerTask} to be added","task the {@link ServerTask} to be removed","owner the {@link TaskOwner} to remove tasks for /\n    public static void removeTasks(TaskOwner owner) {\n        synchronized ($.tasks) {\n            Iterator<Entry<ServerTask, TaskOwner>> taskIter = $.tasks.entrySet().iterator();\n            while (taskIter.hasNext()) {\n                if (taskIter.next().getValue().equals(owner)) {\n                    taskIter.remove();\n                }\n            }\n        }\n    }\n\n    /** Internal method called to run the tasks or decrease timers."],"return":["{@code true} if successfully added; {@code false} if not /\n    public static boolean addTask(ServerTask task) {\n        synchronized ($.tasks) {\n            $.tasks.put(task, task.getOwner());\n            return true;\n        }\n    }\n\n    /** Removes a {@link io.wolfscript.tasks.ServerTask} from the queue<br> When a {@link io.wolfscript.plugin.Plugin} is disabled, it should remove it's tasks from the queue","{@code true} if removed; {@code false} if not found or unable to be removed /\n    public static boolean removeTask(ServerTask task) {\n        synchronized ($.tasks) {\n            return $.tasks.remove(task) != null;\n        }\n    }\n\n    /** Removes all the tasks for a specified {@link io.wolfscript.tasks.TaskOwner}"]},"scope":"public","describe":"static","return":"void","name":"runTasks","args":[]}],"imports":["io.wolfscript.plugin.Plugin","java.util.Iterator","java.util.Map.Entry","java.util.concurrent.ConcurrentHashMap","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.tasks.TaskOwner":{"namespace":"io.wolfscript.tasks","title":"Interface for defining a {@link io.wolfscript.tasks.ServerTask} owner","description":"Interface for defining a {@link io.wolfscript.tasks.ServerTask} owner <p/> Has no other use outside of the {@link io.wolfscript.tasks.ServerTask}","doc":{"author":["Jason (darkdiplomat)"]},"name":"TaskOwner","qualifiedname":"io.wolfscript.tasks.TaskOwner","type":"interface","scope":"public","constructors":[],"methods":[],"imports":[],"properties":[]},"io.wolfscript.user.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.user","description":"Classes and interfaces for namespace io.wolfscript.user","name":"user","qualifiedname":"io.wolfscript.user.0","packagename":"io.wolfscript.user","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.user.Group","io.wolfscript.user.OperatorsProvider","io.wolfscript.user.ReservelistProvider","io.wolfscript.user.UserAndGroupsProvider","io.wolfscript.user.WhitelistProvider"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.user.Group":{"namespace":"io.wolfscript.user","title":"Represents a player group","description":"Represents a player group","doc":{"author":["Chris (damagefilter)"]},"name":"Group","qualifiedname":"io.wolfscript.user.Group","type":"class","scope":"public","constructors":[],"methods":[{"title":"ID for retrieving permissions from the database","description":"ID for retrieving permissions from the database /\n    private int id;\n\n    /** Group Name /\n    private String name;\n\n    /** Group Prefix/Color /\n    private String prefix = null;\n\n    /** The fully qualified world name valid for this group. If this group is valid for all worlds, this may be null /\n    private String worldName = null;\n\n    /** The permission provider for querying permissions etc. /\n    private PermissionProvider permissions;\n\n    /** List of groups this group inherits/has control over /\n    private List<Group> childGroups = new ArrayList<Group>();\n\n    /** The parent group (the group this group is a child of). Parents have control over their childs /\n    private Group parent = null;\n\n    /** Is true if it's the default group /\n    private boolean defaultGroup = false;\n\n    /** Check if this group can ignore restrictions","doc":{"return":["{@code true} if can Ignore Restrictions /\n    public boolean canIgnorerestrictions() {\n        return hasPermission(\"wolf.super.ignoreRestrictions\");\n    }\n\n    /** Check if this group is an administrative groups","{@code true} if administrator group /\n    public boolean isAdministratorGroup() {\n        return hasPermission(\"wolf.super.administrator\");\n    }\n\n    /** Checks if this group can build","{@code true} if can build /\n    public boolean canBuild() {\n        return hasPermission(\"wolf.world.build\");\n    }\n\n    /** Check if this group has control over the given group, specifically, check if the given group is a child of this group, or if this group is admin.<br>","{@code true} if has control over /\n    public boolean hasControlOver(Group g) {\n        if (isAdministratorGroup()) {\n            return true;\n        }\n        if (this.name.equals(g.name)) {\n            return true;\n        }\n        for (Group gr : g.childsToList()) {\n            if (gr.name.equals(this.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Checks in this group and its's parent (and the parent of the parent etc etc) if it has permission and if the value is true. The first found \"true\" will be returned, false if there was no \"true\" or the node had false as value (ie. this group does not have this permission)","{@code true} if has permission /\n    public boolean hasPermission(String permission) {\n        // NOTE: to whoever comes by and thinks, hey a permission check hook is missing:\n        // Permission check hooks are fired in all MessageReceivers.\n        // Doing it here too would fire a hook for the same request twice.\n        if (permissions.pathExists(permission)) {\n            return permissions.queryPermission(permission);\n        }\n        // if(permissions.queryPermission(permission)) {\n        // return true;\n        // }\n\n        for (Group g : parentsToList()) {\n            if (g.permissions.pathExists(permission)) {\n                return g.permissions.queryPermission(permission);\n            }\n        }\n        return false;\n    }\n\n    /** Returns all the children groups","the list of children groups /\n    public List<Group> childsToList() {\n        List<Group> list = new ArrayList<Group>();\n\n        walkChilds(list, this);\n        return list;\n    }\n\n    /** Returns all the parents from this group upwards","the list of parent groups /\n    public List<Group> parentsToList() {\n        List<Group> parents = new ArrayList<Group>();\n        if (this.parent == null || this.parent == this) {\n            return parents;\n        }\n        if (!parents.contains(this.parent)) {\n            parents.add(this.parent);\n        }\n        walkParents(parents, this.parent);\n        return parents;\n    }\n\n    private void walkParents(List<Group> list, Group group) {\n        if (group.parent == null) {\n            return; // Found topmost group\n        }\n        list.add(group.parent);\n        walkParents(list, group.parent);\n    }\n\n    private void walkChilds(List<Group> list, Group group) {\n        list.add(group);\n        for (Group g : group.childGroups) {\n            walkChilds(list, g);\n        }\n    }\n\n    /** Gets the prefix of the Group","the prefix /\n    public String getPrefix() {\n        return prefix != null ? prefix : ChatFormat.WHITE.toString();\n    }\n\n    /** Sets the prefix of the Group","the worldName fully qualified name for a world /\n    public String getWorldName() {\n        return worldName;\n    }\n\n    /**","{@code true} if global; {@code false} if not /\n    public boolean isGlobal() {\n        return this.worldName == null;\n    }\n\n    /** Creates a {@link io.wolfscript.backbone.GroupDataAccess} of this Group","{@link io.wolfscript.backbone.GroupDataAccess}"],"param":["g the group to check control of","prefix the prefix to set /\n    public void setPrefix(String prefix) {\n        this.prefix = prefix;\n    }\n\n    public boolean isDefaultGroup() {\n        return defaultGroup;\n    }\n\n    public void setDefaultGroup(boolean defaultGroup) {\n        this.defaultGroup = defaultGroup;\n    }\n\n    public PermissionProvider getPermissionProvider() {\n        return permissions;\n    }\n\n    public void setPermissionProvider(PermissionProvider provider) {\n        this.permissions = provider;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public boolean hasParent() {\n        return parent != null;\n    }\n\n    public Group getParent() {\n        return parent;\n    }\n\n    /** Set a new parent. This will remove the group from its old parent and add it to the new parents childs list","group /\n    public void setParent(Group group) {\n        if (parent != null) {\n            parent.detachChild(this);\n        }\n\n        if (group != null) {\n            group.addChild(this);\n        }\n        parent = group;\n    }\n\n    public void addChild(Group g) {\n        childGroups.add(g);\n    }\n\n    public void detachChild(Group g) {\n        childGroups.remove(g);\n    }\n\n    /** Return am live list of children. Modify this list only if you know what you're doing. For changing group inheritance use setParent();","worldName the worldName to set /\n    public void setWorldName(String worldName) {\n        if (this.parent != null) {\n            if (this.parent.getWorldName() != null && !this.parent.getWorldName().equals(worldName)) {\n                return; //TODO: Throw exception?\n            }\n        }\n        this.worldName = worldName;\n        for (Group g : childGroups) {\n            g.setWorldName(worldName);\n        }\n    }\n\n    /** Checks if this group is applied globally (not assigned to a specific world)"],"retur":["n /\n    public List<Group> getChildren() {\n        return childGroups;\n    }\n\n    /**"]},"scope":"public","return":"io.wolfscript.backbone.GroupDataAccess","name":"toDataAccess","args":[]}],"imports":["io.wolfscript.backbone.GroupDataAccess","io.wolfscript.chat.ChatFormat","io.wolfscript.permissionsystem.PermissionProvider","java.util.ArrayList","java.util.List"],"properties":[]},"io.wolfscript.user.OperatorsProvider":{"namespace":"io.wolfscript.user","title":"Access to the backbone for operators","description":"Access to the backbone for operators","doc":{"author":["Jason (darkdiplomat)"]},"name":"OperatorsProvider","qualifiedname":"io.wolfscript.user.OperatorsProvider","type":"class","scope":"public","constructors":[{"title":"OperatorsProvider constructor","description":"OperatorsProvider constructor","scope":"public","name":"OperatorsProvider","args":[]}],"methods":[],"imports":["io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.backbone.BackboneOperators","java.io.BufferedReader","java.io.File","java.io.FileNotFoundException","java.io.FileReader","java.io.FileWriter","java.io.IOException","java.io.PrintWriter","java.util.List","io.wolfscript.Wolf.log"],"properties":[{"name":"Ops","modifier":"readonly","args":[],"description":"Get: Reload the ops from database /\n    public void reload() {\n        ops = backboneOps.loadOps();\n        readOpsCfg();\n    }\n\n    /** Reads the config/ops.cfg file if it exists and updates the database with the names found in it. /\n    private void readOpsCfg() {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(new File(\"config/ops.cfg\")));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (line.startsWith(\"#\")) {\n                    continue;\n                }\n                if (!isOpped(line)) {\n                    addPlayer(line);\n                }\n            }\n        }\n        catch (FileNotFoundException e) {\n            log.info(\"Could not find config/ops.cfg. Creating one for you...\");\n            File f = new File(\"config/ops.cfg\");\n            try {\n                if (f.createNewFile()) {\n                    PrintWriter pwriter = new PrintWriter(new FileWriter(f));\n                    pwriter.println(\"# Note: This file is not guaranteed to be synchronous with the actual ops list in database.\");\n                    pwriter.println(\"# However, you may use it to quickly add new operators as you please.\");\n                    pwriter.println(\"# Any duplicate entries will be taken care of so don't worry.\");\n                    pwriter.println(\"# Lines starting with # are comments ;)\");\n                    pwriter.println(\"# Add one name to each line.\");\n                    pwriter.close();\n                    log.info(\"You can now add ops to config/ops.cfg (one per line!). We left you a note.\");\n                }\n            }\n            catch (IOException e1) {\n                log.error(\"Failed to write config/ops.cfg! (Probably no write-access!)\", e);\n            }\n        }\n        catch (IOException e) {\n            log.error(\"Failed to read from config/ops.cfg!\", e);\n        }\n    }\n\n    /** Check if a given Player name or UUID is opped.","doc":{"param":["nameOrUUID the uuid/name of a player","entry the player uuid/name you want to add /\n    public void addPlayer(String entry) {\n        if (!ops.contains(entry)) {\n            if (!ToolBox.isUUID(entry)) {\n                String uuid = ToolBox.usernameToUUID(entry);\n                if (!ops.contains(uuid)) {\n                    ops.add(uuid);\n                    backboneOps.addOpEntry(uuid);\n                }\n            }\n            else {\n                ops.add(entry);\n                backboneOps.addOpEntry(entry);\n            }\n        }\n    }\n\n    /** Removes the given player from the ops list","entry the player uuid/name you want to remove /\n    public void removePlayer(String entry) {\n        if (ops.contains(entry)) {\n            ops.remove(entry);\n            backboneOps.removeOpEntry(entry);\n        }\n        else if (!ToolBox.isUUID(entry)) {\n            String uuid = ToolBox.usernameToUUID(entry);\n            if (ops.contains(uuid)) {\n                ops.remove(uuid);\n                backboneOps.removeOpEntry(uuid);\n            }\n        }\n    }\n\n    /** gets the current size of the ops list"],"return":["true if player is opped, false otherwise /\n    public boolean isOpped(String nameOrUUID) {\n        // Did UUID get passed?\n        if (ToolBox.isUUID(nameOrUUID)) {\n            return ops.contains(nameOrUUID);\n        }\n        else {\n            return ops.contains(ToolBox.usernameToUUID(nameOrUUID));\n        }\n    }\n\n    public boolean isOpped(PlayerReference playerReference) {\n        if (playerReference != null) {\n            // Lets update to UUID if we can get a UUID\n            if (ops.contains(playerReference.getName())) {\n                if (playerReference.getUUIDString() != null) {\n                    removePlayer(playerReference.getName());\n                    addPlayer(playerReference.getUUIDString());\n                }\n                return true;\n            }\n            // UUID test it is\n            return ops.contains(playerReference.getUUIDString());\n        }\n        return false;\n    }\n\n    /** Adds a new operators entry","the size /\n    public int getSize() {\n        return ops.size();\n    }\n\n    /** Gets an array of all Operators"],"retur":["n"]},"return":"String[]","scope":"public","title":"Get: Reload the ops from database"}]},"io.wolfscript.user.ReservelistProvider":{"namespace":"io.wolfscript.user","title":"Reserve List Provider","description":"Reserve List Provider","doc":{"author":["Jason (darkdiplomat)"]},"name":"ReservelistProvider","qualifiedname":"io.wolfscript.user.ReservelistProvider","type":"class","scope":"public","constructors":[{"title":"ReservelistProvider constructor","description":"ReservelistProvider constructor","scope":"public","name":"ReservelistProvider","args":[]}],"methods":[],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.PlayerReference","io.wolfscript.backbone.BackboneReservelist","java.util.List"],"properties":[{"name":"Reservations","modifier":"readonly","args":[],"description":"Get: Reload the reservelist from database /\n    public void reload() {\n        reservelist = backbonereservelist.loadReservelist();\n    }\n\n    /** Check if a given player is reservelist.","doc":{"param":["nameOrUUID the player's name or UUID to check","name /\n    public void addPlayer(String name) {\n        if (!reservelist.contains(name)) {\n            reservelist.add(name);\n            backbonereservelist.addSlotReservation(name);\n        }\n    }\n\n    /** Removes the given player from the reservelist","name /\n    public void removePlayer(String name) {\n        if (reservelist.contains(name)) {\n            reservelist.remove(name);\n            backbonereservelist.removeReservelistEntry(name);\n        }\n    }\n\n    /** gets the current size of the reservelist"],"return":["{@code true} /\n    public boolean isSlotReserved(String nameOrUUID) {\n        // Did UUID get passed?\n        if (ToolBox.isUUID(nameOrUUID)) {\n            return reservelist.contains(nameOrUUID);\n        }\n        else if (Wolf.getServer() != null) { // Like at start up...\n            // Try to get a UUID reference from a known player\n            return isSlotReserved(Wolf.getServer().matchKnownPlayer(nameOrUUID));\n        }\n        else {\n            return false;\n        }\n    }\n\n    public boolean isSlotReserved(PlayerReference playerReference) {\n        if (playerReference != null) {\n            // Lets update to UUID if we can get a UUID\n            if (reservelist.contains(playerReference.getName())) {\n                if (playerReference.getUUIDString() != null) {\n                    removePlayer(playerReference.getName());\n                    addPlayer(playerReference.getUUIDString());\n                }\n                return true;\n            }\n            // UUID test it is\n            return reservelist.contains(playerReference.getUUIDString());\n        }\n        return false;\n    }\n\n    /** Adds a new whitelist entry"],"retur":["n /\n    public int getSize() {\n        return reservelist.size();\n    }\n\n    /** Gets all reservations","n"]},"return":"String[]","scope":"public","title":"Get: Reload the reservelist from database"}]},"io.wolfscript.user.UserAndGroupsProvider":{"namespace":"io.wolfscript.user","title":"Access to the backbone for users and groups","description":"Access to the backbone for users and groups","doc":{"author":["Chris Ksoll (damagefilter)","Jason Jones (darkdiplomat)"]},"name":"UserAndGroupsProvider","qualifiedname":"io.wolfscript.user.UserAndGroupsProvider","type":"class","scope":"public","constructors":[],"methods":[],"imports":["com.google.common.collect.BiMap","io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.OfflinePlayer","io.wolfscript.api.PlayerReference","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.backbone.BackboneGroups","io.wolfscript.backbone.BackboneUsers","io.wolfscript.backbone.PlayerDataAccess","io.wolfscript.database.Database","io.wolfscript.database.exceptions.DatabaseReadException","java.util.ArrayList","java.util.HashMap","java.util.List","java.util.Map","io.wolfscript.Wolf.log"],"properties":[]},"io.wolfscript.user.WhitelistProvider":{"namespace":"io.wolfscript.user","title":"Access to the backbone for whitelist","description":"Access to the backbone for whitelist","doc":{"author":["Chris (damagefilter)"]},"name":"WhitelistProvider","qualifiedname":"io.wolfscript.user.WhitelistProvider","type":"class","scope":"public","constructors":[{"title":"WhitelistProvider constructor","description":"WhitelistProvider constructor","scope":"public","name":"WhitelistProvider","args":[]}],"methods":[],"imports":["io.wolfscript.ToolBox","io.wolfscript.backbone.BackboneWhitelist","java.util.List"],"properties":[{"name":"Size","modifier":"readonly","args":[],"description":"Get: Reload the whitelist from database /\n    public void reload() {\n        whitelist = backboneWhitelist.loadWhitelist();\n    }\n\n    /** Check if a given player is whitelisted.","doc":{"param":["subject player name or uuid","subject player name or uuid /\n    public void addPlayer(String subject) {\n        String uuid = subject;\n        if (!ToolBox.isUUID(uuid)) {\n            uuid = ToolBox.usernameToUUID(uuid);\n        }\n        if (!whitelist.contains(uuid)) {\n            whitelist.add(uuid);\n            backboneWhitelist.addWhitelistEntry(uuid);\n        }\n    }\n\n    /** Removes the given player from the whitelist","subject player name or uuid /\n    public void removePlayer(String subject) {\n        String uuid = subject;\n        if (!ToolBox.isUUID(uuid)) {\n            uuid = ToolBox.usernameToUUID(uuid);\n        }\n        if (whitelist.contains(uuid)) {\n            whitelist.remove(uuid);\n            backboneWhitelist.removeWhitelistEntry(uuid);\n        }\n    }\n\n    /** gets the current size of the whitelist"],"retur":["n /\n    public boolean isWhitelisted(String subject) {\n        String uuid = subject;\n        if (!ToolBox.isUUID(uuid)) {\n            uuid = ToolBox.usernameToUUID(uuid);\n        }\n        return whitelist.contains(uuid);\n    }\n\n    /** Adds a new whitelist entry","n"]},"return":"int","scope":"public","title":"Get: Reload the whitelist from database"},{"name":"Whitelisted","modifier":"readonly","args":[],"description":"Whitelisted property","return":"String[]","scope":"public","title":"Whitelisted property"}]},"io.wolfscript.util.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.util","description":"Classes and interfaces for namespace io.wolfscript.util","name":"util","qualifiedname":"io.wolfscript.util.0","packagename":"io.wolfscript.util","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":[],"interfaces":["io.wolfscript.util.JsonNBTUtility"],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.util.JsonNBTUtility":{"namespace":"io.wolfscript.util","title":"Json to/from NBT Utility","description":"Json to/from NBT Utility <p/> Instance of this should be retrieved using {@link io.wolfscript.Wolf#jsonNBT()}","doc":{"author":["Jason Jones (darkdiplomat)"]},"name":"JsonNBTUtility","qualifiedname":"io.wolfscript.util.JsonNBTUtility","type":"interface","scope":"public","constructors":[],"methods":[],"imports":["com.mojang.authlib.GameProfile","io.wolfscript.api.nbt.BaseTag","io.wolfscript.api.nbt.CompoundTag"],"properties":[]},"io.wolfscript.warp.0":{"namespace":"io.wolfscript","title":"Classes and interfaces for namespace io.wolfscript.warp","description":"Classes and interfaces for namespace io.wolfscript.warp","name":"warp","qualifiedname":"io.wolfscript.warp.0","packagename":"io.wolfscript.warp","type":"namespace","constructors":[],"methods":[],"imports":[],"classes":["io.wolfscript.warp.Warp","io.wolfscript.warp.WarpProvider"],"interfaces":[],"enums":[],"namespaces":[],"properties":[]},"io.wolfscript.warp.Warp":{"namespace":"io.wolfscript.warp","title":"Contains information regarding warp points","description":"Contains information regarding warp points","doc":{"author":["Chris (damagefilter)","Jason (darkdiplomat)"]},"name":"Warp","qualifiedname":"io.wolfscript.warp.Warp","type":"class","scope":"public","constructors":[],"methods":[{"title":"isOwner method","description":"isOwner method","scope":"public","return":"boolean","name":"isOwner","args":[{"name":"player","type":"io.wolfscript.api.entity.living.humanoid.Player","description":"player argument"}]},{"title":"Set up a group specific warp","description":"Set up a group specific warp","doc":{"param":["l","groups","name /\n    public Warp(Location l, Group[] groups, String name) {\n        location = l;\n        allowedGroups = groups;\n        this.name = name;\n        isPlayerHome = false;\n        owner = null;\n    }\n\n    /** Set up a normal warp, access for all","l","name /\n    public Warp(Location l, String name) {\n        location = l;\n        this.name = name;\n        isPlayerHome = false;\n        owner = null;\n        allowedGroups = null;\n    }\n\n    public Warp(Location l, String name, String owner, boolean isHome) {\n        location = l;\n        this.name = name;\n        this.owner = owner;\n        isPlayerHome = isHome;\n        allowedGroups = null;\n    }\n\n    /** Get the warps name","l /\n    public void setLocation(Location l) {\n        this.location = l;\n    }\n\n    /** Checks if a given {@link Player} can warp","player the {@link Player} to check","player","group","group"],"retur":["n /\n    public String getName() {\n        return name;\n    }\n\n    /** Get owners identity. May return null if this is no private home warp","n /\n    public String getOwner() {\n        return owner;\n    }\n\n    /** Get the warp location.","n /\n    public boolean isGroupRestricted() {\n        return !(allowedGroups == null);\n    }\n\n    /** Check if the group with the specified name is allowed to use this warp.","n /\n    public Group[] getGroups() {\n        return allowedGroups;\n    }\n\n    public List<String> getGroupsAsString() {\n        List<String> list = new ArrayList<String>();\n        if (allowedGroups == null) {\n            return list;\n        }\n        for (Group g : allowedGroups) {\n            list.add(g.getName());\n        }\n        return list;\n    }\n\n    /** Check if this warp is a player home","n"],"return":["Location object /\n    public Location getLocation() {\n        return location;\n    }\n\n    /** Override the warp location","{@code true} if can warp; {@code false} if not /\n    public boolean canWarp(Player player) {\n        if (owner != null) {\n            return isOwner(player) || (player.isAdmin() || player.hasPermission(\"wolf.command.warp.admin\"));\n        }\n        else if (allowedGroups != null) {\n            for (Group gr : allowedGroups) {\n                if (player.getGroup().hasControlOver(gr)) {\n                    return true;\n                }\n            }\n            // Not in allowed group\n            return false;\n        }\n        // No restrictions, all allowed\n        return true;\n    }\n\n    /** Check preconditions and warp a player to this warps location","True if warped, false otherwise /\n    public boolean warp(Player player) {\n        if (!canWarp(player)) {\n            return false;\n        }\n        player.teleportTo(location, Teleport.TeleportCause.WARP);\n        return true;\n    }\n\n    /** Check if this warp is restricted to one or more groups","true if group is allowed, false otherwise /\n    public boolean isGroupAllowed(String group) {\n        if (allowedGroups == null) {\n            return true;\n        }\n        Group realGroup = Wolf.usersAndGroups().getGroup(group);\n\n        if (realGroup == null) {\n            return false;\n        }\n        for (Group g : allowedGroups) {\n            if (g.getName().equals(realGroup.getName()) || realGroup.hasControlOver(g)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Check if the group with the specified name is allowed to use this warp.","true if group is allowed, false otherwise /\n    public boolean isGroupAllowed(Group group) {\n        if (allowedGroups == null) {\n            return true;\n        }\n        for (Group g : allowedGroups) {\n            if (g.getName().equals(group.getName()) || group.hasControlOver(g)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Return the array of allowed groups"]},"scope":"public","return":"boolean","name":"isPlayerHome","args":[]},{"title":"toString method","description":"toString method","scope":"public","describe":"final","return":"String","name":"toString","args":[]}],"imports":["io.wolfscript.Wolf","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.event.player.Teleport","io.wolfscript.user.Group","java.util.ArrayList","java.util.Arrays","java.util.List"],"properties":[]},"io.wolfscript.warp.WarpProvider":{"namespace":"io.wolfscript.warp","title":"Access to the backbone for the whitelist","description":"Access to the backbone for the whitelist","doc":{"author":["Chris (damagefilter)"]},"name":"WarpProvider","qualifiedname":"io.wolfscript.warp.WarpProvider","type":"class","scope":"public","constructors":[{"title":"WarpProvider constructor","description":"WarpProvider constructor","scope":"public","name":"WarpProvider","args":[]}],"methods":[{"title":"reload method","description":"reload method","scope":"public","return":"void","name":"reload","args":[]},{"title":"warpExists method","description":"warpExists method","scope":"public","return":"boolean","name":"warpExists","args":[{"name":"name","type":"String","description":"name argument"}]}],"imports":["io.wolfscript.Wolf","io.wolfscript.ToolBox","io.wolfscript.api.entity.living.humanoid.Player","io.wolfscript.api.world.position.Location","io.wolfscript.backbone.BackboneWarps","java.util.Collections","java.util.List"],"properties":[{"name":"AllWarps","modifier":"readonly","args":[],"description":"Get: Add new warp","doc":{"param":["warp /\n    public void addWarp(Warp warp) {\n        Warp test = getWarp(warp.getName());\n\n        if (test != null) {\n            warps.remove(test);\n        }\n        backbone.addWarp(warp);\n        warps.add(warp);\n    }\n\n    /** Remove a warp","warp /\n    public void removeWarp(Warp warp) {\n        backbone.removeWarp(warp);\n        warps.remove(warp);\n    }\n\n    /** Set home for player, this updates a player home if there already is one","player /\n    public void setHome(Player player, Location location) {\n        Warp warp = getHome(player);\n\n        if (warp != null) {\n            if (!ToolBox.isUUID(warp.getOwner())) {\n                Wolf.log.info(\"Replacing legacy Home for User: \" + player.getName() + \" (Original: \" + warp.toString() + \")\");\n                removeWarp(warp);\n                warp = new Warp(location, \"HOME_\" + player.getUUIDString(), player.getUUIDString(), true);\n                warps.add(warp);\n                backbone.addWarp(warp);\n            }\n            else {\n                warp.setLocation(location);\n                backbone.updateWarp(warp);\n            }\n        }\n        else {\n            Warp newWarp = new Warp(location, \"HOME_\" + player.getUUIDString(), player.getUUIDString(), true);\n            warps.add(newWarp);\n            backbone.addWarp(newWarp);\n        }\n    }\n\n    /** Returns warp that has the given name or null if not exists","name","player","identity"],"retur":["n /\n    public Warp getWarp(String name) {\n        for (Warp warp : warps) {\n            if (warp.getName().equals(name)) {\n                if (!warp.isPlayerHome()) {\n                    return warp;\n                }\n            }\n        }\n        return null;\n    }\n\n    /** Returns this players home","n /\n    public Warp getHome(Player player) {\n        Warp home = getHome(player.getUUIDString());\n        if (home == null) {\n            home = getHome(player.getName());\n            if (home != null) {\n                Wolf.log.info(\"Replacing legacy Home for User: \" + player.getName() + \" (Original: \" + home.toString() + \")\");\n                Location original = home.getLocation();\n                removeWarp(home);\n                home = new Warp(original, \"HOME_\" + player.getUUIDString(), player.getUUIDString(), true);\n                addWarp(home);\n            }\n        }\n        return home;\n    }\n\n    /** Return home for a player with this name","n /\n    public Warp getHome(String identity) {\n        for (Warp warp : warps) {\n            if (warp.isPlayerHome()) {\n                if (warp.getOwner().equals(identity)) {\n                    return warp;\n                }\n            }\n        }\n        return null;\n    }\n\n    /** Return a non-modifiable list of all available warps","n"]},"return":"List<Warp>","scope":"public","title":"Get: Add new warp"}]}}